import type { IDataObject, IExecuteFunctions, IExecuteSingleFunctions, IHttpRequestMethods, IHttpRequestOptions, ILoadOptionsFunctions, INodeExecutionData, IN8nHttpFullResponse, INodeListSearchResult, ICredentialDataDecryptedObject } from 'n8n-workflow';
export declare const XMsVersion = "2021-12-02";
export declare const HeaderConstants: {
    AUTHORIZATION: string;
    CONTENT_ENCODING: string;
    CONTENT_LANGUAGE: string;
    CONTENT_LENGTH: string;
    CONTENT_MD5: string;
    CONTENT_TYPE: string;
    DATE: string;
    ETAG: string;
    IF_MATCH: string;
    IF_MODIFIED_SINCE: string;
    IF_NONE_MATCH: string;
    IF_UNMODIFIED_SINCE: string;
    ORIGIN: string;
    RANGE: string;
    X_MS_COPY_SOURCE: string;
    X_MS_DATE: string;
    X_MS_VERSION: string;
    X_MS_BLOB_TYPE: string;
    X_MS_BLOB_CONTENT_DISPOSITION: string;
    X_MS_BLOB_PUBLIC_ACCESS: string;
    X_MS_HAS_IMMUTABILITY_POLICY: string;
    X_MS_HAS_LEGAL_HOLD: string;
    X_MS_CONTENT_CRC64: string;
    X_MS_REQUEST_SERVER_ENCRYPTED: string;
    X_MS_ENCRYPTION_SCOPE: string;
    X_MS_VERSION_ID: string;
    X_MS_TAG_COUNT: string;
    X_MS_COPY_PROGRESS: string;
    X_MS_INCREMENTAL_COPY: string;
    X_MS_BLOB_SEQUENCE_NUMBER: string;
    X_MS_BLOB_COMMITTED_BLOCK_COUNT: string;
    X_MS_SERVER_ENCRYPTED: string;
    X_MS_ENCRYPTION_CONTEXT: string;
    X_MS_BLOB_CONTENT_MD5: string;
    X_MS_BLOB_SEALED: string;
    X_MS_IMMUTABILITY_POLICY_UNTIL_DATE: string;
    X_MS_IMMUTABILITY_POLICY_MODE: string;
    X_MS_LEGAL_HOLD: string;
    X_MS_DELETE_TYPE_PERMANENT: string;
    X_MS_ACCESS_TIER: string;
    X_MS_BLOB_CACHE_CONTROL: string;
    X_MS_LEASE_ID: string;
    X_MS_BLOB_CONTENT_ENCODING: string;
    X_MS_BLOB_CONTENT_LANGUAGE: string;
    X_MS_BLOB_CONTENT_TYPE: string;
    X_MS_EXPIRY_OPTION: string;
    X_MS_EXPIRY_TIME: string;
    X_MS_TAGS: string;
    X_MS_UPN: string;
    PREFIX_X_MS: string;
    PREFIX_X_MS_META: string;
};
export declare function azureStorageApiRequest(this: IExecuteFunctions | IExecuteSingleFunctions | ILoadOptionsFunctions, method: IHttpRequestMethods, endpoint: string, body?: IDataObject, qs?: IDataObject, headers?: IDataObject, url?: string): Promise<string>;
export declare function handleErrorPostReceive(this: IExecuteSingleFunctions, data: INodeExecutionData[], response: IN8nHttpFullResponse): Promise<INodeExecutionData[]>;
export declare function getCanonicalizedHeadersString(requestOptions: IHttpRequestOptions): string;
export declare function getCanonicalizedResourceString(requestOptions: IHttpRequestOptions, credentials: ICredentialDataDecryptedObject): string;
export declare function parseHeaders(headers: IDataObject): IDataObject;
export declare function parseBlobList(xml: string): Promise<{
    blobs: IDataObject[];
    maxResults?: number;
    nextMarker?: string;
}>;
export declare function parseContainerList(xml: string): Promise<{
    containers: IDataObject[];
    maxResults?: number;
    nextMarker?: string;
}>;
export declare function getBlobs(this: ILoadOptionsFunctions, filter?: string, paginationToken?: string): Promise<INodeListSearchResult>;
export declare function getContainers(this: ILoadOptionsFunctions, filter?: string, paginationToken?: string): Promise<INodeListSearchResult>;
//# sourceMappingURL=GenericFunctions.d.ts.map