"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranscriptionStreamEvents$ = exports.TranscriptionStreamEvents$outboundSchema = exports.TranscriptionStreamEvents$inboundSchema = exports.TranscriptionStreamEventsData$ = exports.TranscriptionStreamEventsData$outboundSchema = exports.TranscriptionStreamEventsData$inboundSchema = void 0;
exports.transcriptionStreamEventsDataToJSON = transcriptionStreamEventsDataToJSON;
exports.transcriptionStreamEventsDataFromJSON = transcriptionStreamEventsDataFromJSON;
exports.transcriptionStreamEventsToJSON = transcriptionStreamEventsToJSON;
exports.transcriptionStreamEventsFromJSON = transcriptionStreamEventsFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const transcriptionstreamdone_js_1 = require("./transcriptionstreamdone.js");
const transcriptionstreameventtypes_js_1 = require("./transcriptionstreameventtypes.js");
const transcriptionstreamlanguage_js_1 = require("./transcriptionstreamlanguage.js");
const transcriptionstreamsegmentdelta_js_1 = require("./transcriptionstreamsegmentdelta.js");
const transcriptionstreamtextdelta_js_1 = require("./transcriptionstreamtextdelta.js");
/** @internal */
exports.TranscriptionStreamEventsData$inboundSchema = z.union([
    transcriptionstreamdone_js_1.TranscriptionStreamDone$inboundSchema.and(z.object({ type: z.literal("transcription.done") }).transform((v) => ({
        type: v.type,
    }))),
    transcriptionstreamsegmentdelta_js_1.TranscriptionStreamSegmentDelta$inboundSchema.and(z.object({ type: z.literal("transcription.segment") }).transform((v) => ({
        type: v.type,
    }))),
    transcriptionstreamlanguage_js_1.TranscriptionStreamLanguage$inboundSchema.and(z.object({ type: z.literal("transcription.language") }).transform((v) => ({
        type: v.type,
    }))),
    transcriptionstreamtextdelta_js_1.TranscriptionStreamTextDelta$inboundSchema.and(z.object({ type: z.literal("transcription.text.delta") }).transform((v) => ({ type: v.type }))),
]);
/** @internal */
exports.TranscriptionStreamEventsData$outboundSchema = z.union([
    transcriptionstreamdone_js_1.TranscriptionStreamDone$outboundSchema.and(z.object({ type: z.literal("transcription.done") }).transform((v) => ({
        type: v.type,
    }))),
    transcriptionstreamsegmentdelta_js_1.TranscriptionStreamSegmentDelta$outboundSchema.and(z.object({ type: z.literal("transcription.segment") }).transform((v) => ({
        type: v.type,
    }))),
    transcriptionstreamlanguage_js_1.TranscriptionStreamLanguage$outboundSchema.and(z.object({ type: z.literal("transcription.language") }).transform((v) => ({
        type: v.type,
    }))),
    transcriptionstreamtextdelta_js_1.TranscriptionStreamTextDelta$outboundSchema.and(z.object({ type: z.literal("transcription.text.delta") }).transform((v) => ({ type: v.type }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscriptionStreamEventsData$;
(function (TranscriptionStreamEventsData$) {
    /** @deprecated use `TranscriptionStreamEventsData$inboundSchema` instead. */
    TranscriptionStreamEventsData$.inboundSchema = exports.TranscriptionStreamEventsData$inboundSchema;
    /** @deprecated use `TranscriptionStreamEventsData$outboundSchema` instead. */
    TranscriptionStreamEventsData$.outboundSchema = exports.TranscriptionStreamEventsData$outboundSchema;
})(TranscriptionStreamEventsData$ || (exports.TranscriptionStreamEventsData$ = TranscriptionStreamEventsData$ = {}));
function transcriptionStreamEventsDataToJSON(transcriptionStreamEventsData) {
    return JSON.stringify(exports.TranscriptionStreamEventsData$outboundSchema.parse(transcriptionStreamEventsData));
}
function transcriptionStreamEventsDataFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscriptionStreamEventsData$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscriptionStreamEventsData' from JSON`);
}
/** @internal */
exports.TranscriptionStreamEvents$inboundSchema = z.object({
    event: transcriptionstreameventtypes_js_1.TranscriptionStreamEventTypes$inboundSchema,
    data: z.string().transform((v, ctx) => {
        try {
            return JSON.parse(v);
        }
        catch (err) {
            ctx.addIssue({
                code: z.ZodIssueCode.custom,
                message: `malformed json: ${err}`,
            });
            return z.NEVER;
        }
    }).pipe(z.union([
        transcriptionstreamdone_js_1.TranscriptionStreamDone$inboundSchema.and(z.object({ type: z.literal("transcription.done") }).transform((v) => ({
            type: v.type,
        }))),
        transcriptionstreamsegmentdelta_js_1.TranscriptionStreamSegmentDelta$inboundSchema.and(z.object({ type: z.literal("transcription.segment") }).transform((v) => ({ type: v.type }))),
        transcriptionstreamlanguage_js_1.TranscriptionStreamLanguage$inboundSchema.and(z.object({ type: z.literal("transcription.language") }).transform((v) => ({ type: v.type }))),
        transcriptionstreamtextdelta_js_1.TranscriptionStreamTextDelta$inboundSchema.and(z.object({ type: z.literal("transcription.text.delta") }).transform((v) => ({ type: v.type }))),
    ])),
});
/** @internal */
exports.TranscriptionStreamEvents$outboundSchema = z.object({
    event: transcriptionstreameventtypes_js_1.TranscriptionStreamEventTypes$outboundSchema,
    data: z.union([
        transcriptionstreamdone_js_1.TranscriptionStreamDone$outboundSchema.and(z.object({ type: z.literal("transcription.done") }).transform((v) => ({
            type: v.type,
        }))),
        transcriptionstreamsegmentdelta_js_1.TranscriptionStreamSegmentDelta$outboundSchema.and(z.object({ type: z.literal("transcription.segment") }).transform((v) => ({
            type: v.type,
        }))),
        transcriptionstreamlanguage_js_1.TranscriptionStreamLanguage$outboundSchema.and(z.object({ type: z.literal("transcription.language") }).transform((v) => ({ type: v.type }))),
        transcriptionstreamtextdelta_js_1.TranscriptionStreamTextDelta$outboundSchema.and(z.object({ type: z.literal("transcription.text.delta") }).transform((v) => ({ type: v.type }))),
    ]),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TranscriptionStreamEvents$;
(function (TranscriptionStreamEvents$) {
    /** @deprecated use `TranscriptionStreamEvents$inboundSchema` instead. */
    TranscriptionStreamEvents$.inboundSchema = exports.TranscriptionStreamEvents$inboundSchema;
    /** @deprecated use `TranscriptionStreamEvents$outboundSchema` instead. */
    TranscriptionStreamEvents$.outboundSchema = exports.TranscriptionStreamEvents$outboundSchema;
})(TranscriptionStreamEvents$ || (exports.TranscriptionStreamEvents$ = TranscriptionStreamEvents$ = {}));
function transcriptionStreamEventsToJSON(transcriptionStreamEvents) {
    return JSON.stringify(exports.TranscriptionStreamEvents$outboundSchema.parse(transcriptionStreamEvents));
}
function transcriptionStreamEventsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TranscriptionStreamEvents$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TranscriptionStreamEvents' from JSON`);
}
//# sourceMappingURL=transcriptionstreamevents.js.map