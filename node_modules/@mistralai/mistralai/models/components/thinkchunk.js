"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThinkChunk$ = exports.ThinkChunk$outboundSchema = exports.ThinkChunk$inboundSchema = exports.ThinkChunkType$ = exports.ThinkChunkType$outboundSchema = exports.ThinkChunkType$inboundSchema = exports.Thinking$ = exports.Thinking$outboundSchema = exports.Thinking$inboundSchema = exports.ThinkChunkType = void 0;
exports.thinkingToJSON = thinkingToJSON;
exports.thinkingFromJSON = thinkingFromJSON;
exports.thinkChunkToJSON = thinkChunkToJSON;
exports.thinkChunkFromJSON = thinkChunkFromJSON;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
const referencechunk_js_1 = require("./referencechunk.js");
const textchunk_js_1 = require("./textchunk.js");
exports.ThinkChunkType = {
    Thinking: "thinking",
};
/** @internal */
exports.Thinking$inboundSchema = z.union([referencechunk_js_1.ReferenceChunk$inboundSchema, textchunk_js_1.TextChunk$inboundSchema]);
/** @internal */
exports.Thinking$outboundSchema = z.union([referencechunk_js_1.ReferenceChunk$outboundSchema, textchunk_js_1.TextChunk$outboundSchema]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Thinking$;
(function (Thinking$) {
    /** @deprecated use `Thinking$inboundSchema` instead. */
    Thinking$.inboundSchema = exports.Thinking$inboundSchema;
    /** @deprecated use `Thinking$outboundSchema` instead. */
    Thinking$.outboundSchema = exports.Thinking$outboundSchema;
})(Thinking$ || (exports.Thinking$ = Thinking$ = {}));
function thinkingToJSON(thinking) {
    return JSON.stringify(exports.Thinking$outboundSchema.parse(thinking));
}
function thinkingFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Thinking$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Thinking' from JSON`);
}
/** @internal */
exports.ThinkChunkType$inboundSchema = z.nativeEnum(exports.ThinkChunkType);
/** @internal */
exports.ThinkChunkType$outboundSchema = exports.ThinkChunkType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ThinkChunkType$;
(function (ThinkChunkType$) {
    /** @deprecated use `ThinkChunkType$inboundSchema` instead. */
    ThinkChunkType$.inboundSchema = exports.ThinkChunkType$inboundSchema;
    /** @deprecated use `ThinkChunkType$outboundSchema` instead. */
    ThinkChunkType$.outboundSchema = exports.ThinkChunkType$outboundSchema;
})(ThinkChunkType$ || (exports.ThinkChunkType$ = ThinkChunkType$ = {}));
/** @internal */
exports.ThinkChunk$inboundSchema = z.object({
    thinking: z.array(z.union([referencechunk_js_1.ReferenceChunk$inboundSchema, textchunk_js_1.TextChunk$inboundSchema])),
    closed: z.boolean().optional(),
    type: exports.ThinkChunkType$inboundSchema.default("thinking"),
});
/** @internal */
exports.ThinkChunk$outboundSchema = z.object({
    thinking: z.array(z.union([referencechunk_js_1.ReferenceChunk$outboundSchema, textchunk_js_1.TextChunk$outboundSchema])),
    closed: z.boolean().optional(),
    type: exports.ThinkChunkType$outboundSchema.default("thinking"),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ThinkChunk$;
(function (ThinkChunk$) {
    /** @deprecated use `ThinkChunk$inboundSchema` instead. */
    ThinkChunk$.inboundSchema = exports.ThinkChunk$inboundSchema;
    /** @deprecated use `ThinkChunk$outboundSchema` instead. */
    ThinkChunk$.outboundSchema = exports.ThinkChunk$outboundSchema;
})(ThinkChunk$ || (exports.ThinkChunk$ = ThinkChunk$ = {}));
function thinkChunkToJSON(thinkChunk) {
    return JSON.stringify(exports.ThinkChunk$outboundSchema.parse(thinkChunk));
}
function thinkChunkFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ThinkChunk$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ThinkChunk' from JSON`);
}
//# sourceMappingURL=thinkchunk.js.map