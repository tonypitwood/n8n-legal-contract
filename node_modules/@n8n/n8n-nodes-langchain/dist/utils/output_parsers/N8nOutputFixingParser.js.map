{"version":3,"sources":["../../../utils/output_parsers/N8nOutputFixingParser.ts"],"sourcesContent":["import type { Callbacks } from '@langchain/core/callbacks/manager';\nimport type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport type { AIMessage } from '@langchain/core/messages';\nimport { BaseOutputParser, OutputParserException } from '@langchain/core/output_parsers';\nimport type { PromptTemplate } from '@langchain/core/prompts';\nimport type { ISupplyDataFunctions } from 'n8n-workflow';\nimport { NodeConnectionTypes } from 'n8n-workflow';\n\nimport type { N8nStructuredOutputParser } from './N8nStructuredOutputParser';\nimport { logAiEvent } from '../helpers';\n\nexport class N8nOutputFixingParser extends BaseOutputParser {\n\tlc_namespace = ['langchain', 'output_parsers', 'fix'];\n\n\tconstructor(\n\t\tprivate context: ISupplyDataFunctions,\n\t\tprivate model: BaseLanguageModel,\n\t\tprivate outputParser: N8nStructuredOutputParser,\n\t\tprivate fixPromptTemplate: PromptTemplate,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetRetryChain() {\n\t\treturn this.fixPromptTemplate.pipe(this.model);\n\t}\n\n\t/**\n\t * Attempts to parse the completion string using the output parser.\n\t * If the initial parse fails, it tries to fix the output using a retry chain.\n\t * @param completion The string to be parsed\n\t * @returns The parsed response\n\t * @throws Error if both parsing attempts fail\n\t */\n\tasync parse(completion: string, callbacks?: Callbacks) {\n\t\tconst { index } = this.context.addInputData(NodeConnectionTypes.AiOutputParser, [\n\t\t\t[{ json: { action: 'parse', text: completion } }],\n\t\t]);\n\n\t\ttry {\n\t\t\t// First attempt to parse the completion\n\t\t\tconst response = await this.outputParser.parse(completion, callbacks, (e) => {\n\t\t\t\tif (e instanceof OutputParserException) {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t\treturn new OutputParserException(e.message, completion);\n\t\t\t});\n\t\t\tlogAiEvent(this.context, 'ai-output-parsed', { text: completion, response });\n\n\t\t\tthis.context.addOutputData(NodeConnectionTypes.AiOutputParser, index, [\n\t\t\t\t[{ json: { action: 'parse', response } }],\n\t\t\t]);\n\n\t\t\treturn response;\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof OutputParserException)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t// Second attempt: use retry chain to fix the output\n\t\t\t\tconst result = (await this.getRetryChain().invoke({\n\t\t\t\t\tcompletion,\n\t\t\t\t\terror: error.message,\n\t\t\t\t\tinstructions: this.getFormatInstructions(),\n\t\t\t\t})) as AIMessage;\n\n\t\t\t\tconst resultText = result.content.toString();\n\t\t\t\tconst parsed = await this.outputParser.parse(resultText, callbacks);\n\n\t\t\t\t// Add the successfully parsed output to the context\n\t\t\t\tthis.context.addOutputData(NodeConnectionTypes.AiOutputParser, index, [\n\t\t\t\t\t[{ json: { action: 'parse', response: parsed } }],\n\t\t\t\t]);\n\n\t\t\t\treturn parsed;\n\t\t\t} catch (autoParseError) {\n\t\t\t\t// If both attempts fail, add the error to the output and throw\n\t\t\t\tthis.context.addOutputData(NodeConnectionTypes.AiOutputParser, index, autoParseError);\n\t\t\t\tthrow autoParseError;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Method to get the format instructions for the parser.\n\t * @returns The format instructions for the parser.\n\t */\n\tgetFormatInstructions() {\n\t\treturn this.outputParser.getFormatInstructions();\n\t}\n\n\tgetSchema() {\n\t\treturn this.outputParser.schema;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,4BAAwD;AAGxD,0BAAoC;AAGpC,qBAA2B;AAEpB,MAAM,8BAA8B,uCAAiB;AAAA,EAG3D,YACS,SACA,OACA,cACA,mBACP;AACD,UAAM;AALE;AACA;AACA;AACA;AANT,wBAAe,CAAC,aAAa,kBAAkB,KAAK;AAAA,EASpD;AAAA,EAEA,gBAAgB;AACf,WAAO,KAAK,kBAAkB,KAAK,KAAK,KAAK;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,MAAM,YAAoB,WAAuB;AACtD,UAAM,EAAE,MAAM,IAAI,KAAK,QAAQ,aAAa,wCAAoB,gBAAgB;AAAA,MAC/E,CAAC,EAAE,MAAM,EAAE,QAAQ,SAAS,MAAM,WAAW,EAAE,CAAC;AAAA,IACjD,CAAC;AAED,QAAI;AAEH,YAAM,WAAW,MAAM,KAAK,aAAa,MAAM,YAAY,WAAW,CAAC,MAAM;AAC5E,YAAI,aAAa,6CAAuB;AACvC,iBAAO;AAAA,QACR;AACA,eAAO,IAAI,4CAAsB,EAAE,SAAS,UAAU;AAAA,MACvD,CAAC;AACD,qCAAW,KAAK,SAAS,oBAAoB,EAAE,MAAM,YAAY,SAAS,CAAC;AAE3E,WAAK,QAAQ,cAAc,wCAAoB,gBAAgB,OAAO;AAAA,QACrE,CAAC,EAAE,MAAM,EAAE,QAAQ,SAAS,SAAS,EAAE,CAAC;AAAA,MACzC,CAAC;AAED,aAAO;AAAA,IACR,SAAS,OAAO;AACf,UAAI,EAAE,iBAAiB,8CAAwB;AAC9C,cAAM;AAAA,MACP;AACA,UAAI;AAEH,cAAM,SAAU,MAAM,KAAK,cAAc,EAAE,OAAO;AAAA,UACjD;AAAA,UACA,OAAO,MAAM;AAAA,UACb,cAAc,KAAK,sBAAsB;AAAA,QAC1C,CAAC;AAED,cAAM,aAAa,OAAO,QAAQ,SAAS;AAC3C,cAAM,SAAS,MAAM,KAAK,aAAa,MAAM,YAAY,SAAS;AAGlE,aAAK,QAAQ,cAAc,wCAAoB,gBAAgB,OAAO;AAAA,UACrE,CAAC,EAAE,MAAM,EAAE,QAAQ,SAAS,UAAU,OAAO,EAAE,CAAC;AAAA,QACjD,CAAC;AAED,eAAO;AAAA,MACR,SAAS,gBAAgB;AAExB,aAAK,QAAQ,cAAc,wCAAoB,gBAAgB,OAAO,cAAc;AACpF,cAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,wBAAwB;AACvB,WAAO,KAAK,aAAa,sBAAsB;AAAA,EAChD;AAAA,EAEA,YAAY;AACX,WAAO,KAAK,aAAa;AAAA,EAC1B;AACD;","names":[]}