{"version":3,"sources":["../../../utils/output_parsers/N8nItemListOutputParser.ts"],"sourcesContent":["import { BaseOutputParser, OutputParserException } from '@langchain/core/output_parsers';\n\nexport class N8nItemListOutputParser extends BaseOutputParser<string[]> {\n\tlc_namespace = ['n8n-nodes-langchain', 'output_parsers', 'list_items'];\n\n\tprivate numberOfItems: number | undefined;\n\n\tprivate separator: string;\n\n\tconstructor(options: { numberOfItems?: number; separator?: string }) {\n\t\tsuper();\n\n\t\tconst { numberOfItems = 3, separator = '\\n' } = options;\n\n\t\tif (numberOfItems && numberOfItems > 0) {\n\t\t\tthis.numberOfItems = numberOfItems;\n\t\t}\n\n\t\tthis.separator = separator;\n\n\t\tif (this.separator === '\\\\n') {\n\t\t\tthis.separator = '\\n';\n\t\t}\n\t}\n\n\tasync parse(text: string): Promise<string[]> {\n\t\tconst response = text\n\t\t\t.split(this.separator)\n\t\t\t.map((item) => item.trim())\n\t\t\t.filter((item) => item);\n\n\t\tif (this.numberOfItems && response.length < this.numberOfItems) {\n\t\t\t// Only error if to few items got returned, if there are to many we can autofix it\n\t\t\tthrow new OutputParserException(\n\t\t\t\t`Wrong number of items returned. Expected ${this.numberOfItems} items but got ${response.length} items instead.`,\n\t\t\t);\n\t\t}\n\n\t\treturn response.slice(0, this.numberOfItems);\n\t}\n\n\tgetFormatInstructions(): string {\n\t\tconst instructions = `Your response should be a list of ${\n\t\t\tthis.numberOfItems ? this.numberOfItems + ' ' : ''\n\t\t}items separated by`;\n\n\t\tconst numberOfExamples = this.numberOfItems ?? 3; // Default number of examples in case numberOfItems is not set\n\n\t\tconst examples: string[] = [];\n\t\tfor (let i = 1; i <= numberOfExamples; i++) {\n\t\t\texamples.push(`item${i}`);\n\t\t}\n\n\t\treturn `${instructions} \"${this.separator}\" (for example: \"${examples.join(this.separator)}\")`;\n\t}\n\n\tgetSchema() {\n\t\treturn;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAwD;AAEjD,MAAM,gCAAgC,uCAA2B;AAAA,EAOvE,YAAY,SAAyD;AACpE,UAAM;AAPP,wBAAe,CAAC,uBAAuB,kBAAkB,YAAY;AASpE,UAAM,EAAE,gBAAgB,GAAG,YAAY,KAAK,IAAI;AAEhD,QAAI,iBAAiB,gBAAgB,GAAG;AACvC,WAAK,gBAAgB;AAAA,IACtB;AAEA,SAAK,YAAY;AAEjB,QAAI,KAAK,cAAc,OAAO;AAC7B,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,MAAM,MAAM,MAAiC;AAC5C,UAAM,WAAW,KACf,MAAM,KAAK,SAAS,EACpB,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,EACzB,OAAO,CAAC,SAAS,IAAI;AAEvB,QAAI,KAAK,iBAAiB,SAAS,SAAS,KAAK,eAAe;AAE/D,YAAM,IAAI;AAAA,QACT,4CAA4C,KAAK,aAAa,kBAAkB,SAAS,MAAM;AAAA,MAChG;AAAA,IACD;AAEA,WAAO,SAAS,MAAM,GAAG,KAAK,aAAa;AAAA,EAC5C;AAAA,EAEA,wBAAgC;AAC/B,UAAM,eAAe,qCACpB,KAAK,gBAAgB,KAAK,gBAAgB,MAAM,EACjD;AAEA,UAAM,mBAAmB,KAAK,iBAAiB;AAE/C,UAAM,WAAqB,CAAC;AAC5B,aAAS,IAAI,GAAG,KAAK,kBAAkB,KAAK;AAC3C,eAAS,KAAK,OAAO,CAAC,EAAE;AAAA,IACzB;AAEA,WAAO,GAAG,YAAY,KAAK,KAAK,SAAS,oBAAoB,SAAS,KAAK,KAAK,SAAS,CAAC;AAAA,EAC3F;AAAA,EAEA,YAAY;AACX;AAAA,EACD;AACD;","names":[]}