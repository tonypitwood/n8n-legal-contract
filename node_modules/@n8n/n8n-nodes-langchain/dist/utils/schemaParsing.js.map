{"version":3,"sources":["../../utils/schemaParsing.ts"],"sourcesContent":["import { jsonSchemaToZod } from '@n8n/json-schema-to-zod';\nimport { json as generateJsonSchema } from 'generate-schema';\nimport type { SchemaObject } from 'generate-schema';\nimport type { JSONSchema7 } from 'json-schema';\nimport type { IExecuteFunctions } from 'n8n-workflow';\nimport { NodeOperationError, jsonParse } from 'n8n-workflow';\nimport type { z } from 'zod';\n\nfunction makeAllPropertiesRequired(schema: JSONSchema7): JSONSchema7 {\n\tfunction isPropertySchema(property: unknown): property is JSONSchema7 {\n\t\treturn typeof property === 'object' && property !== null && 'type' in property;\n\t}\n\n\t// Handle object properties\n\tif (schema.type === 'object' && schema.properties) {\n\t\tconst properties = Object.keys(schema.properties);\n\t\tif (properties.length > 0) {\n\t\t\tschema.required = properties;\n\t\t}\n\n\t\tfor (const key of properties) {\n\t\t\tif (isPropertySchema(schema.properties[key])) {\n\t\t\t\tmakeAllPropertiesRequired(schema.properties[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Handle arrays\n\tif (schema.type === 'array' && schema.items && isPropertySchema(schema.items)) {\n\t\tschema.items = makeAllPropertiesRequired(schema.items);\n\t}\n\n\treturn schema;\n}\n\nexport function generateSchemaFromExample(\n\texampleJsonString: string,\n\tallFieldsRequired = false,\n): JSONSchema7 {\n\tconst parsedExample = jsonParse<SchemaObject>(exampleJsonString);\n\n\tconst schema = generateJsonSchema(parsedExample) as JSONSchema7;\n\n\tif (allFieldsRequired) {\n\t\treturn makeAllPropertiesRequired(schema);\n\t}\n\n\treturn schema;\n}\n\nexport function convertJsonSchemaToZod<T extends z.ZodTypeAny = z.ZodTypeAny>(schema: JSONSchema7) {\n\treturn jsonSchemaToZod<T>(schema);\n}\n\nexport function throwIfToolSchema(ctx: IExecuteFunctions, error: Error) {\n\tif (error?.message?.includes('tool input did not match expected schema')) {\n\t\tthrow new NodeOperationError(\n\t\t\tctx.getNode(),\n\t\t\t`${error.message}.\n\t\t\tThis is most likely because some of your tools are configured to require a specific schema. This is not supported by Conversational Agent. Remove the schema from the tool configuration or use Tools agent instead.`,\n\t\t);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAgC;AAChC,6BAA2C;AAI3C,0BAA8C;AAG9C,SAAS,0BAA0B,QAAkC;AACpE,WAAS,iBAAiB,UAA4C;AACrE,WAAO,OAAO,aAAa,YAAY,aAAa,QAAQ,UAAU;AAAA,EACvE;AAGA,MAAI,OAAO,SAAS,YAAY,OAAO,YAAY;AAClD,UAAM,aAAa,OAAO,KAAK,OAAO,UAAU;AAChD,QAAI,WAAW,SAAS,GAAG;AAC1B,aAAO,WAAW;AAAA,IACnB;AAEA,eAAW,OAAO,YAAY;AAC7B,UAAI,iBAAiB,OAAO,WAAW,GAAG,CAAC,GAAG;AAC7C,kCAA0B,OAAO,WAAW,GAAG,CAAC;AAAA,MACjD;AAAA,IACD;AAAA,EACD;AAGA,MAAI,OAAO,SAAS,WAAW,OAAO,SAAS,iBAAiB,OAAO,KAAK,GAAG;AAC9E,WAAO,QAAQ,0BAA0B,OAAO,KAAK;AAAA,EACtD;AAEA,SAAO;AACR;AAEO,SAAS,0BACf,mBACA,oBAAoB,OACN;AACd,QAAM,oBAAgB,+BAAwB,iBAAiB;AAE/D,QAAM,aAAS,uBAAAA,MAAmB,aAAa;AAE/C,MAAI,mBAAmB;AACtB,WAAO,0BAA0B,MAAM;AAAA,EACxC;AAEA,SAAO;AACR;AAEO,SAAS,uBAA8D,QAAqB;AAClG,aAAO,2CAAmB,MAAM;AACjC;AAEO,SAAS,kBAAkB,KAAwB,OAAc;AACvE,MAAI,OAAO,SAAS,SAAS,0CAA0C,GAAG;AACzE,UAAM,IAAI;AAAA,MACT,IAAI,QAAQ;AAAA,MACZ,GAAG,MAAM,OAAO;AAAA;AAAA,IAEjB;AAAA,EACD;AACD;","names":["generateJsonSchema"]}