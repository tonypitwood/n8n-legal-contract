{"version":3,"sources":["../../../../nodes/embeddings/EmbeddingsHuggingFaceInference/EmbeddingsHuggingFaceInference.node.ts"],"sourcesContent":["import type { InferenceProviderOrPolicy } from '@huggingface/inference';\nimport { PROVIDERS_OR_POLICIES } from '@huggingface/inference';\nimport { HuggingFaceInferenceEmbeddings } from '@langchain/community/embeddings/hf';\nimport {\n\tNodeConnectionTypes,\n\tNodeOperationError,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype ISupplyDataFunctions,\n\ttype SupplyData,\n} from 'n8n-workflow';\n\nimport { logWrapper } from '@utils/logWrapper';\nimport { getConnectionHintNoticeField } from '@utils/sharedFields';\n\nexport class EmbeddingsHuggingFaceInference implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Embeddings Hugging Face Inference',\n\t\tname: 'embeddingsHuggingFaceInference',\n\t\ticon: 'file:huggingface.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Use HuggingFace Inference Embeddings',\n\t\tdefaults: {\n\t\t\tname: 'Embeddings HuggingFace Inference',\n\t\t},\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'huggingFaceApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Embeddings'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingshuggingfaceinference/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [],\n\n\t\toutputs: [NodeConnectionTypes.AiEmbedding],\n\t\toutputNames: ['Embeddings'],\n\t\tproperties: [\n\t\t\tgetConnectionHintNoticeField([NodeConnectionTypes.AiVectorStore]),\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'Each model is using different dimensional density for embeddings. Please make sure to use the same dimensionality for your vector store. The default model is using 768-dimensional embeddings.',\n\t\t\t\tname: 'notice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Model Name',\n\t\t\t\tname: 'modelName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'sentence-transformers/distilbert-base-nli-mean-tokens',\n\t\t\t\tdescription: 'The model name to use from HuggingFace library',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\tplaceholder: 'Add Option',\n\t\t\t\tdescription: 'Additional options to add',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Custom Inference Endpoint',\n\t\t\t\t\t\tname: 'endpointUrl',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription: 'Custom endpoint URL',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Provider',\n\t\t\t\t\t\tname: 'provider',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\toptions: PROVIDERS_OR_POLICIES.map((value) => ({ value, name: value })),\n\t\t\t\t\t\tdefault: 'auto',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync supplyData(this: ISupplyDataFunctions, itemIndex: number): Promise<SupplyData> {\n\t\tthis.logger.debug('Supply data for embeddings HF Inference');\n\t\tconst model = this.getNodeParameter(\n\t\t\t'modelName',\n\t\t\titemIndex,\n\t\t\t'sentence-transformers/distilbert-base-nli-mean-tokens',\n\t\t) as string;\n\t\tconst credentials = await this.getCredentials('huggingFaceApi');\n\t\tconst options = this.getNodeParameter('options', itemIndex, {}) as object;\n\n\t\tif ('provider' in options && !isValidHFProviderOrPolicy(options.provider)) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Unsupported provider');\n\t\t}\n\n\t\tconst embeddings = new HuggingFaceInferenceEmbeddings({\n\t\t\tapiKey: credentials.apiKey as string,\n\t\t\tmodel,\n\t\t\t...options,\n\t\t});\n\n\t\treturn {\n\t\t\tresponse: logWrapper(embeddings, this),\n\t\t};\n\t}\n}\n\nfunction isValidHFProviderOrPolicy(provider: unknown): provider is InferenceProviderOrPolicy {\n\treturn (\n\t\ttypeof provider === 'string' && (PROVIDERS_OR_POLICIES as readonly string[]).includes(provider)\n\t);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAAsC;AACtC,gBAA+C;AAC/C,0BAOO;AAEP,wBAA2B;AAC3B,0BAA6C;AAEtC,MAAM,+BAAoD;AAAA,EAA1D;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,aAAa;AAAA,QACZ;AAAA,UACC,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,OAAO;AAAA,QACN,YAAY,CAAC,IAAI;AAAA,QACjB,eAAe;AAAA,UACd,IAAI,CAAC,YAAY;AAAA,QAClB;AAAA,QACA,WAAW;AAAA,UACV,sBAAsB;AAAA,YACrB;AAAA,cACC,KAAK;AAAA,YACN;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MAEA,QAAQ,CAAC;AAAA,MAET,SAAS,CAAC,wCAAoB,WAAW;AAAA,MACzC,aAAa,CAAC,YAAY;AAAA,MAC1B,YAAY;AAAA,YACX,kDAA6B,CAAC,wCAAoB,aAAa,CAAC;AAAA,QAChE;AAAA,UACC,aACC;AAAA,UACD,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,QACV;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,aAAa;AAAA,UACb,aAAa;AAAA,UACb,MAAM;AAAA,UACN,SAAS,CAAC;AAAA,UACV,SAAS;AAAA,YACR;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,SAAS;AAAA,cACT,aAAa;AAAA,cACb,MAAM;AAAA,YACP;AAAA,YACA;AAAA,cACC,aAAa;AAAA,cACb,MAAM;AAAA,cACN,MAAM;AAAA,cACN,SAAS,uCAAsB,IAAI,CAAC,WAAW,EAAE,OAAO,MAAM,MAAM,EAAE;AAAA,cACtE,SAAS;AAAA,YACV;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,WAAuC,WAAwC;AACpF,SAAK,OAAO,MAAM,yCAAyC;AAC3D,UAAM,QAAQ,KAAK;AAAA,MAClB;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,UAAM,cAAc,MAAM,KAAK,eAAe,gBAAgB;AAC9D,UAAM,UAAU,KAAK,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAE9D,QAAI,cAAc,WAAW,CAAC,0BAA0B,QAAQ,QAAQ,GAAG;AAC1E,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,sBAAsB;AAAA,IACpE;AAEA,UAAM,aAAa,IAAI,yCAA+B;AAAA,MACrD,QAAQ,YAAY;AAAA,MACpB;AAAA,MACA,GAAG;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,MACN,cAAU,8BAAW,YAAY,IAAI;AAAA,IACtC;AAAA,EACD;AACD;AAEA,SAAS,0BAA0B,UAA0D;AAC5F,SACC,OAAO,aAAa,YAAa,uCAA4C,SAAS,QAAQ;AAEhG;","names":[]}