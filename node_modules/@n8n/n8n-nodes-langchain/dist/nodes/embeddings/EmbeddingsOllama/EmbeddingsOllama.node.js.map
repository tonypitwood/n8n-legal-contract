{"version":3,"sources":["../../../../nodes/embeddings/EmbeddingsOllama/EmbeddingsOllama.node.ts"],"sourcesContent":["import { OllamaEmbeddings } from '@langchain/ollama';\nimport {\n\tNodeConnectionTypes,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype ISupplyDataFunctions,\n\ttype SupplyData,\n} from 'n8n-workflow';\n\nimport { logWrapper } from '@utils/logWrapper';\nimport { getConnectionHintNoticeField } from '@utils/sharedFields';\n\nimport { ollamaDescription, ollamaModel } from '../../llms/LMOllama/description';\n\nexport class EmbeddingsOllama implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Embeddings Ollama',\n\t\tname: 'embeddingsOllama',\n\t\ticon: 'file:ollama.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Use Ollama Embeddings',\n\t\tdefaults: {\n\t\t\tname: 'Embeddings Ollama',\n\t\t},\n\t\t...ollamaDescription,\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Embeddings'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.embeddingsollama/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [],\n\n\t\toutputs: [NodeConnectionTypes.AiEmbedding],\n\t\toutputNames: ['Embeddings'],\n\t\tproperties: [getConnectionHintNoticeField([NodeConnectionTypes.AiVectorStore]), ollamaModel],\n\t};\n\n\tasync supplyData(this: ISupplyDataFunctions, itemIndex: number): Promise<SupplyData> {\n\t\tthis.logger.debug('Supply data for embeddings Ollama');\n\t\tconst modelName = this.getNodeParameter('model', itemIndex) as string;\n\t\tconst credentials = await this.getCredentials('ollamaApi');\n\t\tconst headers = credentials.apiKey\n\t\t\t? {\n\t\t\t\t\tAuthorization: `Bearer ${credentials.apiKey as string}`,\n\t\t\t\t}\n\t\t\t: undefined;\n\n\t\tconst embeddings = new OllamaEmbeddings({\n\t\t\tbaseUrl: credentials.baseUrl as string,\n\t\t\tmodel: modelName,\n\t\t\theaders,\n\t\t});\n\n\t\treturn {\n\t\t\tresponse: logWrapper(embeddings, this),\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAiC;AACjC,0BAMO;AAEP,wBAA2B;AAC3B,0BAA6C;AAE7C,yBAA+C;AAExC,MAAM,iBAAsC;AAAA,EAA5C;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,GAAG;AAAA,MACH,OAAO;AAAA,QACN,YAAY,CAAC,IAAI;AAAA,QACjB,eAAe;AAAA,UACd,IAAI,CAAC,YAAY;AAAA,QAClB;AAAA,QACA,WAAW;AAAA,UACV,sBAAsB;AAAA,YACrB;AAAA,cACC,KAAK;AAAA,YACN;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MAEA,QAAQ,CAAC;AAAA,MAET,SAAS,CAAC,wCAAoB,WAAW;AAAA,MACzC,aAAa,CAAC,YAAY;AAAA,MAC1B,YAAY,KAAC,kDAA6B,CAAC,wCAAoB,aAAa,CAAC,GAAG,8BAAW;AAAA,IAC5F;AAAA;AAAA,EAEA,MAAM,WAAuC,WAAwC;AACpF,SAAK,OAAO,MAAM,mCAAmC;AACrD,UAAM,YAAY,KAAK,iBAAiB,SAAS,SAAS;AAC1D,UAAM,cAAc,MAAM,KAAK,eAAe,WAAW;AACzD,UAAM,UAAU,YAAY,SACzB;AAAA,MACA,eAAe,UAAU,YAAY,MAAgB;AAAA,IACtD,IACC;AAEH,UAAM,aAAa,IAAI,+BAAiB;AAAA,MACvC,SAAS,YAAY;AAAA,MACrB,OAAO;AAAA,MACP;AAAA,IACD,CAAC;AAED,WAAO;AAAA,MACN,cAAU,8BAAW,YAAY,IAAI;AAAA,IACtC;AAAA,EACD;AACD;","names":[]}