{"version":3,"sources":["../../../../../../nodes/agents/Agent/agents/ReActAgent/execute.ts"],"sourcesContent":["import type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport type { BaseChatModel } from '@langchain/core/language_models/chat_models';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport { AgentExecutor, ChatAgent, ZeroShotAgent } from 'langchain/agents';\nimport {\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\tNodeConnectionTypes,\n\tNodeOperationError,\n} from 'n8n-workflow';\n\nimport { getConnectedTools, getPromptInputByType, isChatInstance } from '@utils/helpers';\nimport { getOptionalOutputParser } from '@utils/output_parsers/N8nOutputParser';\nimport { throwIfToolSchema } from '@utils/schemaParsing';\nimport { getTracingConfig } from '@utils/tracing';\n\nimport { checkForStructuredTools, extractParsedOutput } from '../utils';\n\nexport async function reActAgentAgentExecute(\n\tthis: IExecuteFunctions,\n\tnodeVersion: number,\n): Promise<INodeExecutionData[][]> {\n\tthis.logger.debug('Executing ReAct Agent');\n\n\tconst model = (await this.getInputConnectionData(NodeConnectionTypes.AiLanguageModel, 0)) as\n\t\t| BaseLanguageModel\n\t\t| BaseChatModel;\n\n\tconst tools = await getConnectedTools(this, nodeVersion >= 1.5, true, true);\n\n\tawait checkForStructuredTools(tools, this.getNode(), 'ReAct Agent');\n\n\tconst outputParser = await getOptionalOutputParser(this);\n\n\tconst options = this.getNodeParameter('options', 0, {}) as {\n\t\tprefix?: string;\n\t\tsuffix?: string;\n\t\tsuffixChat?: string;\n\t\tmaxIterations?: number;\n\t\thumanMessageTemplate?: string;\n\t\treturnIntermediateSteps?: boolean;\n\t};\n\tlet agent: ChatAgent | ZeroShotAgent;\n\n\tif (isChatInstance(model)) {\n\t\tagent = ChatAgent.fromLLMAndTools(model, tools, {\n\t\t\tprefix: options.prefix,\n\t\t\tsuffix: options.suffixChat,\n\t\t\thumanMessageTemplate: options.humanMessageTemplate,\n\t\t});\n\t} else {\n\t\tagent = ZeroShotAgent.fromLLMAndTools(model, tools, {\n\t\t\tprefix: options.prefix,\n\t\t\tsuffix: options.suffix,\n\t\t});\n\t}\n\n\tconst agentExecutor = AgentExecutor.fromAgentAndTools({\n\t\tagent,\n\t\ttools,\n\t\treturnIntermediateSteps: options?.returnIntermediateSteps === true,\n\t\tmaxIterations: options.maxIterations ?? 10,\n\t});\n\n\tconst returnData: INodeExecutionData[] = [];\n\n\tlet prompt: PromptTemplate | undefined;\n\tif (outputParser) {\n\t\tconst formatInstructions = outputParser.getFormatInstructions();\n\n\t\tprompt = new PromptTemplate({\n\t\t\ttemplate: '{input}\\n{formatInstructions}',\n\t\t\tinputVariables: ['input'],\n\t\t\tpartialVariables: { formatInstructions },\n\t\t});\n\t}\n\n\tconst items = this.getInputData();\n\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\ttry {\n\t\t\tlet input;\n\n\t\t\tif (this.getNode().typeVersion <= 1.2) {\n\t\t\t\tinput = this.getNodeParameter('text', itemIndex) as string;\n\t\t\t} else {\n\t\t\t\tinput = getPromptInputByType({\n\t\t\t\t\tctx: this,\n\t\t\t\t\ti: itemIndex,\n\t\t\t\t\tinputKey: 'text',\n\t\t\t\t\tpromptTypeKey: 'promptType',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (input === undefined) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'The ‘text‘ parameter is empty.');\n\t\t\t}\n\n\t\t\tif (prompt) {\n\t\t\t\tinput = (await prompt.invoke({ input })).value;\n\t\t\t}\n\n\t\t\tconst response = await agentExecutor\n\t\t\t\t.withConfig(getTracingConfig(this))\n\t\t\t\t.invoke({ input, outputParser });\n\n\t\t\tif (outputParser) {\n\t\t\t\tresponse.output = await extractParsedOutput(this, outputParser, response.output as string);\n\t\t\t}\n\n\t\t\treturnData.push({ json: response });\n\t\t} catch (error) {\n\t\t\tthrowIfToolSchema(this, error);\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({ json: { error: error.message }, pairedItem: { item: itemIndex } });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,qBAA+B;AAC/B,oBAAwD;AACxD,0BAKO;AAEP,qBAAwE;AACxE,6BAAwC;AACxC,2BAAkC;AAClC,qBAAiC;AAEjC,mBAA6D;AAE7D,eAAsB,uBAErB,aACkC;AAClC,OAAK,OAAO,MAAM,uBAAuB;AAEzC,QAAM,QAAS,MAAM,KAAK,uBAAuB,wCAAoB,iBAAiB,CAAC;AAIvF,QAAM,QAAQ,UAAM,kCAAkB,MAAM,eAAe,KAAK,MAAM,IAAI;AAE1E,YAAM,sCAAwB,OAAO,KAAK,QAAQ,GAAG,aAAa;AAElE,QAAM,eAAe,UAAM,gDAAwB,IAAI;AAEvD,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AAQtD,MAAI;AAEJ,UAAI,+BAAe,KAAK,GAAG;AAC1B,YAAQ,wBAAU,gBAAgB,OAAO,OAAO;AAAA,MAC/C,QAAQ,QAAQ;AAAA,MAChB,QAAQ,QAAQ;AAAA,MAChB,sBAAsB,QAAQ;AAAA,IAC/B,CAAC;AAAA,EACF,OAAO;AACN,YAAQ,4BAAc,gBAAgB,OAAO,OAAO;AAAA,MACnD,QAAQ,QAAQ;AAAA,MAChB,QAAQ,QAAQ;AAAA,IACjB,CAAC;AAAA,EACF;AAEA,QAAM,gBAAgB,4BAAc,kBAAkB;AAAA,IACrD;AAAA,IACA;AAAA,IACA,yBAAyB,SAAS,4BAA4B;AAAA,IAC9D,eAAe,QAAQ,iBAAiB;AAAA,EACzC,CAAC;AAED,QAAM,aAAmC,CAAC;AAE1C,MAAI;AACJ,MAAI,cAAc;AACjB,UAAM,qBAAqB,aAAa,sBAAsB;AAE9D,aAAS,IAAI,8BAAe;AAAA,MAC3B,UAAU;AAAA,MACV,gBAAgB,CAAC,OAAO;AAAA,MACxB,kBAAkB,EAAE,mBAAmB;AAAA,IACxC,CAAC;AAAA,EACF;AAEA,QAAM,QAAQ,KAAK,aAAa;AAChC,WAAS,YAAY,GAAG,YAAY,MAAM,QAAQ,aAAa;AAC9D,QAAI;AACH,UAAI;AAEJ,UAAI,KAAK,QAAQ,EAAE,eAAe,KAAK;AACtC,gBAAQ,KAAK,iBAAiB,QAAQ,SAAS;AAAA,MAChD,OAAO;AACN,oBAAQ,qCAAqB;AAAA,UAC5B,KAAK;AAAA,UACL,GAAG;AAAA,UACH,UAAU;AAAA,UACV,eAAe;AAAA,QAChB,CAAC;AAAA,MACF;AAEA,UAAI,UAAU,QAAW;AACxB,cAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,0CAAgC;AAAA,MAC9E;AAEA,UAAI,QAAQ;AACX,iBAAS,MAAM,OAAO,OAAO,EAAE,MAAM,CAAC,GAAG;AAAA,MAC1C;AAEA,YAAM,WAAW,MAAM,cACrB,eAAW,iCAAiB,IAAI,CAAC,EACjC,OAAO,EAAE,OAAO,aAAa,CAAC;AAEhC,UAAI,cAAc;AACjB,iBAAS,SAAS,UAAM,kCAAoB,MAAM,cAAc,SAAS,MAAgB;AAAA,MAC1F;AAEA,iBAAW,KAAK,EAAE,MAAM,SAAS,CAAC;AAAA,IACnC,SAAS,OAAO;AACf,kDAAkB,MAAM,KAAK;AAC7B,UAAI,KAAK,eAAe,GAAG;AAC1B,mBAAW,KAAK,EAAE,MAAM,EAAE,OAAO,MAAM,QAAQ,GAAG,YAAY,EAAE,MAAM,UAAU,EAAE,CAAC;AACnF;AAAA,MACD;AAEA,YAAM;AAAA,IACP;AAAA,EACD;AAEA,SAAO,CAAC,UAAU;AACnB;","names":[]}