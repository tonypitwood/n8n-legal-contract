{"version":3,"sources":["../../../../../../nodes/agents/Agent/agents/SqlAgent/execute.ts"],"sourcesContent":["import type { BaseChatMemory } from '@langchain/community/memory/chat_memory';\nimport type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport type { DataSource } from '@n8n/typeorm';\nimport type { SqlCreatePromptArgs } from 'langchain/agents/toolkits/sql';\nimport { SqlToolkit, createSqlAgent } from 'langchain/agents/toolkits/sql';\nimport { SqlDatabase } from 'langchain/sql_db';\nimport {\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\tNodeConnectionTypes,\n\tNodeOperationError,\n\ttype IDataObject,\n} from 'n8n-workflow';\n\nimport { getPromptInputByType, serializeChatHistory } from '@utils/helpers';\nimport { getTracingConfig } from '@utils/tracing';\n\nimport { getMysqlDataSource } from './other/handlers/mysql';\nimport { getPostgresDataSource } from './other/handlers/postgres';\nimport { getSqliteDataSource } from './other/handlers/sqlite';\nimport { SQL_PREFIX, SQL_SUFFIX } from './other/prompts';\n\nconst parseTablesString = (tablesString: string) =>\n\ttablesString\n\t\t.split(',')\n\t\t.map((table) => table.trim())\n\t\t.filter((table) => table.length > 0);\n\nexport async function sqlAgentAgentExecute(\n\tthis: IExecuteFunctions,\n): Promise<INodeExecutionData[][]> {\n\tthis.logger.debug('Executing SQL Agent');\n\n\tconst model = (await this.getInputConnectionData(\n\t\tNodeConnectionTypes.AiLanguageModel,\n\t\t0,\n\t)) as BaseLanguageModel;\n\tconst items = this.getInputData();\n\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\ttry {\n\t\t\tconst item = items[i];\n\t\t\tlet input;\n\t\t\tif (this.getNode().typeVersion <= 1.2) {\n\t\t\t\tinput = this.getNodeParameter('input', i) as string;\n\t\t\t} else {\n\t\t\t\tinput = getPromptInputByType({\n\t\t\t\t\tctx: this,\n\t\t\t\t\ti,\n\t\t\t\t\tinputKey: 'text',\n\t\t\t\t\tpromptTypeKey: 'promptType',\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (input === undefined) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), 'The ‘prompt’ parameter is empty.');\n\t\t\t}\n\n\t\t\tconst options = this.getNodeParameter('options', i, {});\n\t\t\tconst selectedDataSource = this.getNodeParameter('dataSource', i, 'sqlite') as\n\t\t\t\t| 'mysql'\n\t\t\t\t| 'postgres'\n\t\t\t\t| 'sqlite';\n\n\t\t\tconst includedSampleRows = options.includedSampleRows as number;\n\t\t\tconst includedTablesArray = parseTablesString((options.includedTables as string) ?? '');\n\t\t\tconst ignoredTablesArray = parseTablesString((options.ignoredTables as string) ?? '');\n\n\t\t\tlet dataSource: DataSource | null = null;\n\t\t\tif (selectedDataSource === 'sqlite') {\n\t\t\t\tif (!item.binary) {\n\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t\t'No binary data found, please connect a binary to the input if you want to use SQLite as data source',\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\t\t\tdataSource = await getSqliteDataSource.call(this, item.binary, binaryPropertyName);\n\t\t\t}\n\n\t\t\tif (selectedDataSource === 'postgres') {\n\t\t\t\tdataSource = await getPostgresDataSource.call(this);\n\t\t\t}\n\n\t\t\tif (selectedDataSource === 'mysql') {\n\t\t\t\tdataSource = await getMysqlDataSource.call(this);\n\t\t\t}\n\n\t\t\tif (!dataSource) {\n\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\tthis.getNode(),\n\t\t\t\t\t'No data source found, please configure data source',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst agentOptions: SqlCreatePromptArgs = {\n\t\t\t\ttopK: (options.topK as number) ?? 10,\n\t\t\t\tprefix: (options.prefixPrompt as string) ?? SQL_PREFIX,\n\t\t\t\tsuffix: (options.suffixPrompt as string) ?? SQL_SUFFIX,\n\t\t\t\tinputVariables: ['chatHistory', 'input', 'agent_scratchpad'],\n\t\t\t};\n\n\t\t\tconst dbInstance = await SqlDatabase.fromDataSourceParams({\n\t\t\t\tappDataSource: dataSource,\n\t\t\t\tincludesTables: includedTablesArray.length > 0 ? includedTablesArray : undefined,\n\t\t\t\tignoreTables: ignoredTablesArray.length > 0 ? ignoredTablesArray : undefined,\n\t\t\t\tsampleRowsInTableInfo: includedSampleRows ?? 3,\n\t\t\t});\n\n\t\t\tconst toolkit = new SqlToolkit(dbInstance, model);\n\t\t\tconst agentExecutor = createSqlAgent(model, toolkit, agentOptions);\n\n\t\t\tconst memory = (await this.getInputConnectionData(NodeConnectionTypes.AiMemory, 0)) as\n\t\t\t\t| BaseChatMemory\n\t\t\t\t| undefined;\n\n\t\t\tagentExecutor.memory = memory;\n\n\t\t\tlet chatHistory = '';\n\t\t\tif (memory) {\n\t\t\t\tconst messages = await memory.chatHistory.getMessages();\n\t\t\t\tchatHistory = serializeChatHistory(messages);\n\t\t\t}\n\n\t\t\tlet response: IDataObject;\n\t\t\ttry {\n\t\t\t\tresponse = await agentExecutor.withConfig(getTracingConfig(this)).invoke({\n\t\t\t\t\tinput,\n\t\t\t\t\tsignal: this.getExecutionCancelSignal(),\n\t\t\t\t\tchatHistory,\n\t\t\t\t});\n\t\t\t} catch (error) {\n\t\t\t\tif ((error.message as IDataObject)?.output) {\n\t\t\t\t\tresponse = error.message as IDataObject;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error.message as string, { itemIndex: i });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturnData.push({ json: response });\n\t\t} catch (error) {\n\t\t\tif (this.continueOnFail()) {\n\t\t\t\treturnData.push({ json: { error: error.message }, pairedItem: { item: i } });\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\treturn [returnData];\n}\n"],"mappings":"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","names":[]}