{"version":3,"sources":["../../../../../../../../nodes/agents/Agent/agents/SqlAgent/other/handlers/sqlite.ts"],"sourcesContent":["import { DataSource } from '@n8n/typeorm';\nimport * as fs from 'fs';\nimport type { IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\nimport { BINARY_ENCODING, NodeOperationError } from 'n8n-workflow';\nimport * as sqlite3 from 'sqlite3';\nimport * as temp from 'temp';\n\nexport async function getSqliteDataSource(\n\tthis: IExecuteFunctions,\n\tbinary: INodeExecutionData['binary'],\n\tbinaryPropertyName = 'data',\n): Promise<DataSource> {\n\tconst binaryData = binary?.[binaryPropertyName];\n\n\tif (!binaryData) {\n\t\tthrow new NodeOperationError(this.getNode(), 'No binary data received.');\n\t}\n\n\tlet fileBase64;\n\tif (binaryData.id) {\n\t\tconst chunkSize = 256 * 1024;\n\t\tconst stream = await this.helpers.getBinaryStream(binaryData.id, chunkSize);\n\t\tconst buffer = await this.helpers.binaryToBuffer(stream);\n\t\tfileBase64 = buffer.toString('base64');\n\t} else {\n\t\tfileBase64 = binaryData.data;\n\t}\n\n\tconst bufferString = Buffer.from(fileBase64, BINARY_ENCODING);\n\n\t// Track and cleanup temp files at exit\n\ttemp.track();\n\n\tconst tempDbPath = temp.path({ suffix: '.sqlite' });\n\tfs.writeFileSync(tempDbPath, bufferString);\n\n\t// Initialize a new SQLite database from the temp file\n\tconst tempDb = new sqlite3.Database(tempDbPath, (error: Error | null) => {\n\t\tif (error) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Could not connect to database');\n\t\t}\n\t});\n\ttempDb.close();\n\n\treturn new DataSource({\n\t\ttype: 'sqlite',\n\t\tdatabase: tempDbPath,\n\t});\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA2B;AAC3B,SAAoB;AAEpB,0BAAoD;AACpD,cAAyB;AACzB,WAAsB;AAEtB,eAAsB,oBAErB,QACA,qBAAqB,QACC;AACtB,QAAM,aAAa,SAAS,kBAAkB;AAE9C,MAAI,CAAC,YAAY;AAChB,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,0BAA0B;AAAA,EACxE;AAEA,MAAI;AACJ,MAAI,WAAW,IAAI;AAClB,UAAM,YAAY,MAAM;AACxB,UAAM,SAAS,MAAM,KAAK,QAAQ,gBAAgB,WAAW,IAAI,SAAS;AAC1E,UAAM,SAAS,MAAM,KAAK,QAAQ,eAAe,MAAM;AACvD,iBAAa,OAAO,SAAS,QAAQ;AAAA,EACtC,OAAO;AACN,iBAAa,WAAW;AAAA,EACzB;AAEA,QAAM,eAAe,OAAO,KAAK,YAAY,mCAAe;AAG5D,OAAK,MAAM;AAEX,QAAM,aAAa,KAAK,KAAK,EAAE,QAAQ,UAAU,CAAC;AAClD,KAAG,cAAc,YAAY,YAAY;AAGzC,QAAM,SAAS,IAAI,QAAQ,SAAS,YAAY,CAAC,UAAwB;AACxE,QAAI,OAAO;AACV,YAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,+BAA+B;AAAA,IAC7E;AAAA,EACD,CAAC;AACD,SAAO,MAAM;AAEb,SAAO,IAAI,0BAAW;AAAA,IACrB,MAAM;AAAA,IACN,UAAU;AAAA,EACX,CAAC;AACF;","names":[]}