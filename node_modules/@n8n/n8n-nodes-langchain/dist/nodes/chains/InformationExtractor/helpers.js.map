{"version":3,"sources":["../../../../nodes/chains/InformationExtractor/helpers.ts"],"sourcesContent":["import { z } from 'zod';\n\nimport type { AttributeDefinition } from './types';\n\nfunction makeAttributeSchema(attributeDefinition: AttributeDefinition, required: boolean = true) {\n\tlet schema: z.ZodTypeAny;\n\n\tif (attributeDefinition.type === 'string') {\n\t\tschema = z.string();\n\t} else if (attributeDefinition.type === 'number') {\n\t\tschema = z.number();\n\t} else if (attributeDefinition.type === 'boolean') {\n\t\tschema = z.boolean();\n\t} else if (attributeDefinition.type === 'date') {\n\t\tschema = z.string().date();\n\t} else {\n\t\tschema = z.unknown();\n\t}\n\n\tif (!required) {\n\t\tschema = schema.optional();\n\t}\n\n\treturn schema.describe(attributeDefinition.description);\n}\n\nexport function makeZodSchemaFromAttributes(attributes: AttributeDefinition[]) {\n\tconst schemaEntries = attributes.map((attr) => [\n\t\tattr.name,\n\t\tmakeAttributeSchema(attr, attr.required),\n\t]);\n\n\treturn z.object(Object.fromEntries(schemaEntries));\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkB;AAIlB,SAAS,oBAAoB,qBAA0C,WAAoB,MAAM;AAChG,MAAI;AAEJ,MAAI,oBAAoB,SAAS,UAAU;AAC1C,aAAS,aAAE,OAAO;AAAA,EACnB,WAAW,oBAAoB,SAAS,UAAU;AACjD,aAAS,aAAE,OAAO;AAAA,EACnB,WAAW,oBAAoB,SAAS,WAAW;AAClD,aAAS,aAAE,QAAQ;AAAA,EACpB,WAAW,oBAAoB,SAAS,QAAQ;AAC/C,aAAS,aAAE,OAAO,EAAE,KAAK;AAAA,EAC1B,OAAO;AACN,aAAS,aAAE,QAAQ;AAAA,EACpB;AAEA,MAAI,CAAC,UAAU;AACd,aAAS,OAAO,SAAS;AAAA,EAC1B;AAEA,SAAO,OAAO,SAAS,oBAAoB,WAAW;AACvD;AAEO,SAAS,4BAA4B,YAAmC;AAC9E,QAAM,gBAAgB,WAAW,IAAI,CAAC,SAAS;AAAA,IAC9C,KAAK;AAAA,IACL,oBAAoB,MAAM,KAAK,QAAQ;AAAA,EACxC,CAAC;AAED,SAAO,aAAE,OAAO,OAAO,YAAY,aAAa,CAAC;AAClD;","names":[]}