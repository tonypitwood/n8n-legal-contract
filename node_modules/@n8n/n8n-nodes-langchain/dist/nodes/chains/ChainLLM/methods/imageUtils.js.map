{"version":3,"sources":["../../../../../nodes/chains/ChainLLM/methods/imageUtils.ts"],"sourcesContent":["import type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport { HumanMessage } from '@langchain/core/messages';\nimport { ChatGoogleGenerativeAI } from '@langchain/google-genai';\nimport { ChatOllama } from '@langchain/ollama';\nimport type { IExecuteFunctions, IBinaryData } from 'n8n-workflow';\nimport { NodeOperationError, NodeConnectionTypes, OperationalError } from 'n8n-workflow';\n\nimport type { MessageTemplate } from './types';\n\nexport class UnsupportedMimeTypeError extends OperationalError {}\n\n/**\n * Converts binary image data to a data URI\n */\nexport function dataUriFromImageData(binaryData: IBinaryData, bufferData: Buffer): string {\n\tif (!binaryData.mimeType?.startsWith('image/')) {\n\t\tthrow new UnsupportedMimeTypeError(\n\t\t\t`${binaryData.mimeType} is not a supported type of binary data. Only images are supported.`,\n\t\t);\n\t}\n\treturn `data:${binaryData.mimeType};base64,${bufferData.toString('base64')}`;\n}\n\n/**\n * Creates a human message with image content from either binary data or URL\n */\nexport async function createImageMessage({\n\tcontext,\n\titemIndex,\n\tmessage,\n}: {\n\tcontext: IExecuteFunctions;\n\titemIndex: number;\n\tmessage: MessageTemplate;\n}): Promise<HumanMessage> {\n\t// Validate message type\n\tif (message.messageType !== 'imageBinary' && message.messageType !== 'imageUrl') {\n\t\tthrow new NodeOperationError(\n\t\t\tcontext.getNode(),\n\t\t\t'Invalid message type. Only imageBinary and imageUrl are supported',\n\t\t);\n\t}\n\n\tconst detail = message.imageDetail === 'auto' ? undefined : message.imageDetail;\n\n\t// Handle image URL case\n\tif (message.messageType === 'imageUrl' && message.imageUrl) {\n\t\treturn new HumanMessage({\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'image_url',\n\t\t\t\t\timage_url: {\n\t\t\t\t\t\turl: message.imageUrl,\n\t\t\t\t\t\tdetail,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t// Handle binary image case\n\tconst binaryDataKey = message.binaryImageDataKey ?? 'data';\n\tconst inputData = context.getInputData()[itemIndex];\n\tconst binaryData = inputData.binary?.[binaryDataKey] as IBinaryData;\n\n\tif (!binaryData) {\n\t\tthrow new NodeOperationError(context.getNode(), 'No binary data set.');\n\t}\n\n\tconst bufferData = await context.helpers.getBinaryDataBuffer(itemIndex, binaryDataKey);\n\tconst model = (await context.getInputConnectionData(\n\t\tNodeConnectionTypes.AiLanguageModel,\n\t\t0,\n\t)) as BaseLanguageModel;\n\n\ttry {\n\t\t// Create data URI from binary data\n\t\tconst dataURI = dataUriFromImageData(binaryData, bufferData);\n\n\t\t// Some models need different image URL formats\n\t\tconst directUriModels = [ChatGoogleGenerativeAI, ChatOllama];\n\t\tconst imageUrl = directUriModels.some((i) => model instanceof i)\n\t\t\t? dataURI\n\t\t\t: { url: dataURI, detail };\n\n\t\treturn new HumanMessage({\n\t\t\tcontent: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'image_url',\n\t\t\t\t\timage_url: imageUrl,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t} catch (error) {\n\t\tif (error instanceof UnsupportedMimeTypeError)\n\t\t\tthrow new NodeOperationError(context.getNode(), error.message);\n\t\tthrow error;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAA6B;AAC7B,0BAAuC;AACvC,oBAA2B;AAE3B,0BAA0E;AAInE,MAAM,iCAAiC,qCAAiB;AAAC;AAKzD,SAAS,qBAAqB,YAAyB,YAA4B;AACzF,MAAI,CAAC,WAAW,UAAU,WAAW,QAAQ,GAAG;AAC/C,UAAM,IAAI;AAAA,MACT,GAAG,WAAW,QAAQ;AAAA,IACvB;AAAA,EACD;AACA,SAAO,QAAQ,WAAW,QAAQ,WAAW,WAAW,SAAS,QAAQ,CAAC;AAC3E;AAKA,eAAsB,mBAAmB;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AACD,GAI0B;AAEzB,MAAI,QAAQ,gBAAgB,iBAAiB,QAAQ,gBAAgB,YAAY;AAChF,UAAM,IAAI;AAAA,MACT,QAAQ,QAAQ;AAAA,MAChB;AAAA,IACD;AAAA,EACD;AAEA,QAAM,SAAS,QAAQ,gBAAgB,SAAS,SAAY,QAAQ;AAGpE,MAAI,QAAQ,gBAAgB,cAAc,QAAQ,UAAU;AAC3D,WAAO,IAAI,6BAAa;AAAA,MACvB,SAAS;AAAA,QACR;AAAA,UACC,MAAM;AAAA,UACN,WAAW;AAAA,YACV,KAAK,QAAQ;AAAA,YACb;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF;AAGA,QAAM,gBAAgB,QAAQ,sBAAsB;AACpD,QAAM,YAAY,QAAQ,aAAa,EAAE,SAAS;AAClD,QAAM,aAAa,UAAU,SAAS,aAAa;AAEnD,MAAI,CAAC,YAAY;AAChB,UAAM,IAAI,uCAAmB,QAAQ,QAAQ,GAAG,qBAAqB;AAAA,EACtE;AAEA,QAAM,aAAa,MAAM,QAAQ,QAAQ,oBAAoB,WAAW,aAAa;AACrF,QAAM,QAAS,MAAM,QAAQ;AAAA,IAC5B,wCAAoB;AAAA,IACpB;AAAA,EACD;AAEA,MAAI;AAEH,UAAM,UAAU,qBAAqB,YAAY,UAAU;AAG3D,UAAM,kBAAkB,CAAC,4CAAwB,wBAAU;AAC3D,UAAM,WAAW,gBAAgB,KAAK,CAAC,MAAM,iBAAiB,CAAC,IAC5D,UACA,EAAE,KAAK,SAAS,OAAO;AAE1B,WAAO,IAAI,6BAAa;AAAA,MACvB,SAAS;AAAA,QACR;AAAA,UACC,MAAM;AAAA,UACN,WAAW;AAAA,QACZ;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF,SAAS,OAAO;AACf,QAAI,iBAAiB;AACpB,YAAM,IAAI,uCAAmB,QAAQ,QAAQ,GAAG,MAAM,OAAO;AAC9D,UAAM;AAAA,EACP;AACD;","names":[]}