{"version":3,"sources":["../../../../../nodes/chains/ChainSummarization/V1/ChainSummarizationV1.node.ts"],"sourcesContent":["import type { Document } from '@langchain/core/documents';\nimport type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport { PromptTemplate } from '@langchain/core/prompts';\nimport type { SummarizationChainParams } from 'langchain/chains';\nimport { loadSummarizationChain } from 'langchain/chains';\nimport {\n\tNodeConnectionTypes,\n\ttype INodeTypeBaseDescription,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nimport { N8nBinaryLoader } from '@utils/N8nBinaryLoader';\nimport { N8nJsonLoader } from '@utils/N8nJsonLoader';\nimport { getTemplateNoticeField } from '@utils/sharedFields';\n\nimport { REFINE_PROMPT_TEMPLATE, DEFAULT_PROMPT_TEMPLATE } from '../prompt';\n\nexport class ChainSummarizationV1 implements INodeType {\n\tdescription: INodeTypeDescription;\n\n\tconstructor(baseDescription: INodeTypeBaseDescription) {\n\t\tthis.description = {\n\t\t\t...baseDescription,\n\t\t\tversion: 1,\n\t\t\tdefaults: {\n\t\t\t\tname: 'Summarization Chain',\n\t\t\t\tcolor: '#909298',\n\t\t\t},\n\n\t\t\tinputs: [\n\t\t\t\tNodeConnectionTypes.Main,\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Model',\n\t\t\t\t\tmaxConnections: 1,\n\t\t\t\t\ttype: NodeConnectionTypes.AiLanguageModel,\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Document',\n\t\t\t\t\tmaxConnections: 1,\n\t\t\t\t\ttype: NodeConnectionTypes.AiDocument,\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t],\n\t\t\toutputs: [NodeConnectionTypes.Main],\n\t\t\tcredentials: [],\n\t\t\tproperties: [\n\t\t\t\tgetTemplateNoticeField(1951),\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Type',\n\t\t\t\t\tname: 'type',\n\t\t\t\t\ttype: 'options',\n\t\t\t\t\tdescription: 'The type of summarization to run',\n\t\t\t\t\tdefault: 'map_reduce',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Map Reduce (Recommended)',\n\t\t\t\t\t\t\tvalue: 'map_reduce',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Summarize each document (or chunk) individually, then summarize those summaries',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Refine',\n\t\t\t\t\t\t\tvalue: 'refine',\n\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t'Summarize the first document (or chunk). Then update that summary based on the next document (or chunk), and repeat.',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: 'Stuff',\n\t\t\t\t\t\t\tvalue: 'stuff',\n\t\t\t\t\t\t\tdescription: 'Pass all documents (or chunks) at once. Ideal for small datasets.',\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Options',\n\t\t\t\t\tname: 'options',\n\t\t\t\t\ttype: 'collection',\n\t\t\t\t\tdefault: {},\n\t\t\t\t\tplaceholder: 'Add Option',\n\t\t\t\t\toptions: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Final Prompt to Combine',\n\t\t\t\t\t\t\tname: 'combineMapPrompt',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\thint: 'The prompt to combine individual summaries',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/type': ['map_reduce'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: DEFAULT_PROMPT_TEMPLATE,\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\trows: 6,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Individual Summary Prompt',\n\t\t\t\t\t\t\tname: 'prompt',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdefault: DEFAULT_PROMPT_TEMPLATE,\n\t\t\t\t\t\t\thint: 'The prompt to summarize an individual document (or chunk)',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/type': ['map_reduce'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\trows: 6,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Prompt',\n\t\t\t\t\t\t\tname: 'prompt',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdefault: DEFAULT_PROMPT_TEMPLATE,\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/type': ['stuff'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\trows: 6,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Subsequent (Refine) Prompt',\n\t\t\t\t\t\t\tname: 'refinePrompt',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/type': ['refine'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: REFINE_PROMPT_TEMPLATE,\n\t\t\t\t\t\t\thint: 'The prompt to refine the summary based on the next document (or chunk)',\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\trows: 6,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdisplayName: 'Initial Prompt',\n\t\t\t\t\t\t\tname: 'refineQuestionPrompt',\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t'/type': ['refine'],\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdefault: DEFAULT_PROMPT_TEMPLATE,\n\t\t\t\t\t\t\thint: 'The prompt for the first document (or chunk)',\n\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\trows: 6,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tthis.logger.debug('Executing Vector Store QA Chain');\n\t\tconst type = this.getNodeParameter('type', 0) as 'map_reduce' | 'stuff' | 'refine';\n\n\t\tconst model = (await this.getInputConnectionData(\n\t\t\tNodeConnectionTypes.AiLanguageModel,\n\t\t\t0,\n\t\t)) as BaseLanguageModel;\n\n\t\tconst documentInput = (await this.getInputConnectionData(NodeConnectionTypes.AiDocument, 0)) as\n\t\t\t| N8nJsonLoader\n\t\t\t| Array<Document<Record<string, unknown>>>;\n\n\t\tconst options = this.getNodeParameter('options', 0, {}) as {\n\t\t\tprompt?: string;\n\t\t\trefineQuestionPrompt?: string;\n\t\t\trefinePrompt?: string;\n\t\t\tcombineMapPrompt?: string;\n\t\t};\n\n\t\tconst chainArgs: SummarizationChainParams = {\n\t\t\ttype,\n\t\t};\n\n\t\t// Map reduce prompt override\n\t\tif (type === 'map_reduce') {\n\t\t\tconst mapReduceArgs = chainArgs as SummarizationChainParams & {\n\t\t\t\ttype: 'map_reduce';\n\t\t\t};\n\t\t\tif (options.combineMapPrompt) {\n\t\t\t\tmapReduceArgs.combineMapPrompt = new PromptTemplate({\n\t\t\t\t\ttemplate: options.combineMapPrompt,\n\t\t\t\t\tinputVariables: ['text'],\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (options.prompt) {\n\t\t\t\tmapReduceArgs.combinePrompt = new PromptTemplate({\n\t\t\t\t\ttemplate: options.prompt,\n\t\t\t\t\tinputVariables: ['text'],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Stuff prompt override\n\t\tif (type === 'stuff') {\n\t\t\tconst stuffArgs = chainArgs as SummarizationChainParams & {\n\t\t\t\ttype: 'stuff';\n\t\t\t};\n\t\t\tif (options.prompt) {\n\t\t\t\tstuffArgs.prompt = new PromptTemplate({\n\t\t\t\t\ttemplate: options.prompt,\n\t\t\t\t\tinputVariables: ['text'],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Refine prompt override\n\t\tif (type === 'refine') {\n\t\t\tconst refineArgs = chainArgs as SummarizationChainParams & {\n\t\t\t\ttype: 'refine';\n\t\t\t};\n\n\t\t\tif (options.refinePrompt) {\n\t\t\t\trefineArgs.refinePrompt = new PromptTemplate({\n\t\t\t\t\ttemplate: options.refinePrompt,\n\t\t\t\t\tinputVariables: ['existing_answer', 'text'],\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.refineQuestionPrompt) {\n\t\t\t\trefineArgs.questionPrompt = new PromptTemplate({\n\t\t\t\t\ttemplate: options.refineQuestionPrompt,\n\t\t\t\t\tinputVariables: ['text'],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst chain = loadSummarizationChain(model, chainArgs);\n\n\t\tconst items = this.getInputData();\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tfor (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n\t\t\tlet processedDocuments: Document[];\n\t\t\tif (documentInput instanceof N8nJsonLoader || documentInput instanceof N8nBinaryLoader) {\n\t\t\t\tprocessedDocuments = await documentInput.processItem(items[itemIndex], itemIndex);\n\t\t\t} else {\n\t\t\t\tprocessedDocuments = documentInput;\n\t\t\t}\n\n\t\t\tconst response = await chain.call({\n\t\t\t\tinput_documents: processedDocuments,\n\t\t\t});\n\n\t\t\treturnData.push({ json: { response } });\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":[]}