{"version":3,"sources":["../../../../nodes/chains/ChainRetrievalQA/processItem.ts"],"sourcesContent":["import type { BaseLanguageModel } from '@langchain/core/language_models/base';\nimport {\n\tChatPromptTemplate,\n\tHumanMessagePromptTemplate,\n\tPromptTemplate,\n\tSystemMessagePromptTemplate,\n} from '@langchain/core/prompts';\nimport type { BaseRetriever } from '@langchain/core/retrievers';\nimport { createStuffDocumentsChain } from 'langchain/chains/combine_documents';\nimport { createRetrievalChain } from 'langchain/chains/retrieval';\nimport { type IExecuteFunctions, NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\n\nimport { getPromptInputByType, isChatInstance } from '@utils/helpers';\nimport { getTracingConfig } from '@utils/tracing';\n\nimport { INPUT_TEMPLATE_KEY, LEGACY_INPUT_TEMPLATE_KEY, SYSTEM_PROMPT_TEMPLATE } from './constants';\n\nexport const processItem = async (\n\tctx: IExecuteFunctions,\n\titemIndex: number,\n): Promise<Record<string, unknown>> => {\n\tconst model = (await ctx.getInputConnectionData(\n\t\tNodeConnectionTypes.AiLanguageModel,\n\t\t0,\n\t)) as BaseLanguageModel;\n\n\tconst retriever = (await ctx.getInputConnectionData(\n\t\tNodeConnectionTypes.AiRetriever,\n\t\t0,\n\t)) as BaseRetriever;\n\n\tlet query;\n\n\tif (ctx.getNode().typeVersion <= 1.2) {\n\t\tquery = ctx.getNodeParameter('query', itemIndex) as string;\n\t} else {\n\t\tquery = getPromptInputByType({\n\t\t\tctx,\n\t\t\ti: itemIndex,\n\t\t\tinputKey: 'text',\n\t\t\tpromptTypeKey: 'promptType',\n\t\t});\n\t}\n\n\tif (query === undefined) {\n\t\tthrow new NodeOperationError(ctx.getNode(), 'The ‘query‘ parameter is empty.');\n\t}\n\n\tconst options = ctx.getNodeParameter('options', itemIndex, {}) as {\n\t\tsystemPromptTemplate?: string;\n\t};\n\n\tlet templateText = options.systemPromptTemplate ?? SYSTEM_PROMPT_TEMPLATE;\n\n\t// Replace legacy input template key for versions 1.4 and below\n\tif (ctx.getNode().typeVersion < 1.5) {\n\t\ttemplateText = templateText.replace(\n\t\t\t`{${LEGACY_INPUT_TEMPLATE_KEY}}`,\n\t\t\t`{${INPUT_TEMPLATE_KEY}}`,\n\t\t);\n\t}\n\n\t// Create prompt template based on model type and user configuration\n\tlet promptTemplate;\n\tif (isChatInstance(model)) {\n\t\t// For chat models, create a chat prompt template with system and human messages\n\t\tconst messages = [\n\t\t\tSystemMessagePromptTemplate.fromTemplate(templateText),\n\t\t\tHumanMessagePromptTemplate.fromTemplate('{input}'),\n\t\t];\n\t\tpromptTemplate = ChatPromptTemplate.fromMessages(messages);\n\t} else {\n\t\t// For non-chat models, create a text prompt template with Question/Answer format\n\t\tconst questionSuffix =\n\t\t\toptions.systemPromptTemplate === undefined ? '\\n\\nQuestion: {input}\\nAnswer:' : '';\n\n\t\tpromptTemplate = new PromptTemplate({\n\t\t\ttemplate: templateText + questionSuffix,\n\t\t\tinputVariables: ['context', 'input'],\n\t\t});\n\t}\n\n\t// Create the document chain that combines the retrieved documents\n\tconst combineDocsChain = await createStuffDocumentsChain({\n\t\tllm: model,\n\t\tprompt: promptTemplate,\n\t});\n\n\t// Create the retrieval chain that handles the retrieval and then passes to the combine docs chain\n\tconst retrievalChain = await createRetrievalChain({\n\t\tcombineDocsChain,\n\t\tretriever,\n\t});\n\n\t// Execute the chain with tracing config\n\tconst tracingConfig = getTracingConfig(ctx);\n\treturn await retrievalChain\n\t\t.withConfig(tracingConfig)\n\t\t.invoke({ input: query }, { signal: ctx.getExecutionCancelSignal() });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAKO;AAEP,+BAA0C;AAC1C,uBAAqC;AACrC,0BAAgF;AAEhF,qBAAqD;AACrD,qBAAiC;AAEjC,uBAAsF;AAE/E,MAAM,cAAc,OAC1B,KACA,cACsC;AACtC,QAAM,QAAS,MAAM,IAAI;AAAA,IACxB,wCAAoB;AAAA,IACpB;AAAA,EACD;AAEA,QAAM,YAAa,MAAM,IAAI;AAAA,IAC5B,wCAAoB;AAAA,IACpB;AAAA,EACD;AAEA,MAAI;AAEJ,MAAI,IAAI,QAAQ,EAAE,eAAe,KAAK;AACrC,YAAQ,IAAI,iBAAiB,SAAS,SAAS;AAAA,EAChD,OAAO;AACN,gBAAQ,qCAAqB;AAAA,MAC5B;AAAA,MACA,GAAG;AAAA,MACH,UAAU;AAAA,MACV,eAAe;AAAA,IAChB,CAAC;AAAA,EACF;AAEA,MAAI,UAAU,QAAW;AACxB,UAAM,IAAI,uCAAmB,IAAI,QAAQ,GAAG,2CAAiC;AAAA,EAC9E;AAEA,QAAM,UAAU,IAAI,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAI7D,MAAI,eAAe,QAAQ,wBAAwB;AAGnD,MAAI,IAAI,QAAQ,EAAE,cAAc,KAAK;AACpC,mBAAe,aAAa;AAAA,MAC3B,IAAI,0CAAyB;AAAA,MAC7B,IAAI,mCAAkB;AAAA,IACvB;AAAA,EACD;AAGA,MAAI;AACJ,UAAI,+BAAe,KAAK,GAAG;AAE1B,UAAM,WAAW;AAAA,MAChB,2CAA4B,aAAa,YAAY;AAAA,MACrD,0CAA2B,aAAa,SAAS;AAAA,IAClD;AACA,qBAAiB,kCAAmB,aAAa,QAAQ;AAAA,EAC1D,OAAO;AAEN,UAAM,iBACL,QAAQ,yBAAyB,SAAY,mCAAmC;AAEjF,qBAAiB,IAAI,8BAAe;AAAA,MACnC,UAAU,eAAe;AAAA,MACzB,gBAAgB,CAAC,WAAW,OAAO;AAAA,IACpC,CAAC;AAAA,EACF;AAGA,QAAM,mBAAmB,UAAM,oDAA0B;AAAA,IACxD,KAAK;AAAA,IACL,QAAQ;AAAA,EACT,CAAC;AAGD,QAAM,iBAAiB,UAAM,uCAAqB;AAAA,IACjD;AAAA,IACA;AAAA,EACD,CAAC;AAGD,QAAM,oBAAgB,iCAAiB,GAAG;AAC1C,SAAO,MAAM,eACX,WAAW,aAAa,EACxB,OAAO,EAAE,OAAO,MAAM,GAAG,EAAE,QAAQ,IAAI,yBAAyB,EAAE,CAAC;AACtE;","names":[]}