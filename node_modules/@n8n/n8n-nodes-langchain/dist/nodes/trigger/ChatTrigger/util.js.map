{"version":3,"sources":["../../../../nodes/trigger/ChatTrigger/util.ts"],"sourcesContent":["import { NodeOperationError, UserError, WAIT_INDEFINITELY } from 'n8n-workflow';\nimport type { IExecuteFunctions } from 'n8n-workflow';\n\nexport function configureWaitTillDate(context: IExecuteFunctions) {\n\tlet waitTill = WAIT_INDEFINITELY;\n\n\tconst limitOptions = context.getNodeParameter('options.limitWaitTime.values', 0, {}) as {\n\t\tlimitType?: string;\n\t\tresumeAmount?: number;\n\t\tresumeUnit?: string;\n\t\tmaxDateAndTime?: string;\n\t};\n\n\tif (Object.keys(limitOptions).length) {\n\t\ttry {\n\t\t\tif (limitOptions.limitType === 'afterTimeInterval') {\n\t\t\t\tlet waitAmount = limitOptions.resumeAmount as number;\n\n\t\t\t\tif (limitOptions.resumeUnit === 'minutes') {\n\t\t\t\t\twaitAmount *= 60;\n\t\t\t\t}\n\t\t\t\tif (limitOptions.resumeUnit === 'hours') {\n\t\t\t\t\twaitAmount *= 60 * 60;\n\t\t\t\t}\n\t\t\t\tif (limitOptions.resumeUnit === 'days') {\n\t\t\t\t\twaitAmount *= 60 * 60 * 24;\n\t\t\t\t}\n\n\t\t\t\twaitAmount *= 1000;\n\t\t\t\twaitTill = new Date(new Date().getTime() + waitAmount);\n\t\t\t} else {\n\t\t\t\twaitTill = new Date(limitOptions.maxDateAndTime as string);\n\t\t\t}\n\n\t\t\tif (isNaN(waitTill.getTime())) {\n\t\t\t\tthrow new UserError('Invalid date format');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow new NodeOperationError(context.getNode(), 'Could not configure Limit Wait Time', {\n\t\t\t\tdescription: error.message,\n\t\t\t});\n\t\t}\n\t}\n\n\treturn waitTill;\n}\n\nexport const configureInputs = (parameters: { options?: { memoryConnection?: boolean } }) => {\n\tconst inputs = [\n\t\t{\n\t\t\ttype: 'main',\n\t\t\tdisplayName: 'User Response',\n\t\t},\n\t];\n\tif (parameters.options?.memoryConnection) {\n\t\treturn [\n\t\t\t...inputs,\n\t\t\t{\n\t\t\t\ttype: 'ai_memory',\n\t\t\t\tdisplayName: 'Memory',\n\t\t\t\tmaxConnections: 1,\n\t\t\t},\n\t\t];\n\t}\n\n\treturn inputs;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiE;AAG1D,SAAS,sBAAsB,SAA4B;AACjE,MAAI,WAAW;AAEf,QAAM,eAAe,QAAQ,iBAAiB,gCAAgC,GAAG,CAAC,CAAC;AAOnF,MAAI,OAAO,KAAK,YAAY,EAAE,QAAQ;AACrC,QAAI;AACH,UAAI,aAAa,cAAc,qBAAqB;AACnD,YAAI,aAAa,aAAa;AAE9B,YAAI,aAAa,eAAe,WAAW;AAC1C,wBAAc;AAAA,QACf;AACA,YAAI,aAAa,eAAe,SAAS;AACxC,wBAAc,KAAK;AAAA,QACpB;AACA,YAAI,aAAa,eAAe,QAAQ;AACvC,wBAAc,KAAK,KAAK;AAAA,QACzB;AAEA,sBAAc;AACd,mBAAW,IAAI,MAAK,oBAAI,KAAK,GAAE,QAAQ,IAAI,UAAU;AAAA,MACtD,OAAO;AACN,mBAAW,IAAI,KAAK,aAAa,cAAwB;AAAA,MAC1D;AAEA,UAAI,MAAM,SAAS,QAAQ,CAAC,GAAG;AAC9B,cAAM,IAAI,8BAAU,qBAAqB;AAAA,MAC1C;AAAA,IACD,SAAS,OAAO;AACf,YAAM,IAAI,uCAAmB,QAAQ,QAAQ,GAAG,uCAAuC;AAAA,QACtF,aAAa,MAAM;AAAA,MACpB,CAAC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;AAEO,MAAM,kBAAkB,CAAC,eAA6D;AAC5F,QAAM,SAAS;AAAA,IACd;AAAA,MACC,MAAM;AAAA,MACN,aAAa;AAAA,IACd;AAAA,EACD;AACA,MAAI,WAAW,SAAS,kBAAkB;AACzC,WAAO;AAAA,MACN,GAAG;AAAA,MACH;AAAA,QACC,MAAM;AAAA,QACN,aAAa;AAAA,QACb,gBAAgB;AAAA,MACjB;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}