{"version":3,"sources":["../../../../../../nodes/vector_store/shared/createVectorStoreNode/operations/retrieveOperation.ts"],"sourcesContent":["import type { Embeddings } from '@langchain/core/embeddings';\nimport type { BaseDocumentCompressor } from '@langchain/core/retrievers/document_compressors';\nimport type { VectorStore } from '@langchain/core/vectorstores';\nimport { NodeConnectionTypes, type ISupplyDataFunctions, type SupplyData } from 'n8n-workflow';\n\nimport { getMetadataFiltersValues } from '@utils/helpers';\nimport { logWrapper } from '@utils/logWrapper';\n\nimport type { VectorStoreNodeConstructorArgs } from '../types';\n\n/**\n * Handles the 'retrieve' operation mode\n * Returns the vector store to be used with AI nodes\n */\nexport async function handleRetrieveOperation<T extends VectorStore = VectorStore>(\n\tcontext: ISupplyDataFunctions,\n\targs: VectorStoreNodeConstructorArgs<T>,\n\tembeddings: Embeddings,\n\titemIndex: number,\n): Promise<SupplyData> {\n\t// Get metadata filters\n\tconst filter = getMetadataFiltersValues(context, itemIndex);\n\tconst useReranker = context.getNodeParameter('useReranker', itemIndex, false) as boolean;\n\n\t// Get the vector store client\n\tconst vectorStore = await args.getVectorStoreClient(context, filter, embeddings, itemIndex);\n\tlet response: VectorStore | { reranker: BaseDocumentCompressor; vectorStore: VectorStore } =\n\t\tvectorStore;\n\n\tif (useReranker) {\n\t\tconst reranker = (await context.getInputConnectionData(\n\t\t\tNodeConnectionTypes.AiReranker,\n\t\t\t0,\n\t\t)) as BaseDocumentCompressor;\n\n\t\t// Return reranker and vector store with log wrapper\n\t\tresponse = {\n\t\t\treranker,\n\t\t\tvectorStore: logWrapper(vectorStore, context),\n\t\t};\n\t} else {\n\t\t// Return the vector store with logging wrapper\n\t\tresponse = logWrapper(vectorStore, context);\n\t}\n\n\treturn {\n\t\tresponse,\n\t\tcloseFunction: async () => {\n\t\t\t// Release the vector store client if a release method was provided\n\t\t\targs.releaseVectorStoreClient?.(vectorStore);\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,0BAAgF;AAEhF,qBAAyC;AACzC,wBAA2B;AAQ3B,eAAsB,wBACrB,SACA,MACA,YACA,WACsB;AAEtB,QAAM,aAAS,yCAAyB,SAAS,SAAS;AAC1D,QAAM,cAAc,QAAQ,iBAAiB,eAAe,WAAW,KAAK;AAG5E,QAAM,cAAc,MAAM,KAAK,qBAAqB,SAAS,QAAQ,YAAY,SAAS;AAC1F,MAAI,WACH;AAED,MAAI,aAAa;AAChB,UAAM,WAAY,MAAM,QAAQ;AAAA,MAC/B,wCAAoB;AAAA,MACpB;AAAA,IACD;AAGA,eAAW;AAAA,MACV;AAAA,MACA,iBAAa,8BAAW,aAAa,OAAO;AAAA,IAC7C;AAAA,EACD,OAAO;AAEN,mBAAW,8BAAW,aAAa,OAAO;AAAA,EAC3C;AAEA,SAAO;AAAA,IACN;AAAA,IACA,eAAe,YAAY;AAE1B,WAAK,2BAA2B,WAAW;AAAA,IAC5C;AAAA,EACD;AACD;","names":[]}