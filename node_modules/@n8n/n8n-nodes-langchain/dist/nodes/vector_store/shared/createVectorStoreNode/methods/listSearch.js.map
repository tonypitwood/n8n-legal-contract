{"version":3,"sources":["../../../../../../nodes/vector_store/shared/createVectorStoreNode/methods/listSearch.ts"],"sourcesContent":["import { Pinecone } from '@pinecone-database/pinecone';\nimport { MilvusClient } from '@zilliz/milvus2-sdk-node';\nimport { ApplicationError, type IDataObject, type ILoadOptionsFunctions } from 'n8n-workflow';\n\nimport type { QdrantCredential } from '../../../VectorStoreQdrant/Qdrant.utils';\nimport { createQdrantClient } from '../../../VectorStoreQdrant/Qdrant.utils';\nimport type { WeaviateCredential } from '../../../VectorStoreWeaviate/Weaviate.utils';\nimport { createWeaviateClient } from '../../../VectorStoreWeaviate/Weaviate.utils';\n\nexport async function pineconeIndexSearch(this: ILoadOptionsFunctions) {\n\tconst credentials = await this.getCredentials('pineconeApi');\n\n\tconst client = new Pinecone({\n\t\tapiKey: credentials.apiKey as string,\n\t});\n\n\tconst indexes = await client.listIndexes();\n\n\tconst results = (indexes.indexes ?? []).map((index) => ({\n\t\tname: index.name,\n\t\tvalue: index.name,\n\t}));\n\n\treturn { results };\n}\n\nexport async function supabaseTableNameSearch(this: ILoadOptionsFunctions) {\n\tconst credentials = await this.getCredentials('supabaseApi');\n\n\tconst results = [];\n\n\tif (typeof credentials.host !== 'string') {\n\t\tthrow new ApplicationError('Expected Supabase credentials host to be a string');\n\t}\n\n\tconst { paths } = (await this.helpers.requestWithAuthentication.call(this, 'supabaseApi', {\n\t\theaders: {\n\t\t\tPrefer: 'return=representation',\n\t\t},\n\t\tmethod: 'GET',\n\t\turi: `${credentials.host}/rest/v1/`,\n\t\tjson: true,\n\t})) as { paths: IDataObject };\n\n\tfor (const path of Object.keys(paths)) {\n\t\t//omit introspection path\n\t\tif (path === '/') continue;\n\n\t\tresults.push({\n\t\t\tname: path.replace('/', ''),\n\t\t\tvalue: path.replace('/', ''),\n\t\t});\n\t}\n\n\treturn { results };\n}\n\nexport async function qdrantCollectionsSearch(this: ILoadOptionsFunctions) {\n\tconst credentials = await this.getCredentials('qdrantApi');\n\n\tconst client = createQdrantClient(credentials as QdrantCredential);\n\n\tconst response = await client.getCollections();\n\n\tconst results = response.collections.map((collection) => ({\n\t\tname: collection.name,\n\t\tvalue: collection.name,\n\t}));\n\n\treturn { results };\n}\n\nexport async function milvusCollectionsSearch(this: ILoadOptionsFunctions) {\n\tconst credentials = await this.getCredentials<{\n\t\tbaseUrl: string;\n\t\tusername: string;\n\t\tpassword: string;\n\t}>('milvusApi');\n\n\tconst client = new MilvusClient({\n\t\taddress: credentials.baseUrl,\n\t\ttoken: `${credentials.username}:${credentials.password}`,\n\t});\n\n\tconst response = await client.listCollections();\n\n\tconst results = response.data.map((collection) => ({\n\t\tname: collection.name,\n\t\tvalue: collection.name,\n\t}));\n\n\treturn { results };\n}\n\nexport async function weaviateCollectionsSearch(this: ILoadOptionsFunctions) {\n\tconst credentials = await this.getCredentials('weaviateApi');\n\n\tconst client = await createWeaviateClient(credentials as WeaviateCredential);\n\n\tconst collections = await client.collections.listAll();\n\n\tconst results = collections.map((collection: { name: string }) => ({\n\t\tname: collection.name,\n\t\tvalue: collection.name,\n\t}));\n\n\treturn { results };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAyB;AACzB,8BAA6B;AAC7B,0BAA+E;AAG/E,oBAAmC;AAEnC,sBAAqC;AAErC,eAAsB,sBAAiD;AACtE,QAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAE3D,QAAM,SAAS,IAAI,yBAAS;AAAA,IAC3B,QAAQ,YAAY;AAAA,EACrB,CAAC;AAED,QAAM,UAAU,MAAM,OAAO,YAAY;AAEzC,QAAM,WAAW,QAAQ,WAAW,CAAC,GAAG,IAAI,CAAC,WAAW;AAAA,IACvD,MAAM,MAAM;AAAA,IACZ,OAAO,MAAM;AAAA,EACd,EAAE;AAEF,SAAO,EAAE,QAAQ;AAClB;AAEA,eAAsB,0BAAqD;AAC1E,QAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAE3D,QAAM,UAAU,CAAC;AAEjB,MAAI,OAAO,YAAY,SAAS,UAAU;AACzC,UAAM,IAAI,qCAAiB,mDAAmD;AAAA,EAC/E;AAEA,QAAM,EAAE,MAAM,IAAK,MAAM,KAAK,QAAQ,0BAA0B,KAAK,MAAM,eAAe;AAAA,IACzF,SAAS;AAAA,MACR,QAAQ;AAAA,IACT;AAAA,IACA,QAAQ;AAAA,IACR,KAAK,GAAG,YAAY,IAAI;AAAA,IACxB,MAAM;AAAA,EACP,CAAC;AAED,aAAW,QAAQ,OAAO,KAAK,KAAK,GAAG;AAEtC,QAAI,SAAS,IAAK;AAElB,YAAQ,KAAK;AAAA,MACZ,MAAM,KAAK,QAAQ,KAAK,EAAE;AAAA,MAC1B,OAAO,KAAK,QAAQ,KAAK,EAAE;AAAA,IAC5B,CAAC;AAAA,EACF;AAEA,SAAO,EAAE,QAAQ;AAClB;AAEA,eAAsB,0BAAqD;AAC1E,QAAM,cAAc,MAAM,KAAK,eAAe,WAAW;AAEzD,QAAM,aAAS,kCAAmB,WAA+B;AAEjE,QAAM,WAAW,MAAM,OAAO,eAAe;AAE7C,QAAM,UAAU,SAAS,YAAY,IAAI,CAAC,gBAAgB;AAAA,IACzD,MAAM,WAAW;AAAA,IACjB,OAAO,WAAW;AAAA,EACnB,EAAE;AAEF,SAAO,EAAE,QAAQ;AAClB;AAEA,eAAsB,0BAAqD;AAC1E,QAAM,cAAc,MAAM,KAAK,eAI5B,WAAW;AAEd,QAAM,SAAS,IAAI,qCAAa;AAAA,IAC/B,SAAS,YAAY;AAAA,IACrB,OAAO,GAAG,YAAY,QAAQ,IAAI,YAAY,QAAQ;AAAA,EACvD,CAAC;AAED,QAAM,WAAW,MAAM,OAAO,gBAAgB;AAE9C,QAAM,UAAU,SAAS,KAAK,IAAI,CAAC,gBAAgB;AAAA,IAClD,MAAM,WAAW;AAAA,IACjB,OAAO,WAAW;AAAA,EACnB,EAAE;AAEF,SAAO,EAAE,QAAQ;AAClB;AAEA,eAAsB,4BAAuD;AAC5E,QAAM,cAAc,MAAM,KAAK,eAAe,aAAa;AAE3D,QAAM,SAAS,UAAM,sCAAqB,WAAiC;AAE3E,QAAM,cAAc,MAAM,OAAO,YAAY,QAAQ;AAErD,QAAM,UAAU,YAAY,IAAI,CAAC,gBAAkC;AAAA,IAClE,MAAM,WAAW;AAAA,IACjB,OAAO,WAAW;AAAA,EACnB,EAAE;AAEF,SAAO,EAAE,QAAQ;AAClB;","names":[]}