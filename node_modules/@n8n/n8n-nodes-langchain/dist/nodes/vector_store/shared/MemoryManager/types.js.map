{"version":3,"sources":["../../../../../nodes/vector_store/shared/MemoryManager/types.ts"],"sourcesContent":["import type { Document } from '@langchain/core/documents';\nimport type { MemoryVectorStore } from 'langchain/vectorstores/memory';\n\n/**\n * Configuration options for the memory vector store\n */\nexport interface MemoryVectorStoreConfig {\n\t/**\n\t * Maximum memory size in MB, -1 to disable\n\t */\n\tmaxMemoryMB: number;\n\n\t/**\n\t * TTL for inactive stores in hours, -1 to disable\n\t */\n\tttlHours: number;\n}\n\n/**\n * Vector store metadata for tracking usage\n */\nexport interface VectorStoreMetadata {\n\tsize: number;\n\tcreatedAt: Date;\n\tlastAccessed: Date;\n}\n\n/**\n * Per-store statistics for reporting\n */\nexport interface StoreStats {\n\tsizeBytes: number;\n\tsizeMB: number;\n\tpercentOfTotal: number;\n\tvectors: number;\n\tcreatedAt: string;\n\tlastAccessed: string;\n\tinactive?: boolean;\n\tinactiveForHours?: number;\n}\n\n/**\n * Overall vector store statistics\n */\nexport interface VectorStoreStats {\n\ttotalSizeBytes: number;\n\ttotalSizeMB: number;\n\tpercentOfLimit: number;\n\tmaxMemoryMB: number;\n\tstoreCount: number;\n\tinactiveStoreCount: number;\n\tttlHours: number;\n\tstores: Record<string, StoreStats>;\n}\n\n/**\n * Service for calculating memory usage\n */\nexport interface IMemoryCalculator {\n\testimateBatchSize(documents: Document[]): number;\n\tcalculateVectorStoreSize(vectorStore: MemoryVectorStore): number;\n}\n\n/**\n * Service for cleaning up vector stores\n */\nexport interface IStoreCleanupService {\n\tcleanupInactiveStores(): void;\n\tcleanupOldestStores(requiredBytes: number): void;\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;","names":[]}