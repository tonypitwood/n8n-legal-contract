{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreSupabase/VectorStoreSupabase.node.ts"],"sourcesContent":["import { SupabaseVectorStore } from '@langchain/community/vectorstores/supabase';\nimport { createClient } from '@supabase/supabase-js';\nimport { NodeOperationError, type INodeProperties } from 'n8n-workflow';\n\nimport { metadataFilterField } from '@utils/sharedFields';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\nimport { supabaseTableNameSearch } from '../shared/createVectorStoreNode/methods/listSearch';\nimport { supabaseTableNameRLC } from '../shared/descriptions';\n\nconst queryNameField: INodeProperties = {\n\tdisplayName: 'Query Name',\n\tname: 'queryName',\n\ttype: 'string',\n\tdefault: 'match_documents',\n\tdescription: 'Name of the query to use for matching documents',\n};\n\nconst sharedFields: INodeProperties[] = [supabaseTableNameRLC];\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [queryNameField],\n\t},\n];\n\nconst retrieveFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [queryNameField, metadataFilterField],\n\t},\n];\n\nconst updateFields: INodeProperties[] = [...insertFields];\n\nexport class VectorStoreSupabase extends createVectorStoreNode<SupabaseVectorStore>({\n\tmeta: {\n\t\tdescription: 'Work with your data in Supabase Vector Store',\n\t\ticon: 'file:supabase.svg',\n\t\tdisplayName: 'Supabase Vector Store',\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoresupabase/',\n\t\tname: 'vectorStoreSupabase',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'supabaseApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\toperationModes: ['load', 'insert', 'retrieve', 'update', 'retrieve-as-tool'],\n\t},\n\tmethods: {\n\t\tlistSearch: { supabaseTableNameSearch },\n\t},\n\tsharedFields,\n\tinsertFields,\n\tloadFields: retrieveFields,\n\tretrieveFields,\n\tupdateFields,\n\tasync getVectorStoreClient(context, filter, embeddings, itemIndex) {\n\t\tconst tableName = context.getNodeParameter('tableName', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst options = context.getNodeParameter('options', itemIndex, {}) as {\n\t\t\tqueryName: string;\n\t\t};\n\t\tconst credentials = await context.getCredentials('supabaseApi');\n\t\tconst client = createClient(credentials.host as string, credentials.serviceRole as string);\n\n\t\treturn await SupabaseVectorStore.fromExistingIndex(embeddings, {\n\t\t\tclient,\n\t\t\ttableName,\n\t\t\tqueryName: options.queryName ?? 'match_documents',\n\t\t\tfilter,\n\t\t});\n\t},\n\tasync populateVectorStore(context, embeddings, documents, itemIndex) {\n\t\tconst tableName = context.getNodeParameter('tableName', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst options = context.getNodeParameter('options', itemIndex, {}) as {\n\t\t\tqueryName: string;\n\t\t};\n\t\tconst credentials = await context.getCredentials('supabaseApi');\n\t\tconst client = createClient(credentials.host as string, credentials.serviceRole as string);\n\n\t\ttry {\n\t\t\tawait SupabaseVectorStore.fromDocuments(documents, embeddings, {\n\t\t\t\tclient,\n\t\t\t\ttableName,\n\t\t\t\tqueryName: options.queryName ?? 'match_documents',\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif ((error as Error).message === 'Error inserting: undefined 404 Not Found') {\n\t\t\t\tthrow new NodeOperationError(context.getNode(), `Table ${tableName} not found`, {\n\t\t\t\t\titemIndex,\n\t\t\t\t\tdescription: 'Please check that the table exists in your vector store',\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthrow new NodeOperationError(context.getNode(), error as Error, {\n\t\t\t\t\titemIndex,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t},\n}) {}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAoC;AACpC,yBAA6B;AAC7B,0BAAyD;AAEzD,0BAAoC;AAEpC,mCAAsC;AACtC,wBAAwC;AACxC,0BAAqC;AAErC,MAAM,iBAAkC;AAAA,EACvC,aAAa;AAAA,EACb,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,aAAa;AACd;AAEA,MAAM,eAAkC,CAAC,wCAAoB;AAC7D,MAAM,eAAkC;AAAA,EACvC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS,CAAC,cAAc;AAAA,EACzB;AACD;AAEA,MAAM,iBAAoC;AAAA,EACzC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS,CAAC,gBAAgB,uCAAmB;AAAA,EAC9C;AACD;AAEA,MAAM,eAAkC,CAAC,GAAG,YAAY;AAEjD,MAAM,gCAA4B,oDAA2C;AAAA,EACnF,MAAM;AAAA,IACL,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SACC;AAAA,IACD,MAAM;AAAA,IACN,aAAa;AAAA,MACZ;AAAA,QACC,MAAM;AAAA,QACN,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,gBAAgB,CAAC,QAAQ,UAAU,YAAY,UAAU,kBAAkB;AAAA,EAC5E;AAAA,EACA,SAAS;AAAA,IACR,YAAY,EAAE,mEAAwB;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA,MAAM,qBAAqB,SAAS,QAAQ,YAAY,WAAW;AAClE,UAAM,YAAY,QAAQ,iBAAiB,aAAa,WAAW,IAAI;AAAA,MACtE,cAAc;AAAA,IACf,CAAC;AACD,UAAM,UAAU,QAAQ,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAGjE,UAAM,cAAc,MAAM,QAAQ,eAAe,aAAa;AAC9D,UAAM,aAAS,iCAAa,YAAY,MAAgB,YAAY,WAAqB;AAEzF,WAAO,MAAM,oCAAoB,kBAAkB,YAAY;AAAA,MAC9D;AAAA,MACA;AAAA,MACA,WAAW,QAAQ,aAAa;AAAA,MAChC;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EACA,MAAM,oBAAoB,SAAS,YAAY,WAAW,WAAW;AACpE,UAAM,YAAY,QAAQ,iBAAiB,aAAa,WAAW,IAAI;AAAA,MACtE,cAAc;AAAA,IACf,CAAC;AACD,UAAM,UAAU,QAAQ,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAGjE,UAAM,cAAc,MAAM,QAAQ,eAAe,aAAa;AAC9D,UAAM,aAAS,iCAAa,YAAY,MAAgB,YAAY,WAAqB;AAEzF,QAAI;AACH,YAAM,oCAAoB,cAAc,WAAW,YAAY;AAAA,QAC9D;AAAA,QACA;AAAA,QACA,WAAW,QAAQ,aAAa;AAAA,MACjC,CAAC;AAAA,IACF,SAAS,OAAO;AACf,UAAK,MAAgB,YAAY,4CAA4C;AAC5E,cAAM,IAAI,uCAAmB,QAAQ,QAAQ,GAAG,SAAS,SAAS,cAAc;AAAA,UAC/E;AAAA,UACA,aAAa;AAAA,QACd,CAAC;AAAA,MACF,OAAO;AACN,cAAM,IAAI,uCAAmB,QAAQ,QAAQ,GAAG,OAAgB;AAAA,UAC/D;AAAA,QACD,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD;AACD,CAAC,EAAE;AAAC;","names":[]}