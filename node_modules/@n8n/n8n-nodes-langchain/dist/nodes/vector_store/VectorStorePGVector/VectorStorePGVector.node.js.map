{"version":3,"sources":["../../../../nodes/vector_store/VectorStorePGVector/VectorStorePGVector.node.ts"],"sourcesContent":["import {\n\tPGVectorStore,\n\ttype DistanceStrategy,\n\ttype PGVectorStoreArgs,\n} from '@langchain/community/vectorstores/pgvector';\nimport type { EmbeddingsInterface } from '@langchain/core/embeddings';\nimport { configurePostgres } from 'n8n-nodes-base/dist/nodes/Postgres/transport/index';\nimport type { PostgresNodeCredentials } from 'n8n-nodes-base/dist/nodes/Postgres/v2/helpers/interfaces';\nimport type { INodeProperties } from 'n8n-workflow';\nimport type pg from 'pg';\n\nimport { metadataFilterField } from '@utils/sharedFields';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\n\ntype CollectionOptions = {\n\tuseCollection?: boolean;\n\tcollectionName?: string;\n\tcollectionTableName?: string;\n};\n\ntype ColumnOptions = {\n\tidColumnName: string;\n\tvectorColumnName: string;\n\tcontentColumnName: string;\n\tmetadataColumnName: string;\n};\n\nconst sharedFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Table Name',\n\t\tname: 'tableName',\n\t\ttype: 'string',\n\t\tdefault: 'n8n_vectors',\n\t\tdescription:\n\t\t\t'The table name to store the vectors in. If table does not exist, it will be created.',\n\t},\n];\n\nconst collectionField: INodeProperties = {\n\tdisplayName: 'Collection',\n\tname: 'collection',\n\ttype: 'fixedCollection',\n\tdescription: 'Collection of vectors',\n\tdefault: {\n\t\tvalues: {\n\t\t\tuseCollection: false,\n\t\t\tcollectionName: 'n8n',\n\t\t\tcollectionTable: 'n8n_vector_collections',\n\t\t},\n\t},\n\ttypeOptions: {},\n\tplaceholder: 'Add Collection Settings',\n\toptions: [\n\t\t{\n\t\t\tname: 'values',\n\t\t\tdisplayName: 'Collection Settings',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Use Collection',\n\t\t\t\t\tname: 'useCollection',\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdefault: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Collection Name',\n\t\t\t\t\tname: 'collectionName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'n8n',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: { show: { useCollection: [true] } },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Collection Table Name',\n\t\t\t\t\tname: 'collectionTableName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'n8n_vector_collections',\n\t\t\t\t\trequired: true,\n\t\t\t\t\tdisplayOptions: { show: { useCollection: [true] } },\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nconst columnNamesField: INodeProperties = {\n\tdisplayName: 'Column Names',\n\tname: 'columnNames',\n\ttype: 'fixedCollection',\n\tdescription: 'The names of the columns in the PGVector table',\n\tdefault: {\n\t\tvalues: {\n\t\t\tidColumnName: 'id',\n\t\t\tvectorColumnName: 'embedding',\n\t\t\tcontentColumnName: 'text',\n\t\t\tmetadataColumnName: 'metadata',\n\t\t},\n\t},\n\ttypeOptions: {},\n\tplaceholder: 'Set Column Names',\n\toptions: [\n\t\t{\n\t\t\tname: 'values',\n\t\t\tdisplayName: 'Column Name Settings',\n\t\t\tvalues: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'ID Column Name',\n\t\t\t\t\tname: 'idColumnName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'id',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Vector Column Name',\n\t\t\t\t\tname: 'vectorColumnName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'embedding',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Content Column Name',\n\t\t\t\t\tname: 'contentColumnName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'text',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Metadata Column Name',\n\t\t\t\t\tname: 'metadataColumnName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdefault: 'metadata',\n\t\t\t\t\trequired: true,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n\nconst distanceStrategyField: INodeProperties = {\n\tdisplayName: 'Distance Strategy',\n\tname: 'distanceStrategy',\n\ttype: 'options',\n\tdefault: 'cosine',\n\tdescription: 'The method to calculate the distance between two vectors',\n\toptions: [\n\t\t{\n\t\t\tname: 'Cosine',\n\t\t\tvalue: 'cosine',\n\t\t},\n\t\t{\n\t\t\tname: 'Inner Product',\n\t\t\tvalue: 'innerProduct',\n\t\t},\n\t\t{\n\t\t\tname: 'Euclidean',\n\t\t\tvalue: 'euclidean',\n\t\t},\n\t],\n};\n\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [collectionField, columnNamesField],\n\t},\n];\n\nconst retrieveFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [distanceStrategyField, collectionField, columnNamesField, metadataFilterField],\n\t},\n];\n\n/**\n * Extended PGVectorStore class to handle custom filtering.\n * This wrapper is necessary because when used as a retriever,\n * similaritySearchVectorWithScore should use this.filter instead of\n * expecting it from the parameter\n */\nclass ExtendedPGVectorStore extends PGVectorStore {\n\tstatic async initialize(\n\t\tembeddings: EmbeddingsInterface,\n\t\targs: PGVectorStoreArgs & { dimensions?: number },\n\t): Promise<ExtendedPGVectorStore> {\n\t\tconst { dimensions, ...rest } = args;\n\t\tconst postgresqlVectorStore = new this(embeddings, rest);\n\n\t\tawait postgresqlVectorStore._initializeClient();\n\t\tawait postgresqlVectorStore.ensureTableInDatabase(dimensions);\n\t\tif (postgresqlVectorStore.collectionTableName) {\n\t\t\tawait postgresqlVectorStore.ensureCollectionTableInDatabase();\n\t\t}\n\n\t\treturn postgresqlVectorStore;\n\t}\n\n\tasync similaritySearchVectorWithScore(\n\t\tquery: number[],\n\t\tk: number,\n\t\tfilter?: PGVectorStore['FilterType'],\n\t) {\n\t\tconst mergedFilter = { ...this.filter, ...filter };\n\t\treturn await super.similaritySearchVectorWithScore(query, k, mergedFilter);\n\t}\n}\n\nexport class VectorStorePGVector extends createVectorStoreNode<ExtendedPGVectorStore>({\n\tmeta: {\n\t\tdescription: 'Work with your data in Postgresql with the PGVector extension',\n\t\ticon: 'file:postgres.svg',\n\t\tdisplayName: 'Postgres PGVector Store',\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepgvector/',\n\t\tname: 'vectorStorePGVector',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'postgres',\n\t\t\t\trequired: true,\n\t\t\t\ttestedBy: 'postgresConnectionTest',\n\t\t\t},\n\t\t],\n\t\toperationModes: ['load', 'insert', 'retrieve', 'retrieve-as-tool'],\n\t},\n\tsharedFields,\n\tinsertFields,\n\tloadFields: retrieveFields,\n\tretrieveFields,\n\tasync getVectorStoreClient(context, filter, embeddings, itemIndex) {\n\t\tconst tableName = context.getNodeParameter('tableName', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst credentials = await context.getCredentials('postgres');\n\t\tconst pgConf = await configurePostgres.call(context, credentials as PostgresNodeCredentials);\n\t\tconst pool = pgConf.db.$pool as unknown as pg.Pool;\n\n\t\tconst config: PGVectorStoreArgs = {\n\t\t\tpool,\n\t\t\ttableName,\n\t\t\tfilter,\n\t\t};\n\n\t\tconst collectionOptions = context.getNodeParameter(\n\t\t\t'options.collection.values',\n\t\t\t0,\n\t\t\t{},\n\t\t) as CollectionOptions;\n\n\t\tif (collectionOptions?.useCollection) {\n\t\t\tconfig.collectionName = collectionOptions.collectionName;\n\t\t\tconfig.collectionTableName = collectionOptions.collectionTableName;\n\t\t}\n\n\t\tconfig.columns = context.getNodeParameter('options.columnNames.values', 0, {\n\t\t\tidColumnName: 'id',\n\t\t\tvectorColumnName: 'embedding',\n\t\t\tcontentColumnName: 'text',\n\t\t\tmetadataColumnName: 'metadata',\n\t\t}) as ColumnOptions;\n\n\t\tconfig.distanceStrategy = context.getNodeParameter(\n\t\t\t'options.distanceStrategy',\n\t\t\t0,\n\t\t\t'cosine',\n\t\t) as DistanceStrategy;\n\n\t\treturn await ExtendedPGVectorStore.initialize(embeddings, config);\n\t},\n\n\tasync populateVectorStore(context, embeddings, documents, itemIndex) {\n\t\t// NOTE: if you are to create the HNSW index before use, you need to consider moving the distanceStrategy field to\n\t\t// shared fields, because you need that strategy when creating the index.\n\t\tconst tableName = context.getNodeParameter('tableName', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst credentials = await context.getCredentials('postgres');\n\t\tconst pgConf = await configurePostgres.call(context, credentials as PostgresNodeCredentials);\n\t\tconst pool = pgConf.db.$pool as unknown as pg.Pool;\n\n\t\tconst config: PGVectorStoreArgs = {\n\t\t\tpool,\n\t\t\ttableName,\n\t\t};\n\n\t\tconst collectionOptions = context.getNodeParameter(\n\t\t\t'options.collection.values',\n\t\t\t0,\n\t\t\t{},\n\t\t) as CollectionOptions;\n\n\t\tif (collectionOptions?.useCollection) {\n\t\t\tconfig.collectionName = collectionOptions.collectionName;\n\t\t\tconfig.collectionTableName = collectionOptions.collectionTableName;\n\t\t}\n\n\t\tconfig.columns = context.getNodeParameter('options.columnNames.values', 0, {\n\t\t\tidColumnName: 'id',\n\t\t\tvectorColumnName: 'embedding',\n\t\t\tcontentColumnName: 'text',\n\t\t\tmetadataColumnName: 'metadata',\n\t\t}) as ColumnOptions;\n\n\t\tconst vectorStore = await PGVectorStore.fromDocuments(documents, embeddings, config);\n\t\tvectorStore.client?.release();\n\t},\n\n\treleaseVectorStoreClient(vectorStore) {\n\t\tvectorStore.client?.release();\n\t},\n}) {}\n"],"mappings":"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","names":[]}