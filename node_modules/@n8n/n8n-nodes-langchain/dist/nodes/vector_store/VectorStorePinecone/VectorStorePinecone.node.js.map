{"version":3,"sources":["../../../../nodes/vector_store/VectorStorePinecone/VectorStorePinecone.node.ts"],"sourcesContent":["import type { PineconeStoreParams } from '@langchain/pinecone';\nimport { PineconeStore } from '@langchain/pinecone';\nimport { Pinecone } from '@pinecone-database/pinecone';\nimport { NodeOperationError, type INodeProperties } from 'n8n-workflow';\n\nimport { metadataFilterField } from '@utils/sharedFields';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\nimport { pineconeIndexSearch } from '../shared/createVectorStoreNode/methods/listSearch';\nimport { pineconeIndexRLC } from '../shared/descriptions';\n\nconst sharedFields: INodeProperties[] = [pineconeIndexRLC];\n\nconst pineconeNamespaceField: INodeProperties = {\n\tdisplayName: 'Pinecone Namespace',\n\tname: 'pineconeNamespace',\n\ttype: 'string',\n\tdescription:\n\t\t'Partition the records in an index into namespaces. Queries and other operations are then limited to one namespace, so different requests can search different subsets of your index.',\n\tdefault: '',\n};\n\nconst retrieveFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [pineconeNamespaceField, metadataFilterField],\n\t},\n];\n\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Clear Namespace',\n\t\t\t\tname: 'clearNamespace',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to clear the namespace before inserting new data',\n\t\t\t},\n\t\t\tpineconeNamespaceField,\n\t\t],\n\t},\n];\n\nexport class VectorStorePinecone extends createVectorStoreNode<PineconeStore>({\n\tmeta: {\n\t\tdisplayName: 'Pinecone Vector Store',\n\t\tname: 'vectorStorePinecone',\n\t\tdescription: 'Work with your data in Pinecone Vector Store',\n\t\ticon: { light: 'file:pinecone.svg', dark: 'file:pinecone.dark.svg' },\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstorepinecone/',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'pineconeApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\toperationModes: ['load', 'insert', 'retrieve', 'update', 'retrieve-as-tool'],\n\t},\n\tmethods: { listSearch: { pineconeIndexSearch } },\n\tretrieveFields,\n\tloadFields: retrieveFields,\n\tinsertFields,\n\tsharedFields,\n\tasync getVectorStoreClient(context, filter, embeddings, itemIndex) {\n\t\tconst index = context.getNodeParameter('pineconeIndex', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst options = context.getNodeParameter('options', itemIndex, {}) as {\n\t\t\tpineconeNamespace?: string;\n\t\t};\n\t\tconst credentials = await context.getCredentials('pineconeApi');\n\n\t\tconst client = new Pinecone({\n\t\t\tapiKey: credentials.apiKey as string,\n\t\t});\n\n\t\tconst pineconeIndex = client.Index(index);\n\t\tconst config: PineconeStoreParams = {\n\t\t\tnamespace: options.pineconeNamespace ?? undefined,\n\t\t\tpineconeIndex,\n\t\t\tfilter,\n\t\t};\n\n\t\treturn await PineconeStore.fromExistingIndex(embeddings, config);\n\t},\n\tasync populateVectorStore(context, embeddings, documents, itemIndex) {\n\t\tconst index = context.getNodeParameter('pineconeIndex', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst options = context.getNodeParameter('options', itemIndex, {}) as {\n\t\t\tpineconeNamespace?: string;\n\t\t\tclearNamespace?: boolean;\n\t\t};\n\t\tconst credentials = await context.getCredentials('pineconeApi');\n\n\t\tconst client = new Pinecone({\n\t\t\tapiKey: credentials.apiKey as string,\n\t\t});\n\n\t\tconst indexes = ((await client.listIndexes()).indexes ?? []).map((i) => i.name);\n\n\t\tif (!indexes.includes(index)) {\n\t\t\tthrow new NodeOperationError(context.getNode(), `Index ${index} not found`, {\n\t\t\t\titemIndex,\n\t\t\t\tdescription: 'Please check that the index exists in your vector store',\n\t\t\t});\n\t\t}\n\n\t\tconst pineconeIndex = client.Index(index);\n\n\t\tif (options.pineconeNamespace && options.clearNamespace) {\n\t\t\tconst namespace = pineconeIndex.namespace(options.pineconeNamespace);\n\t\t\ttry {\n\t\t\t\tawait namespace.deleteAll();\n\t\t\t} catch (error) {\n\t\t\t\t// Namespace doesn't exist yet\n\t\t\t\tcontext.logger.info(`Namespace ${options.pineconeNamespace} does not exist yet`);\n\t\t\t}\n\t\t}\n\n\t\tawait PineconeStore.fromDocuments(documents, embeddings, {\n\t\t\tnamespace: options.pineconeNamespace ?? undefined,\n\t\t\tpineconeIndex,\n\t\t});\n\t},\n}) {}\n"],"mappings":"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","names":["import_pinecone"]}