{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreInMemoryLoad/VectorStoreInMemoryLoad.node.ts"],"sourcesContent":["import type { Embeddings } from '@langchain/core/embeddings';\nimport {\n\tNodeConnectionTypes,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype ISupplyDataFunctions,\n\ttype SupplyData,\n} from 'n8n-workflow';\n\nimport { logWrapper } from '@utils/logWrapper';\n\nimport { MemoryVectorStoreManager } from '../shared/MemoryManager/MemoryVectorStoreManager';\n\n// This node is deprecated. Use VectorStoreInMemory instead.\nexport class VectorStoreInMemoryLoad implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'In Memory Vector Store Load',\n\t\tname: 'vectorStoreInMemoryLoad',\n\t\ticon: 'fa:database',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\thidden: true,\n\t\tdescription: 'Load embedded data from an in-memory vector store',\n\t\tdefaults: {\n\t\t\tname: 'In Memory Vector Store Load',\n\t\t},\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Vector Stores'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Embedding',\n\t\t\t\tmaxConnections: 1,\n\t\t\t\ttype: NodeConnectionTypes.AiEmbedding,\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\toutputs: [NodeConnectionTypes.AiVectorStore],\n\t\toutputNames: ['Vector Store'],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Memory Key',\n\t\t\t\tname: 'memoryKey',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'vector_store_key',\n\t\t\t\tdescription:\n\t\t\t\t\t'The key to use to store the vector memory in the workflow data. The key will be prefixed with the workflow ID to avoid collisions.',\n\t\t\t},\n\t\t],\n\t};\n\n\tasync supplyData(this: ISupplyDataFunctions, itemIndex: number): Promise<SupplyData> {\n\t\tconst embeddings = (await this.getInputConnectionData(\n\t\t\tNodeConnectionTypes.AiEmbedding,\n\t\t\titemIndex,\n\t\t)) as Embeddings;\n\n\t\tconst workflowId = this.getWorkflow().id;\n\t\tconst memoryKey = this.getNodeParameter('memoryKey', 0) as string;\n\n\t\tconst vectorStoreSingleton = MemoryVectorStoreManager.getInstance(embeddings, this.logger);\n\t\tconst vectorStoreInstance = await vectorStoreSingleton.getVectorStore(\n\t\t\t`${workflowId}__${memoryKey}`,\n\t\t);\n\n\t\treturn {\n\t\t\tresponse: logWrapper(vectorStoreInstance, this),\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAMO;AAEP,wBAA2B;AAE3B,sCAAyC;AAGlC,MAAM,wBAA6C;AAAA,EAAnD;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,OAAO;AAAA,QACN,YAAY,CAAC,IAAI;AAAA,QACjB,eAAe;AAAA,UACd,IAAI,CAAC,eAAe;AAAA,QACrB;AAAA,QACA,WAAW;AAAA,UACV,sBAAsB;AAAA,YACrB;AAAA,cACC,KAAK;AAAA,YACN;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MAEA,QAAQ;AAAA,QACP;AAAA,UACC,aAAa;AAAA,UACb,gBAAgB;AAAA,UAChB,MAAM,wCAAoB;AAAA,UAC1B,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA,SAAS,CAAC,wCAAoB,aAAa;AAAA,MAC3C,aAAa,CAAC,cAAc;AAAA,MAC5B,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aACC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,WAAuC,WAAwC;AACpF,UAAM,aAAc,MAAM,KAAK;AAAA,MAC9B,wCAAoB;AAAA,MACpB;AAAA,IACD;AAEA,UAAM,aAAa,KAAK,YAAY,EAAE;AACtC,UAAM,YAAY,KAAK,iBAAiB,aAAa,CAAC;AAEtD,UAAM,uBAAuB,yDAAyB,YAAY,YAAY,KAAK,MAAM;AACzF,UAAM,sBAAsB,MAAM,qBAAqB;AAAA,MACtD,GAAG,UAAU,KAAK,SAAS;AAAA,IAC5B;AAEA,WAAO;AAAA,MACN,cAAU,8BAAW,qBAAqB,IAAI;AAAA,IAC/C;AAAA,EACD;AACD;","names":[]}