{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreMilvus/VectorStoreMilvus.node.ts"],"sourcesContent":["import { Milvus } from '@langchain/community/vectorstores/milvus';\nimport type { MilvusLibArgs } from '@langchain/community/vectorstores/milvus';\nimport { MilvusClient } from '@zilliz/milvus2-sdk-node';\nimport type { INodeProperties } from 'n8n-workflow';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\nimport { milvusCollectionsSearch } from '../shared/createVectorStoreNode/methods/listSearch';\nimport { milvusCollectionRLC } from '../shared/descriptions';\n\nconst sharedFields: INodeProperties[] = [milvusCollectionRLC];\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add Option',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Clear Collection',\n\t\t\t\tname: 'clearCollection',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to clear the collection before inserting new data',\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport class VectorStoreMilvus extends createVectorStoreNode<Milvus>({\n\tmeta: {\n\t\tdisplayName: 'Milvus Vector Store',\n\t\tname: 'vectorStoreMilvus',\n\t\tdescription: 'Work with your data in Milvus Vector Store',\n\t\ticon: { light: 'file:milvus-icon-black.svg', dark: 'file:milvus-icon-white.svg' },\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoremilvus/',\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'milvusApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\toperationModes: ['load', 'insert', 'retrieve', 'retrieve-as-tool'],\n\t},\n\tmethods: { listSearch: { milvusCollectionsSearch } },\n\tsharedFields,\n\tinsertFields,\n\tasync getVectorStoreClient(context, _filter, embeddings, itemIndex): Promise<Milvus> {\n\t\tconst collection = context.getNodeParameter('milvusCollection', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst credentials = await context.getCredentials<{\n\t\t\tbaseUrl: string;\n\t\t\tusername: string;\n\t\t\tpassword: string;\n\t\t}>('milvusApi');\n\t\tconst config: MilvusLibArgs = {\n\t\t\turl: credentials.baseUrl,\n\t\t\tusername: credentials.username,\n\t\t\tpassword: credentials.password,\n\t\t\tcollectionName: collection,\n\t\t};\n\n\t\treturn await Milvus.fromExistingCollection(embeddings, config);\n\t},\n\tasync populateVectorStore(context, embeddings, documents, itemIndex): Promise<void> {\n\t\tconst collection = context.getNodeParameter('milvusCollection', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\t\tconst options = context.getNodeParameter('options', itemIndex, {}) as {\n\t\t\tclearCollection?: boolean;\n\t\t};\n\t\tconst credentials = await context.getCredentials<{\n\t\t\tbaseUrl: string;\n\t\t\tusername: string;\n\t\t\tpassword: string;\n\t\t}>('milvusApi');\n\t\tconst config: MilvusLibArgs = {\n\t\t\turl: credentials.baseUrl,\n\t\t\tusername: credentials.username,\n\t\t\tpassword: credentials.password,\n\t\t\tcollectionName: collection,\n\t\t};\n\n\t\tif (options.clearCollection) {\n\t\t\tconst client = new MilvusClient({\n\t\t\t\taddress: credentials.baseUrl,\n\t\t\t\ttoken: `${credentials.username}:${credentials.password}`,\n\t\t\t});\n\t\t\tawait client.dropCollection({ collection_name: collection });\n\t\t}\n\n\t\tawait Milvus.fromDocuments(documents, embeddings, config);\n\t},\n}) {}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAuB;AAEvB,8BAA6B;AAG7B,mCAAsC;AACtC,wBAAwC;AACxC,0BAAoC;AAEpC,MAAM,eAAkC,CAAC,uCAAmB;AAC5D,MAAM,eAAkC;AAAA,EACvC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AACD;AAEO,MAAM,8BAA0B,oDAA8B;AAAA,EACpE,MAAM;AAAA,IACL,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,EAAE,OAAO,8BAA8B,MAAM,6BAA6B;AAAA,IAChF,SACC;AAAA,IACD,aAAa;AAAA,MACZ;AAAA,QACC,MAAM;AAAA,QACN,UAAU;AAAA,MACX;AAAA,IACD;AAAA,IACA,gBAAgB,CAAC,QAAQ,UAAU,YAAY,kBAAkB;AAAA,EAClE;AAAA,EACA,SAAS,EAAE,YAAY,EAAE,mEAAwB,EAAE;AAAA,EACnD;AAAA,EACA;AAAA,EACA,MAAM,qBAAqB,SAAS,SAAS,YAAY,WAA4B;AACpF,UAAM,aAAa,QAAQ,iBAAiB,oBAAoB,WAAW,IAAI;AAAA,MAC9E,cAAc;AAAA,IACf,CAAC;AACD,UAAM,cAAc,MAAM,QAAQ,eAI/B,WAAW;AACd,UAAM,SAAwB;AAAA,MAC7B,KAAK,YAAY;AAAA,MACjB,UAAU,YAAY;AAAA,MACtB,UAAU,YAAY;AAAA,MACtB,gBAAgB;AAAA,IACjB;AAEA,WAAO,MAAM,qBAAO,uBAAuB,YAAY,MAAM;AAAA,EAC9D;AAAA,EACA,MAAM,oBAAoB,SAAS,YAAY,WAAW,WAA0B;AACnF,UAAM,aAAa,QAAQ,iBAAiB,oBAAoB,WAAW,IAAI;AAAA,MAC9E,cAAc;AAAA,IACf,CAAC;AACD,UAAM,UAAU,QAAQ,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAGjE,UAAM,cAAc,MAAM,QAAQ,eAI/B,WAAW;AACd,UAAM,SAAwB;AAAA,MAC7B,KAAK,YAAY;AAAA,MACjB,UAAU,YAAY;AAAA,MACtB,UAAU,YAAY;AAAA,MACtB,gBAAgB;AAAA,IACjB;AAEA,QAAI,QAAQ,iBAAiB;AAC5B,YAAM,SAAS,IAAI,qCAAa;AAAA,QAC/B,SAAS,YAAY;AAAA,QACrB,OAAO,GAAG,YAAY,QAAQ,IAAI,YAAY,QAAQ;AAAA,MACvD,CAAC;AACD,YAAM,OAAO,eAAe,EAAE,iBAAiB,WAAW,CAAC;AAAA,IAC5D;AAEA,UAAM,qBAAO,cAAc,WAAW,YAAY,MAAM;AAAA,EACzD;AACD,CAAC,EAAE;AAAC;","names":[]}