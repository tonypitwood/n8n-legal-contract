{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreQdrant/Qdrant.utils.ts"],"sourcesContent":["import { QdrantClient } from '@qdrant/js-client-rest';\nimport { UserError } from 'n8n-workflow';\n\nexport type QdrantCredential = {\n\tqdrantUrl: string;\n\tapiKey: string;\n};\n\nfunction parseQdrantUrl(url: string): { protocol: string; host: string; port: number } {\n\ttry {\n\t\tconst parsedUrl = new URL(url);\n\t\treturn {\n\t\t\tprotocol: parsedUrl.protocol,\n\t\t\thost: parsedUrl.hostname,\n\t\t\tport: parsedUrl.port\n\t\t\t\t? parseInt(parsedUrl.port, 10)\n\t\t\t\t: parsedUrl.protocol === 'https:'\n\t\t\t\t\t? 443\n\t\t\t\t\t: 80,\n\t\t};\n\t} catch (error) {\n\t\tthrow new UserError(\n\t\t\t`Invalid Qdrant URL: ${url}. Please provide a valid URL with protocol (http/https)`,\n\t\t);\n\t}\n}\n\nexport function createQdrantClient(credentials: QdrantCredential): QdrantClient {\n\tconst { protocol, host, port } = parseQdrantUrl(credentials.qdrantUrl);\n\n\tconst qdrantClient = new QdrantClient({\n\t\thost,\n\t\tapiKey: credentials.apiKey,\n\t\thttps: protocol === 'https:',\n\t\tport,\n\t});\n\n\treturn qdrantClient;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA6B;AAC7B,0BAA0B;AAO1B,SAAS,eAAe,KAA+D;AACtF,MAAI;AACH,UAAM,YAAY,IAAI,IAAI,GAAG;AAC7B,WAAO;AAAA,MACN,UAAU,UAAU;AAAA,MACpB,MAAM,UAAU;AAAA,MAChB,MAAM,UAAU,OACb,SAAS,UAAU,MAAM,EAAE,IAC3B,UAAU,aAAa,WACtB,MACA;AAAA,IACL;AAAA,EACD,SAAS,OAAO;AACf,UAAM,IAAI;AAAA,MACT,uBAAuB,GAAG;AAAA,IAC3B;AAAA,EACD;AACD;AAEO,SAAS,mBAAmB,aAA6C;AAC/E,QAAM,EAAE,UAAU,MAAM,KAAK,IAAI,eAAe,YAAY,SAAS;AAErE,QAAM,eAAe,IAAI,mCAAa;AAAA,IACrC;AAAA,IACA,QAAQ,YAAY;AAAA,IACpB,OAAO,aAAa;AAAA,IACpB;AAAA,EACD,CAAC;AAED,SAAO;AACR;","names":[]}