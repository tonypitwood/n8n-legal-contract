{"version":3,"sources":["../../../../nodes/vector_store/VectorStoreInMemory/VectorStoreInMemory.node.ts"],"sourcesContent":["import type { Embeddings } from '@langchain/core/embeddings';\nimport type { MemoryVectorStore } from 'langchain/vectorstores/memory';\nimport {\n\ttype INodeProperties,\n\ttype ILoadOptionsFunctions,\n\ttype INodeListSearchResult,\n\ttype IDataObject,\n\ttype NodeParameterValueType,\n\ttype IExecuteFunctions,\n\ttype ISupplyDataFunctions,\n\tApplicationError,\n} from 'n8n-workflow';\n\nimport { createVectorStoreNode } from '../shared/createVectorStoreNode/createVectorStoreNode';\nimport { MemoryVectorStoreManager } from '../shared/MemoryManager/MemoryVectorStoreManager';\n\nconst warningBanner: INodeProperties = {\n\tdisplayName:\n\t\t'<strong>For experimental use only</strong>: Data is stored in memory and will be lost if n8n restarts. Data may also be cleared if available memory gets low, and is accessible to all users of this instance. <a href=\"https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/\">More info</a>',\n\tname: 'notice',\n\ttype: 'notice',\n\tdefault: '',\n};\n\nconst insertFields: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Clear Store',\n\t\tname: 'clearStore',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to clear the store before inserting new data',\n\t},\n\twarningBanner,\n];\n\nconst DEFAULT_MEMORY_KEY = 'vector_store_key';\n\nfunction getMemoryKey(context: IExecuteFunctions | ISupplyDataFunctions, itemIndex: number) {\n\tconst node = context.getNode();\n\tif (node.typeVersion <= 1.1) {\n\t\tconst memoryKeyParam = context.getNodeParameter('memoryKey', itemIndex) as string;\n\t\tconst workflowId = context.getWorkflow().id;\n\n\t\treturn `${workflowId}__${memoryKeyParam}`;\n\t} else {\n\t\tconst memoryKeyParam = context.getNodeParameter('memoryKey', itemIndex) as {\n\t\t\tmode: string;\n\t\t\tvalue: string;\n\t\t};\n\n\t\treturn memoryKeyParam.value;\n\t}\n}\n\nexport class VectorStoreInMemory extends createVectorStoreNode<MemoryVectorStore>({\n\tmeta: {\n\t\tdisplayName: 'Simple Vector Store',\n\t\tname: 'vectorStoreInMemory',\n\t\tdescription: 'The easiest way to experiment with vector stores, without external setup.',\n\t\ticon: 'fa:database',\n\t\ticonColor: 'black',\n\t\tdocsUrl:\n\t\t\t'https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/',\n\t\tcategories: ['AI'],\n\t\tsubcategories: {\n\t\t\tAI: ['Vector Stores', 'Tools', 'Root Nodes'],\n\t\t\t'Vector Stores': ['For Beginners'],\n\t\t\tTools: ['Other Tools'],\n\t\t},\n\t},\n\tsharedFields: [\n\t\t{\n\t\t\tdisplayName: 'Memory Key',\n\t\t\tname: 'memoryKey',\n\t\t\ttype: 'string',\n\t\t\tdefault: DEFAULT_MEMORY_KEY,\n\t\t\tdescription:\n\t\t\t\t'The key to use to store the vector memory in the workflow data. The key will be prefixed with the workflow ID to avoid collisions.',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'@version': [{ _cnd: { lte: 1.1 } }],\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tdisplayName: 'Memory Key',\n\t\t\tname: 'memoryKey',\n\t\t\ttype: 'resourceLocator',\n\t\t\trequired: true,\n\t\t\tdefault: { mode: 'list', value: DEFAULT_MEMORY_KEY },\n\t\t\tdescription:\n\t\t\t\t'The key to use to store the vector memory in the workflow data. These keys are shared between workflows.',\n\t\t\tdisplayOptions: {\n\t\t\t\tshow: {\n\t\t\t\t\t'@version': [{ _cnd: { gte: 1.2 } }],\n\t\t\t\t},\n\t\t\t},\n\t\t\tmodes: [\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\tname: 'list',\n\t\t\t\t\ttype: 'list',\n\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\tsearchListMethod: 'vectorStoresSearch',\n\t\t\t\t\t\tsearchable: true,\n\t\t\t\t\t\tallowNewResource: {\n\t\t\t\t\t\t\tlabel: 'resourceLocator.mode.list.addNewResource.vectorStoreInMemory',\n\t\t\t\t\t\t\tdefaultName: DEFAULT_MEMORY_KEY,\n\t\t\t\t\t\t\tmethod: 'createVectorStore',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdisplayName: 'Manual',\n\t\t\t\t\tname: 'id',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tplaceholder: DEFAULT_MEMORY_KEY,\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n\tmethods: {\n\t\tlistSearch: {\n\t\t\tasync vectorStoresSearch(\n\t\t\t\tthis: ILoadOptionsFunctions,\n\t\t\t\tfilter?: string,\n\t\t\t): Promise<INodeListSearchResult> {\n\t\t\t\tconst vectorStoreSingleton = MemoryVectorStoreManager.getInstance(\n\t\t\t\t\t{} as Embeddings, // Real Embeddings are provided when executing the node\n\t\t\t\t\tthis.logger,\n\t\t\t\t);\n\n\t\t\t\tconst searchOptions: INodeListSearchResult['results'] = vectorStoreSingleton\n\t\t\t\t\t.getMemoryKeysList()\n\t\t\t\t\t.map((key) => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname: key,\n\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\n\t\t\t\tlet results = searchOptions;\n\t\t\t\tif (filter) {\n\t\t\t\t\tresults = results.filter((option) => option.name.includes(filter));\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tresults,\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t\tactionHandler: {\n\t\t\tasync createVectorStore(\n\t\t\t\tthis: ILoadOptionsFunctions,\n\t\t\t\tpayload: string | IDataObject | undefined,\n\t\t\t): Promise<NodeParameterValueType> {\n\t\t\t\tif (!payload || typeof payload === 'string') {\n\t\t\t\t\tthrow new ApplicationError('Invalid payload type');\n\t\t\t\t}\n\n\t\t\t\tconst { name } = payload;\n\n\t\t\t\tconst vectorStoreSingleton = MemoryVectorStoreManager.getInstance(\n\t\t\t\t\t{} as Embeddings, // Real Embeddings are provided when executing the node\n\t\t\t\t\tthis.logger,\n\t\t\t\t);\n\n\t\t\t\tconst memoryKey = name ? (name as string) : DEFAULT_MEMORY_KEY;\n\t\t\t\tawait vectorStoreSingleton.getVectorStore(memoryKey);\n\n\t\t\t\treturn memoryKey;\n\t\t\t},\n\t\t},\n\t},\n\tinsertFields,\n\tloadFields: [warningBanner],\n\tretrieveFields: [warningBanner],\n\tasync getVectorStoreClient(context, _filter, embeddings, itemIndex) {\n\t\tconst memoryKey = getMemoryKey(context, itemIndex);\n\t\tconst vectorStoreSingleton = MemoryVectorStoreManager.getInstance(embeddings, context.logger);\n\n\t\treturn await vectorStoreSingleton.getVectorStore(memoryKey);\n\t},\n\tasync populateVectorStore(context, embeddings, documents, itemIndex) {\n\t\tconst memoryKey = getMemoryKey(context, itemIndex);\n\t\tconst clearStore = context.getNodeParameter('clearStore', itemIndex) as boolean;\n\t\tconst vectorStoreInstance = MemoryVectorStoreManager.getInstance(embeddings, context.logger);\n\n\t\tawait vectorStoreInstance.addDocuments(memoryKey, documents, clearStore);\n\t},\n}) {}\n"],"mappings":"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","names":[]}