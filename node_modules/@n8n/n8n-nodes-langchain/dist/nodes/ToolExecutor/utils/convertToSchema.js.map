{"version":3,"sources":["../../../../nodes/ToolExecutor/utils/convertToSchema.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport const convertValueBySchema = (value: unknown, schema: any): unknown => {\n\tif (!schema || !value) return value;\n\n\tif (typeof value === 'string') {\n\t\tif (schema instanceof z.ZodNumber) {\n\t\t\treturn Number(value);\n\t\t} else if (schema instanceof z.ZodBoolean) {\n\t\t\treturn value.toLowerCase() === 'true';\n\t\t} else if (schema instanceof z.ZodObject) {\n\t\t\ttry {\n\t\t\t\tconst parsed = JSON.parse(value);\n\t\t\t\treturn convertValueBySchema(parsed, schema);\n\t\t\t} catch {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (schema instanceof z.ZodObject && typeof value === 'object' && value !== null) {\n\t\tconst result: any = {};\n\t\tfor (const [key, val] of Object.entries(value)) {\n\t\t\tconst fieldSchema = schema.shape[key];\n\t\t\tif (fieldSchema) {\n\t\t\t\tresult[key] = convertValueBySchema(val, fieldSchema);\n\t\t\t} else {\n\t\t\t\tresult[key] = val;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\treturn value;\n};\n\nexport const convertObjectBySchema = (obj: any, schema: any): any => {\n\treturn convertValueBySchema(obj, schema);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAkB;AAEX,MAAM,uBAAuB,CAAC,OAAgB,WAAyB;AAC7E,MAAI,CAAC,UAAU,CAAC,MAAO,QAAO;AAE9B,MAAI,OAAO,UAAU,UAAU;AAC9B,QAAI,kBAAkB,aAAE,WAAW;AAClC,aAAO,OAAO,KAAK;AAAA,IACpB,WAAW,kBAAkB,aAAE,YAAY;AAC1C,aAAO,MAAM,YAAY,MAAM;AAAA,IAChC,WAAW,kBAAkB,aAAE,WAAW;AACzC,UAAI;AACH,cAAM,SAAS,KAAK,MAAM,KAAK;AAC/B,eAAO,qBAAqB,QAAQ,MAAM;AAAA,MAC3C,QAAQ;AACP,eAAO;AAAA,MACR;AAAA,IACD;AAAA,EACD;AAEA,MAAI,kBAAkB,aAAE,aAAa,OAAO,UAAU,YAAY,UAAU,MAAM;AACjF,UAAM,SAAc,CAAC;AACrB,eAAW,CAAC,KAAK,GAAG,KAAK,OAAO,QAAQ,KAAK,GAAG;AAC/C,YAAM,cAAc,OAAO,MAAM,GAAG;AACpC,UAAI,aAAa;AAChB,eAAO,GAAG,IAAI,qBAAqB,KAAK,WAAW;AAAA,MACpD,OAAO;AACN,eAAO,GAAG,IAAI;AAAA,MACf;AAAA,IACD;AACA,WAAO;AAAA,EACR;AAEA,SAAO;AACR;AAEO,MAAM,wBAAwB,CAAC,KAAU,WAAqB;AACpE,SAAO,qBAAqB,KAAK,MAAM;AACxC;","names":[]}