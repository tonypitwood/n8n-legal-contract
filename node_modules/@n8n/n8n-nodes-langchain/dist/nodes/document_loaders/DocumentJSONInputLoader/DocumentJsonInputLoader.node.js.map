{"version":3,"sources":["../../../../nodes/document_loaders/DocumentJSONInputLoader/DocumentJsonInputLoader.node.ts"],"sourcesContent":["import type { TextSplitter } from '@langchain/textsplitters';\nimport {\n\tNodeConnectionTypes,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype ISupplyDataFunctions,\n\ttype SupplyData,\n} from 'n8n-workflow';\n\nimport { logWrapper } from '@utils/logWrapper';\nimport { N8nJsonLoader } from '@utils/N8nJsonLoader';\nimport { getConnectionHintNoticeField, metadataFilterField } from '@utils/sharedFields';\n\nexport class DocumentJsonInputLoader implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\t// This node is deprecated and will be removed in the future.\n\t\t// The functionality was merged with the `DocumentBinaryInputLoader` to `DocumentDefaultDataLoader`\n\t\thidden: true,\n\t\tdisplayName: 'JSON Input Loader',\n\t\tname: 'documentJsonInputLoader',\n\t\ticon: 'file:json.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Use JSON data from a previous step in the workflow',\n\t\tdefaults: {\n\t\t\tname: 'JSON Input Loader',\n\t\t},\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Document Loaders'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.documentdefaultdataloader/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Text Splitter',\n\t\t\t\tmaxConnections: 1,\n\t\t\t\ttype: NodeConnectionTypes.AiTextSplitter,\n\t\t\t},\n\t\t],\n\t\tinputNames: ['Text Splitter'],\n\n\t\toutputs: [NodeConnectionTypes.AiDocument],\n\t\toutputNames: ['Document'],\n\t\tproperties: [\n\t\t\tgetConnectionHintNoticeField([NodeConnectionTypes.AiVectorStore]),\n\t\t\t{\n\t\t\t\tdisplayName: 'Pointers',\n\t\t\t\tname: 'pointers',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription: 'Pointers to extract from JSON, e.g. \"/text\" or \"/text, /meta/title\"',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\ttype: 'collection',\n\t\t\t\tplaceholder: 'Add Option',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\t...metadataFilterField,\n\t\t\t\t\t\tdisplayName: 'Metadata',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Metadata to add to each document. Could be used for filtering during retrieval',\n\t\t\t\t\t\tplaceholder: 'Add property',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync supplyData(this: ISupplyDataFunctions): Promise<SupplyData> {\n\t\tthis.logger.debug('Supply Data for JSON Input Loader');\n\t\tconst textSplitter = (await this.getInputConnectionData(\n\t\t\tNodeConnectionTypes.AiTextSplitter,\n\t\t\t0,\n\t\t)) as TextSplitter | undefined;\n\n\t\tconst processor = new N8nJsonLoader(this, undefined, textSplitter);\n\n\t\treturn {\n\t\t\tresponse: logWrapper(processor, this),\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAMO;AAEP,wBAA2B;AAC3B,2BAA8B;AAC9B,0BAAkE;AAE3D,MAAM,wBAA6C;AAAA,EAAnD;AACN,uBAAoC;AAAA;AAAA;AAAA,MAGnC,QAAQ;AAAA,MACR,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,OAAO,CAAC,WAAW;AAAA,MACnB,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,OAAO;AAAA,QACN,YAAY,CAAC,IAAI;AAAA,QACjB,eAAe;AAAA,UACd,IAAI,CAAC,kBAAkB;AAAA,QACxB;AAAA,QACA,WAAW;AAAA,UACV,sBAAsB;AAAA,YACrB;AAAA,cACC,KAAK;AAAA,YACN;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MAEA,QAAQ;AAAA,QACP;AAAA,UACC,aAAa;AAAA,UACb,gBAAgB;AAAA,UAChB,MAAM,wCAAoB;AAAA,QAC3B;AAAA,MACD;AAAA,MACA,YAAY,CAAC,eAAe;AAAA,MAE5B,SAAS,CAAC,wCAAoB,UAAU;AAAA,MACxC,aAAa,CAAC,UAAU;AAAA,MACxB,YAAY;AAAA,YACX,kDAA6B,CAAC,wCAAoB,aAAa,CAAC;AAAA,QAChE;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,SAAS;AAAA,UACT,aAAa;AAAA,QACd;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,SAAS,CAAC;AAAA,UACV,SAAS;AAAA,YACR;AAAA,cACC,GAAG;AAAA,cACH,aAAa;AAAA,cACb,aACC;AAAA,cACD,aAAa;AAAA,YACd;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,aAA4D;AACjE,SAAK,OAAO,MAAM,mCAAmC;AACrD,UAAM,eAAgB,MAAM,KAAK;AAAA,MAChC,wCAAoB;AAAA,MACpB;AAAA,IACD;AAEA,UAAM,YAAY,IAAI,mCAAc,MAAM,QAAW,YAAY;AAEjE,WAAO;AAAA,MACN,cAAU,8BAAW,WAAW,IAAI;AAAA,IACrC;AAAA,EACD;AACD;","names":[]}