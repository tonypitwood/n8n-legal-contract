{"version":3,"sources":["../../../../../../nodes/vendors/GoogleGemini/actions/video/generate.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { NodeOperationError, updateDisplayOptions } from 'n8n-workflow';\n\nimport type { VeoResponse } from '../../helpers/interfaces';\nimport { downloadFile } from '../../helpers/utils';\nimport { apiRequest } from '../../transport';\nimport { modelRLC } from '../descriptions';\n\nconst properties: INodeProperties[] = [\n\tmodelRLC('videoGenerationModelSearch'),\n\t{\n\t\tdisplayName: 'Prompt',\n\t\tname: 'prompt',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. Panning wide shot of a calico kitten sleeping in the sunshine',\n\t\tdescription: 'A text description of the desired video',\n\t\tdefault: '',\n\t\ttypeOptions: {\n\t\t\trows: 2,\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Return As',\n\t\tname: 'returnAs',\n\t\ttype: 'options',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'Video',\n\t\t\t\tvalue: 'video',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'URL',\n\t\t\t\tvalue: 'url',\n\t\t\t},\n\t\t],\n\t\tdescription:\n\t\t\t'Whether to return the video as a binary file or a URL that can be used to download the video later',\n\t\tdefault: 'video',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Number of Videos',\n\t\t\t\tname: 'sampleCount',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 1,\n\t\t\t\tdescription: 'How many videos to generate',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tmaxValue: 4,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Duration (Seconds)',\n\t\t\t\tname: 'durationSeconds',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 8,\n\t\t\t\tdescription: 'Length of the generated video in seconds. Supported only by certain models.',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 5,\n\t\t\t\t\tmaxValue: 8,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Aspect Ratio',\n\t\t\t\tname: 'aspectRatio',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Widescreen (16:9)',\n\t\t\t\t\t\tvalue: '16:9',\n\t\t\t\t\t\tdescription: 'Most common aspect ratio for televisions and monitors',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Portrait (9:16)',\n\t\t\t\t\t\tvalue: '9:16',\n\t\t\t\t\t\tdescription: 'Popular for short-form videos like YouTube Shorts',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: '16:9',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Person Generation',\n\t\t\t\tname: 'personGeneration',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: \"Don't Allow\",\n\t\t\t\t\t\tvalue: 'dont_allow',\n\t\t\t\t\t\tdescription: 'Prevent generation of people in the video',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Allow Adult',\n\t\t\t\t\t\tvalue: 'allow_adult',\n\t\t\t\t\t\tdescription: 'Allow generation of adult people in the video',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Allow All',\n\t\t\t\t\t\tvalue: 'allow_all',\n\t\t\t\t\t\tdescription: 'Allow generation of all people in the video',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'dont_allow',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output in Field',\n\t\t\t\tname: 'binaryPropertyOutput',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\thint: 'The name of the output field to put the binary file data in',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['generate'],\n\t\tresource: ['video'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst model = this.getNodeParameter('modelId', i, '', { extractValue: true }) as string;\n\tconst prompt = this.getNodeParameter('prompt', i, '') as string;\n\tconst returnAs = this.getNodeParameter('returnAs', i, 'video');\n\tconst options = this.getNodeParameter('options', i, {});\n\tconst binaryPropertyOutput = this.getNodeParameter(\n\t\t'options.binaryPropertyOutput',\n\t\ti,\n\t\t'data',\n\t) as string;\n\tconst credentials = await this.getCredentials('googlePalmApi');\n\n\tif (!model.includes('veo')) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t`Model ${model} is not supported for video generation. Please use a Veo model`,\n\t\t\t{\n\t\t\t\tdescription: 'Video generation is only supported by Veo models',\n\t\t\t},\n\t\t);\n\t}\n\n\tconst body = {\n\t\tinstances: [\n\t\t\t{\n\t\t\t\tprompt,\n\t\t\t},\n\t\t],\n\t\tparameters: {\n\t\t\taspectRatio: options.aspectRatio,\n\t\t\tpersonGeneration: options.personGeneration,\n\t\t\tsampleCount: options.sampleCount ?? 1,\n\t\t\tdurationSeconds: options.durationSeconds,\n\t\t},\n\t};\n\tlet response = (await apiRequest.call(this, 'POST', `/v1beta/${model}:predictLongRunning`, {\n\t\tbody,\n\t})) as VeoResponse;\n\n\twhile (!response.done) {\n\t\tawait new Promise((resolve) => setTimeout(resolve, 5000));\n\t\tresponse = (await apiRequest.call(this, 'GET', `/v1beta/${response.name}`)) as VeoResponse;\n\t}\n\n\tif (response.error) {\n\t\tthrow new NodeOperationError(this.getNode(), response.error.message, {\n\t\t\tdescription: 'Error generating video',\n\t\t});\n\t}\n\n\tif (returnAs === 'video') {\n\t\tconst promises = response.response.generateVideoResponse.generatedSamples.map(\n\t\t\tasync (sample) => {\n\t\t\t\tconst { fileContent, mimeType } = await downloadFile.call(\n\t\t\t\t\tthis,\n\t\t\t\t\tsample.video.uri,\n\t\t\t\t\t'video/mp4',\n\t\t\t\t\t{\n\t\t\t\t\t\tkey: credentials.apiKey as string,\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tconst binaryData = await this.helpers.prepareBinaryData(fileContent, 'video.mp4', mimeType);\n\t\t\t\treturn {\n\t\t\t\t\tbinary: { [binaryPropertyOutput]: binaryData },\n\t\t\t\t\tjson: {\n\t\t\t\t\t\t...binaryData,\n\t\t\t\t\t\tdata: undefined,\n\t\t\t\t\t},\n\t\t\t\t\tpairedItem: { item: i },\n\t\t\t\t};\n\t\t\t},\n\t\t);\n\n\t\treturn await Promise.all(promises);\n\t} else {\n\t\treturn response.response.generateVideoResponse.generatedSamples.map((sample) => ({\n\t\t\tjson: {\n\t\t\t\turl: sample.video.uri,\n\t\t\t},\n\t\t\tpairedItem: { item: i },\n\t\t}));\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAyD;AAGzD,mBAA6B;AAC7B,uBAA2B;AAC3B,0BAAyB;AAEzB,MAAM,aAAgC;AAAA,MACrC,8BAAS,4BAA4B;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,IACT,aAAa;AAAA,MACZ,MAAM;AAAA,IACP;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,MACR;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,MACA;AAAA,QACC,MAAM;AAAA,QACN,OAAO;AAAA,MACR;AAAA,IACD;AAAA,IACA,aACC;AAAA,IACD,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aAAa;AAAA,UACZ,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aAAa;AAAA,QACb,aAAa;AAAA,UACZ,UAAU;AAAA,UACV,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,QACD;AAAA,QACA,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,QACD;AAAA,QACA,SAAS;AAAA,MACV;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,WAAW,CAAC,UAAU;AAAA,IACtB,UAAU,CAAC,OAAO;AAAA,EACnB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,QAAQ,KAAK,iBAAiB,WAAW,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAC5E,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,EAAE;AACpD,QAAM,WAAW,KAAK,iBAAiB,YAAY,GAAG,OAAO;AAC7D,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AACtD,QAAM,uBAAuB,KAAK;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,QAAM,cAAc,MAAM,KAAK,eAAe,eAAe;AAE7D,MAAI,CAAC,MAAM,SAAS,KAAK,GAAG;AAC3B,UAAM,IAAI;AAAA,MACT,KAAK,QAAQ;AAAA,MACb,SAAS,KAAK;AAAA,MACd;AAAA,QACC,aAAa;AAAA,MACd;AAAA,IACD;AAAA,EACD;AAEA,QAAM,OAAO;AAAA,IACZ,WAAW;AAAA,MACV;AAAA,QACC;AAAA,MACD;AAAA,IACD;AAAA,IACA,YAAY;AAAA,MACX,aAAa,QAAQ;AAAA,MACrB,kBAAkB,QAAQ;AAAA,MAC1B,aAAa,QAAQ,eAAe;AAAA,MACpC,iBAAiB,QAAQ;AAAA,IAC1B;AAAA,EACD;AACA,MAAI,WAAY,MAAM,4BAAW,KAAK,MAAM,QAAQ,WAAW,KAAK,uBAAuB;AAAA,IAC1F;AAAA,EACD,CAAC;AAED,SAAO,CAAC,SAAS,MAAM;AACtB,UAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,GAAI,CAAC;AACxD,eAAY,MAAM,4BAAW,KAAK,MAAM,OAAO,WAAW,SAAS,IAAI,EAAE;AAAA,EAC1E;AAEA,MAAI,SAAS,OAAO;AACnB,UAAM,IAAI,uCAAmB,KAAK,QAAQ,GAAG,SAAS,MAAM,SAAS;AAAA,MACpE,aAAa;AAAA,IACd,CAAC;AAAA,EACF;AAEA,MAAI,aAAa,SAAS;AACzB,UAAM,WAAW,SAAS,SAAS,sBAAsB,iBAAiB;AAAA,MACzE,OAAO,WAAW;AACjB,cAAM,EAAE,aAAa,SAAS,IAAI,MAAM,0BAAa;AAAA,UACpD;AAAA,UACA,OAAO,MAAM;AAAA,UACb;AAAA,UACA;AAAA,YACC,KAAK,YAAY;AAAA,UAClB;AAAA,QACD;AACA,cAAM,aAAa,MAAM,KAAK,QAAQ,kBAAkB,aAAa,aAAa,QAAQ;AAC1F,eAAO;AAAA,UACN,QAAQ,EAAE,CAAC,oBAAoB,GAAG,WAAW;AAAA,UAC7C,MAAM;AAAA,YACL,GAAG;AAAA,YACH,MAAM;AAAA,UACP;AAAA,UACA,YAAY,EAAE,MAAM,EAAE;AAAA,QACvB;AAAA,MACD;AAAA,IACD;AAEA,WAAO,MAAM,QAAQ,IAAI,QAAQ;AAAA,EAClC,OAAO;AACN,WAAO,SAAS,SAAS,sBAAsB,iBAAiB,IAAI,CAAC,YAAY;AAAA,MAChF,MAAM;AAAA,QACL,KAAK,OAAO,MAAM;AAAA,MACnB;AAAA,MACA,YAAY,EAAE,MAAM,EAAE;AAAA,IACvB,EAAE;AAAA,EACH;AACD;","names":[]}