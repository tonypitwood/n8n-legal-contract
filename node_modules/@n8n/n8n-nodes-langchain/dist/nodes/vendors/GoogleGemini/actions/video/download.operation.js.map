{"version":3,"sources":["../../../../../../nodes/vendors/GoogleGemini/actions/video/download.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { updateDisplayOptions } from 'n8n-workflow';\n\nimport { downloadFile } from '../../helpers/utils';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'URL',\n\t\tname: 'url',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. https://generativelanguage.googleapis.com/v1beta/files/abcdefg:download',\n\t\tdescription: 'The URL from Google Gemini API to download the video from',\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Put Output in Field',\n\t\t\t\tname: 'binaryPropertyOutput',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: 'data',\n\t\t\t\thint: 'The name of the output field to put the binary file data in',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['download'],\n\t\tresource: ['video'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst url = this.getNodeParameter('url', i, '') as string;\n\tconst binaryPropertyOutput = this.getNodeParameter(\n\t\t'options.binaryPropertyOutput',\n\t\ti,\n\t\t'data',\n\t) as string;\n\tconst credentials = await this.getCredentials('googlePalmApi');\n\tconst { fileContent, mimeType } = await downloadFile.call(this, url, 'video/mp4', {\n\t\tkey: credentials.apiKey as string,\n\t});\n\tconst binaryData = await this.helpers.prepareBinaryData(fileContent, 'video.mp4', mimeType);\n\treturn [\n\t\t{\n\t\t\tbinary: { [binaryPropertyOutput]: binaryData },\n\t\t\tjson: {\n\t\t\t\t...binaryData,\n\t\t\t\tdata: undefined,\n\t\t\t},\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAqC;AAErC,mBAA6B;AAE7B,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,EACV;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM;AAAA,IACN,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACP;AAAA,IACD;AAAA,EACD;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,WAAW,CAAC,UAAU;AAAA,IACtB,UAAU,CAAC,OAAO;AAAA,EACnB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,MAAM,KAAK,iBAAiB,OAAO,GAAG,EAAE;AAC9C,QAAM,uBAAuB,KAAK;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,EACD;AACA,QAAM,cAAc,MAAM,KAAK,eAAe,eAAe;AAC7D,QAAM,EAAE,aAAa,SAAS,IAAI,MAAM,0BAAa,KAAK,MAAM,KAAK,aAAa;AAAA,IACjF,KAAK,YAAY;AAAA,EAClB,CAAC;AACD,QAAM,aAAa,MAAM,KAAK,QAAQ,kBAAkB,aAAa,aAAa,QAAQ;AAC1F,SAAO;AAAA,IACN;AAAA,MACC,QAAQ,EAAE,CAAC,oBAAoB,GAAG,WAAW;AAAA,MAC7C,MAAM;AAAA,QACL,GAAG;AAAA,QACH,MAAM;AAAA,MACP;AAAA,MACA,YAAY,EAAE,MAAM,EAAE;AAAA,IACvB;AAAA,EACD;AACD;","names":[]}