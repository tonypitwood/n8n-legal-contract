{"version":3,"sources":["../../../../../nodes/vendors/GoogleGemini/helpers/baseAnalyze.ts"],"sourcesContent":["import {\n\tvalidateNodeParameters,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n} from 'n8n-workflow';\n\nimport type { Content, GenerateContentResponse } from './interfaces';\nimport { downloadFile, uploadFile } from './utils';\nimport { apiRequest } from '../transport';\n\nexport async function baseAnalyze(\n\tthis: IExecuteFunctions,\n\ti: number,\n\turlsPropertyName: string,\n\tfallbackMimeType: string,\n): Promise<INodeExecutionData[]> {\n\tconst model = this.getNodeParameter('modelId', i, '', { extractValue: true }) as string;\n\tconst inputType = this.getNodeParameter('inputType', i, 'url') as string;\n\tconst text = this.getNodeParameter('text', i, '') as string;\n\tconst simplify = this.getNodeParameter('simplify', i, true) as boolean;\n\tconst options = this.getNodeParameter('options', i, {});\n\tvalidateNodeParameters(\n\t\toptions,\n\t\t{ maxOutputTokens: { type: 'number', required: false } },\n\t\tthis.getNode(),\n\t);\n\tconst generationConfig = {\n\t\tmaxOutputTokens: options.maxOutputTokens,\n\t};\n\n\tlet contents: Content[];\n\tif (inputType === 'url') {\n\t\tconst urls = this.getNodeParameter(urlsPropertyName, i, '') as string;\n\t\tconst filesDataPromises = urls\n\t\t\t.split(',')\n\t\t\t.map((url) => url.trim())\n\t\t\t.filter((url) => url)\n\t\t\t.map(async (url) => {\n\t\t\t\tif (url.startsWith('https://generativelanguage.googleapis.com')) {\n\t\t\t\t\tconst { mimeType } = (await apiRequest.call(this, 'GET', '', {\n\t\t\t\t\t\toption: { url },\n\t\t\t\t\t})) as { mimeType: string };\n\t\t\t\t\treturn { fileUri: url, mimeType };\n\t\t\t\t} else {\n\t\t\t\t\tconst { fileContent, mimeType } = await downloadFile.call(this, url, fallbackMimeType);\n\t\t\t\t\treturn await uploadFile.call(this, fileContent, mimeType);\n\t\t\t\t}\n\t\t\t});\n\n\t\tconst filesData = await Promise.all(filesDataPromises);\n\t\tcontents = [\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tparts: filesData.map((fileData) => ({\n\t\t\t\t\tfileData,\n\t\t\t\t})),\n\t\t\t},\n\t\t];\n\t} else {\n\t\tconst binaryPropertyNames = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\tconst promises = binaryPropertyNames\n\t\t\t.split(',')\n\t\t\t.map((binaryPropertyName) => binaryPropertyName.trim())\n\t\t\t.filter((binaryPropertyName) => binaryPropertyName)\n\t\t\t.map(async (binaryPropertyName) => {\n\t\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\t\t\t\treturn await uploadFile.call(this, buffer, binaryData.mimeType);\n\t\t\t});\n\n\t\tconst filesData = await Promise.all(promises);\n\t\tcontents = [\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tparts: filesData.map((fileData) => ({\n\t\t\t\t\tfileData,\n\t\t\t\t})),\n\t\t\t},\n\t\t];\n\t}\n\n\tcontents[0].parts.push({ text });\n\n\tconst body = {\n\t\tcontents,\n\t\tgenerationConfig,\n\t};\n\n\tconst response = (await apiRequest.call(this, 'POST', `/v1beta/${model}:generateContent`, {\n\t\tbody,\n\t})) as GenerateContentResponse;\n\n\tif (simplify) {\n\t\treturn response.candidates.map((candidate) => ({\n\t\t\tjson: candidate,\n\t\t\tpairedItem: { item: i },\n\t\t}));\n\t}\n\n\treturn [\n\t\t{\n\t\t\tjson: { ...response },\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n"],"mappings":"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","names":[]}