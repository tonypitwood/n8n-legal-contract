{"version":3,"sources":["../../../../../nodes/vendors/GoogleGemini/helpers/utils.ts"],"sourcesContent":["import type { IDataObject, IExecuteFunctions } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport { apiRequest } from '../transport';\n\nimport axios from 'axios';\nimport type Stream from 'node:stream';\n\ninterface File {\n\tname: string;\n\turi: string;\n\tmimeType: string;\n\tstate: string;\n\terror?: { message: string };\n}\n\nconst CHUNK_SIZE = 256 * 1024;\n\nexport async function downloadFile(\n\tthis: IExecuteFunctions,\n\turl: string,\n\tfallbackMimeType?: string,\n\tqs?: IDataObject,\n) {\n\tconst downloadResponse = (await this.helpers.httpRequest({\n\t\tmethod: 'GET',\n\t\turl,\n\t\tqs,\n\t\treturnFullResponse: true,\n\t\tencoding: 'arraybuffer',\n\t})) as { body: ArrayBuffer; headers: IDataObject };\n\n\tconst mimeType =\n\t\t(downloadResponse.headers?.['content-type'] as string)?.split(';')?.[0] ?? fallbackMimeType;\n\tconst fileContent = Buffer.from(downloadResponse.body);\n\treturn {\n\t\tfileContent,\n\t\tmimeType,\n\t};\n}\n\nexport async function uploadFile(this: IExecuteFunctions, fileContent: Buffer, mimeType: string) {\n\tconst numBytes = fileContent.length.toString();\n\tconst uploadInitResponse = (await apiRequest.call(this, 'POST', '/upload/v1beta/files', {\n\t\theaders: {\n\t\t\t'X-Goog-Upload-Protocol': 'resumable',\n\t\t\t'X-Goog-Upload-Command': 'start',\n\t\t\t'X-Goog-Upload-Header-Content-Length': numBytes,\n\t\t\t'X-Goog-Upload-Header-Content-Type': mimeType,\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\toption: {\n\t\t\treturnFullResponse: true,\n\t\t},\n\t})) as { headers: IDataObject };\n\tconst uploadUrl = uploadInitResponse.headers['x-goog-upload-url'] as string;\n\n\tconst uploadResponse = (await this.helpers.httpRequest({\n\t\tmethod: 'POST',\n\t\turl: uploadUrl,\n\t\theaders: {\n\t\t\t'Content-Length': numBytes,\n\t\t\t'X-Goog-Upload-Offset': '0',\n\t\t\t'X-Goog-Upload-Command': 'upload, finalize',\n\t\t},\n\t\tbody: fileContent,\n\t})) as { file: File };\n\n\twhile (uploadResponse.file.state !== 'ACTIVE' && uploadResponse.file.state !== 'FAILED') {\n\t\tawait new Promise((resolve) => setTimeout(resolve, 1000));\n\t\tuploadResponse.file = (await apiRequest.call(\n\t\t\tthis,\n\t\t\t'GET',\n\t\t\t`/v1beta/${uploadResponse.file.name}`,\n\t\t)) as File;\n\t}\n\n\tif (uploadResponse.file.state === 'FAILED') {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\tuploadResponse.file.error?.message ?? 'Unknown error',\n\t\t\t{\n\t\t\t\tdescription: 'Error uploading file',\n\t\t\t},\n\t\t);\n\t}\n\n\treturn { fileUri: uploadResponse.file.uri, mimeType: uploadResponse.file.mimeType };\n}\n\nexport async function transferFile(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tdownloadUrl?: string,\n\tfallbackMimeType?: string,\n\tqs?: IDataObject,\n) {\n\tlet stream: Stream;\n\tlet mimeType: string;\n\n\tif (downloadUrl) {\n\t\tconst downloadResponse = await axios.get(downloadUrl, {\n\t\t\tparams: qs,\n\t\t\tresponseType: 'stream',\n\t\t});\n\n\t\tmimeType = downloadResponse.headers['content-type']?.split(';')?.[0] ?? fallbackMimeType;\n\t\tstream = downloadResponse.data;\n\t} else {\n\t\tconst binaryPropertyName = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\tif (!binaryPropertyName) {\n\t\t\tthrow new NodeOperationError(this.getNode(), 'Binary property name is required', {\n\t\t\t\tdescription: 'Error uploading file',\n\t\t\t});\n\t\t}\n\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\tif (!binaryData.id) {\n\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\t\t\treturn await uploadFile.call(this, buffer, binaryData.mimeType);\n\t\t} else {\n\t\t\tstream = await this.helpers.getBinaryStream(binaryData.id, CHUNK_SIZE);\n\t\t\tmimeType = binaryData.mimeType;\n\t\t}\n\t}\n\n\tconst uploadInitResponse = (await apiRequest.call(this, 'POST', '/upload/v1beta/files', {\n\t\theaders: {\n\t\t\t'X-Goog-Upload-Protocol': 'resumable',\n\t\t\t'X-Goog-Upload-Command': 'start',\n\t\t\t'X-Goog-Upload-Header-Content-Type': mimeType,\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\toption: { returnFullResponse: true },\n\t})) as { headers: IDataObject };\n\n\tconst uploadUrl = uploadInitResponse.headers['x-goog-upload-url'] as string;\n\tif (!uploadUrl) {\n\t\tthrow new NodeOperationError(this.getNode(), 'Failed to get upload URL');\n\t}\n\n\tconst uploadResponse = (await this.helpers.httpRequest({\n\t\tmethod: 'POST',\n\t\turl: uploadUrl,\n\t\theaders: {\n\t\t\t'X-Goog-Upload-Offset': '0',\n\t\t\t'X-Goog-Upload-Command': 'upload, finalize',\n\t\t\t'Content-Type': mimeType,\n\t\t},\n\t\tbody: stream,\n\t\treturnFullResponse: true,\n\t})) as { body: { file: File } };\n\n\tlet file = uploadResponse.body.file;\n\n\twhile (file.state !== 'ACTIVE' && file.state !== 'FAILED') {\n\t\tawait new Promise((resolve) => setTimeout(resolve, 1000));\n\t\tfile = (await apiRequest.call(this, 'GET', `/v1beta/${file.name}`)) as File;\n\t}\n\n\tif (file.state === 'FAILED') {\n\t\tthrow new NodeOperationError(this.getNode(), file.error?.message ?? 'Unknown error', {\n\t\t\tdescription: 'Error uploading file',\n\t\t});\n\t}\n\n\treturn { fileUri: file.uri, mimeType: file.mimeType };\n}\n"],"mappings":"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","names":["axios"]}