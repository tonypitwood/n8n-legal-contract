{"version":3,"sources":["../../../../../../nodes/vendors/Anthropic/actions/file/get.operation.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData, INodeProperties } from 'n8n-workflow';\nimport { updateDisplayOptions } from 'n8n-workflow';\n\nimport type { File } from '../../helpers/interfaces';\nimport { getBaseUrl } from '../../helpers/utils';\nimport { apiRequest } from '../../transport';\n\nexport const properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'File ID',\n\t\tname: 'fileId',\n\t\ttype: 'string',\n\t\tplaceholder: 'e.g. file_123',\n\t\tdescription: 'ID of the file to get metadata for',\n\t\tdefault: '',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['get'],\n\t\tresource: ['file'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst fileId = this.getNodeParameter('fileId', i, '') as string;\n\tconst baseUrl = await getBaseUrl.call(this);\n\tconst response = (await apiRequest.call(this, 'GET', `/v1/files/${fileId}`)) as File;\n\treturn [\n\t\t{\n\t\t\tjson: { ...response, url: `${baseUrl}/v1/files/${response.id}` },\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAqC;AAGrC,mBAA2B;AAC3B,uBAA2B;AAEpB,MAAM,aAAgC;AAAA,EAC5C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,aAAa;AAAA,IACb,SAAS;AAAA,EACV;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,WAAW,CAAC,KAAK;AAAA,IACjB,UAAU,CAAC,MAAM;AAAA,EAClB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,SAAS,KAAK,iBAAiB,UAAU,GAAG,EAAE;AACpD,QAAM,UAAU,MAAM,wBAAW,KAAK,IAAI;AAC1C,QAAM,WAAY,MAAM,4BAAW,KAAK,MAAM,OAAO,aAAa,MAAM,EAAE;AAC1E,SAAO;AAAA,IACN;AAAA,MACC,MAAM,EAAE,GAAG,UAAU,KAAK,GAAG,OAAO,aAAa,SAAS,EAAE,GAAG;AAAA,MAC/D,YAAY,EAAE,MAAM,EAAE;AAAA,IACvB;AAAA,EACD;AACD;","names":[]}