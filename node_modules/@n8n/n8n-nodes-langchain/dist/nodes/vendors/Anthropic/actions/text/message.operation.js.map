{"version":3,"sources":["../../../../../../nodes/vendors/Anthropic/actions/text/message.operation.ts"],"sourcesContent":["import type { Tool } from '@langchain/core/tools';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\nimport { NodeOperationError, updateDisplayOptions } from 'n8n-workflow';\nimport zodToJsonSchema from 'zod-to-json-schema';\n\nimport { getConnectedTools } from '@utils/helpers';\n\nimport type {\n\tContent,\n\tFile,\n\tMessage,\n\tMessagesResponse,\n\tTool as AnthropicTool,\n} from '../../helpers/interfaces';\nimport {\n\tdownloadFile,\n\tgetBaseUrl,\n\tgetMimeType,\n\tsplitByComma,\n\tuploadFile,\n} from '../../helpers/utils';\nimport { apiRequest } from '../../transport';\nimport { modelRLC } from '../descriptions';\n\nconst properties: INodeProperties[] = [\n\tmodelRLC,\n\t{\n\t\tdisplayName: 'Messages',\n\t\tname: 'messages',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tsortable: true,\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tplaceholder: 'Add Message',\n\t\tdefault: { values: [{ content: '', role: 'user' }] },\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Values',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Prompt',\n\t\t\t\t\t\tname: 'content',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: 'The content of the message to be sent',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tplaceholder: 'e.g. Hello, how can you help me?',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\trows: 2,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Role',\n\t\t\t\t\t\tname: 'role',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\"Role in shaping the model's response, it tells the model how it should behave and interact with the user\",\n\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t\t\t\tdescription: 'Send a message as a user and get a response from the model',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: 'Assistant',\n\t\t\t\t\t\t\t\tvalue: 'assistant',\n\t\t\t\t\t\t\t\tdescription: 'Tell the model to adopt a specific tone or personality',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t\tdefault: 'user',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t},\n\t{\n\t\tdisplayName: 'Add Attachments',\n\t\tname: 'addAttachments',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription: 'Whether to add attachments to the message',\n\t},\n\t{\n\t\tdisplayName: 'Attachments Input Type',\n\t\tname: 'attachmentsInputType',\n\t\ttype: 'options',\n\t\tdefault: 'url',\n\t\tdescription: 'The type of input to use for the attachments',\n\t\toptions: [\n\t\t\t{\n\t\t\t\tname: 'URL(s)',\n\t\t\t\tvalue: 'url',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Binary File(s)',\n\t\t\t\tvalue: 'binary',\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taddAttachments: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Attachment URL(s)',\n\t\tname: 'attachmentsUrls',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tplaceholder: 'e.g. https://example.com/image.png',\n\t\tdescription: 'URL(s) of the file(s) to attach, multiple URLs can be added separated by comma',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taddAttachments: [true],\n\t\t\t\tattachmentsInputType: ['url'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Attachment Input Data Field Name(s)',\n\t\tname: 'binaryPropertyName',\n\t\ttype: 'string',\n\t\tdefault: 'data',\n\t\tplaceholder: 'e.g. data',\n\t\tdescription:\n\t\t\t'Name of the binary field(s) which contains the file(s) to attach, multiple field names can be added separated by comma',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\taddAttachments: [true],\n\t\t\t\tattachmentsInputType: ['binary'],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Simplify Output',\n\t\tname: 'simplify',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tdescription: 'Whether to return a simplified version of the response instead of the raw data',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Include Merged Response',\n\t\t\t\tname: 'includeMergedResponse',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to include a single output string merging all text parts of the response',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'System Message',\n\t\t\t\tname: 'system',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tplaceholder: 'e.g. You are a helpful assistant',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Code Execution',\n\t\t\t\tname: 'codeExecution',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to enable code execution. Not supported by all models.',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Web Search',\n\t\t\t\tname: 'webSearch',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription: 'Whether to enable web search',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Web Search Max Uses',\n\t\t\t\tname: 'maxUses',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 5,\n\t\t\t\tdescription: 'The maximum number of web search uses per request',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Web Search Allowed Domains',\n\t\t\t\tname: 'allowedDomains',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of domains to search. Only domains in this list will be searched. Conflicts with \"Web Search Blocked Domains\".',\n\t\t\t\tplaceholder: 'e.g. google.com, wikipedia.org',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Web Search Blocked Domains',\n\t\t\t\tname: 'blockedDomains',\n\t\t\t\ttype: 'string',\n\t\t\t\tdefault: '',\n\t\t\t\tdescription:\n\t\t\t\t\t'Comma-separated list of domains to block from search. Conflicts with \"Web Search Allowed Domains\".',\n\t\t\t\tplaceholder: 'e.g. google.com, wikipedia.org',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Maximum Number of Tokens',\n\t\t\t\tname: 'maxTokens',\n\t\t\t\tdefault: 1024,\n\t\t\t\tdescription: 'The maximum number of tokens to generate in the completion',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 1,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Randomness (Temperature)',\n\t\t\t\tname: 'temperature',\n\t\t\t\tdefault: 1,\n\t\t\t\tdescription:\n\t\t\t\t\t'Controls the randomness of the output. Lowering results in less random completions. As the temperature approaches zero, the model will become deterministic and repetitive',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tnumberPrecision: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Randomness (Top P)',\n\t\t\t\tname: 'topP',\n\t\t\t\tdefault: 0.7,\n\t\t\t\tdescription: 'The maximum cumulative probability of tokens to consider when sampling',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tmaxValue: 1,\n\t\t\t\t\tnumberPrecision: 1,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Randomness (Top K)',\n\t\t\t\tname: 'topK',\n\t\t\t\tdefault: 5,\n\t\t\t\tdescription: 'The maximum number of tokens to consider when sampling',\n\t\t\t\ttype: 'number',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Max Tool Calls Iterations',\n\t\t\t\tname: 'maxToolsIterations',\n\t\t\t\ttype: 'number',\n\t\t\t\tdefault: 15,\n\t\t\t\tdescription:\n\t\t\t\t\t'The maximum number of tool iteration cycles the LLM will run before stopping. A single iteration can contain multiple tool calls. Set to 0 for no limit',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tminValue: 0,\n\t\t\t\t\tnumberPrecision: 0,\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['message'],\n\t\tresource: ['text'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\ninterface MessageOptions {\n\tincludeMergedResponse?: boolean;\n\tcodeExecution?: boolean;\n\twebSearch?: boolean;\n\tallowedDomains?: string;\n\tblockedDomains?: string;\n\tmaxUses?: number;\n\tmaxTokens?: number;\n\tsystem?: string;\n\ttemperature?: number;\n\ttopP?: number;\n\ttopK?: number;\n}\n\nfunction getFileTypeOrThrow(this: IExecuteFunctions, mimeType?: string): 'image' | 'document' {\n\tif (mimeType?.startsWith('image/')) {\n\t\treturn 'image';\n\t}\n\n\tif (mimeType === 'application/pdf') {\n\t\treturn 'document';\n\t}\n\n\tthrow new NodeOperationError(\n\t\tthis.getNode(),\n\t\t`Unsupported file type: ${mimeType}. Only images and PDFs are supported.`,\n\t);\n}\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst model = this.getNodeParameter('modelId', i, '', { extractValue: true }) as string;\n\tconst messages = this.getNodeParameter('messages.values', i, []) as Message[];\n\tconst addAttachments = this.getNodeParameter('addAttachments', i, false) as boolean;\n\tconst simplify = this.getNodeParameter('simplify', i, true) as boolean;\n\tconst options = this.getNodeParameter('options', i, {}) as MessageOptions;\n\n\tconst { tools, connectedTools } = await getTools.call(this, options);\n\n\tif (addAttachments) {\n\t\tif (options.codeExecution) {\n\t\t\tawait addCodeAttachmentsToMessages.call(this, i, messages);\n\t\t} else {\n\t\t\tawait addRegularAttachmentsToMessages.call(this, i, messages);\n\t\t}\n\t}\n\n\tconst body = {\n\t\tmodel,\n\t\tmessages,\n\t\ttools,\n\t\tmax_tokens: options.maxTokens ?? 1024,\n\t\tsystem: options.system,\n\t\ttemperature: options.temperature,\n\t\ttop_p: options.topP,\n\t\ttop_k: options.topK,\n\t};\n\n\tlet response = (await apiRequest.call(this, 'POST', '/v1/messages', {\n\t\tbody,\n\t\tenableAnthropicBetas: { codeExecution: options.codeExecution },\n\t})) as MessagesResponse;\n\n\tconst maxToolsIterations = this.getNodeParameter('options.maxToolsIterations', i, 15) as number;\n\tconst abortSignal = this.getExecutionCancelSignal();\n\tlet currentIteration = 0;\n\tlet pauseTurns = 0;\n\twhile (true) {\n\t\tif (abortSignal?.aborted) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (response.stop_reason === 'tool_use') {\n\t\t\tif (maxToolsIterations > 0 && currentIteration >= maxToolsIterations) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmessages.push({\n\t\t\t\trole: 'assistant',\n\t\t\t\tcontent: response.content,\n\t\t\t});\n\t\t\tawait handleToolUse.call(this, response, messages, connectedTools);\n\t\t\tcurrentIteration++;\n\t\t} else if (response.stop_reason === 'pause_turn') {\n\t\t\t// if the model has paused (can happen for the web search or code execution tool), we just retry 3 times\n\t\t\tif (pauseTurns >= 3) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tmessages.push({\n\t\t\t\trole: 'assistant',\n\t\t\t\tcontent: response.content,\n\t\t\t});\n\t\t\tpauseTurns++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\n\t\tresponse = (await apiRequest.call(this, 'POST', '/v1/messages', {\n\t\t\tbody,\n\t\t\tenableAnthropicBetas: { codeExecution: options.codeExecution },\n\t\t})) as MessagesResponse;\n\t}\n\n\tconst mergedResponse = options.includeMergedResponse\n\t\t? response.content\n\t\t\t\t.filter((c) => c.type === 'text')\n\t\t\t\t.map((c) => c.text)\n\t\t\t\t.join('')\n\t\t: undefined;\n\n\tif (simplify) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tjson: {\n\t\t\t\t\tcontent: response.content,\n\t\t\t\t\tmerged_response: mergedResponse,\n\t\t\t\t},\n\t\t\t\tpairedItem: { item: i },\n\t\t\t},\n\t\t];\n\t}\n\n\treturn [\n\t\t{\n\t\t\tjson: { ...response, merged_response: mergedResponse },\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n\nasync function getTools(this: IExecuteFunctions, options: MessageOptions) {\n\tlet connectedTools: Tool[] = [];\n\tconst nodeInputs = this.getNodeInputs();\n\t// the node can be used as a tool, in this case there won't be any connected tools\n\tif (nodeInputs.some((i) => i.type === 'ai_tool')) {\n\t\tconnectedTools = await getConnectedTools(this, true);\n\t}\n\n\tconst tools: AnthropicTool[] = connectedTools.map((t) => ({\n\t\ttype: 'custom',\n\t\tname: t.name,\n\t\tinput_schema: zodToJsonSchema(t.schema),\n\t\tdescription: t.description,\n\t}));\n\n\tif (options.codeExecution) {\n\t\ttools.push({\n\t\t\ttype: 'code_execution_20250522',\n\t\t\tname: 'code_execution',\n\t\t});\n\t}\n\n\tif (options.webSearch) {\n\t\tconst allowedDomains = options.allowedDomains\n\t\t\t? splitByComma(options.allowedDomains)\n\t\t\t: undefined;\n\t\tconst blockedDomains = options.blockedDomains\n\t\t\t? splitByComma(options.blockedDomains)\n\t\t\t: undefined;\n\t\ttools.push({\n\t\t\ttype: 'web_search_20250305',\n\t\t\tname: 'web_search',\n\t\t\tmax_uses: options.maxUses,\n\t\t\tallowed_domains: allowedDomains,\n\t\t\tblocked_domains: blockedDomains,\n\t\t});\n\t}\n\n\treturn { tools, connectedTools };\n}\n\nasync function addCodeAttachmentsToMessages(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tmessages: Message[],\n) {\n\tconst inputType = this.getNodeParameter('attachmentsInputType', i, 'url') as string;\n\tconst baseUrl = await getBaseUrl.call(this);\n\tconst fileUrlPrefix = `${baseUrl}/v1/files/`;\n\n\tlet content: Content[];\n\tif (inputType === 'url') {\n\t\tconst urls = this.getNodeParameter('attachmentsUrls', i, '') as string;\n\t\tconst promises = splitByComma(urls).map(async (url) => {\n\t\t\tif (url.startsWith(fileUrlPrefix)) {\n\t\t\t\treturn url.replace(fileUrlPrefix, '');\n\t\t\t} else {\n\t\t\t\tconst { fileContent, mimeType } = await downloadFile.call(this, url);\n\t\t\t\tconst response = await uploadFile.call(this, fileContent, mimeType);\n\t\t\t\treturn response.id;\n\t\t\t}\n\t\t});\n\n\t\tconst fileIds = await Promise.all(promises);\n\t\tcontent = fileIds.map((fileId) => ({\n\t\t\ttype: 'container_upload',\n\t\t\tfile_id: fileId,\n\t\t}));\n\t} else {\n\t\tconst binaryPropertyNames = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\tconst promises = splitByComma(binaryPropertyNames).map(async (binaryPropertyName) => {\n\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\t\t\tconst response = await uploadFile.call(this, buffer, binaryData.mimeType);\n\t\t\treturn response.id;\n\t\t});\n\n\t\tconst fileIds = await Promise.all(promises);\n\t\tcontent = fileIds.map((fileId) => ({\n\t\t\ttype: 'container_upload',\n\t\t\tfile_id: fileId,\n\t\t}));\n\t}\n\n\tmessages.push({\n\t\trole: 'user',\n\t\tcontent,\n\t});\n}\n\nasync function addRegularAttachmentsToMessages(\n\tthis: IExecuteFunctions,\n\ti: number,\n\tmessages: Message[],\n) {\n\tconst inputType = this.getNodeParameter('attachmentsInputType', i, 'url') as string;\n\tconst baseUrl = await getBaseUrl.call(this);\n\tconst fileUrlPrefix = `${baseUrl}/v1/files/`;\n\n\tlet content: Content[];\n\tif (inputType === 'url') {\n\t\tconst urls = this.getNodeParameter('attachmentsUrls', i, '') as string;\n\t\tconst promises = splitByComma(urls).map(async (url) => {\n\t\t\tif (url.startsWith(fileUrlPrefix)) {\n\t\t\t\tconst response = (await apiRequest.call(this, 'GET', '', {\n\t\t\t\t\toption: { url },\n\t\t\t\t})) as File;\n\t\t\t\tconst type = getFileTypeOrThrow.call(this, response.mime_type);\n\t\t\t\treturn {\n\t\t\t\t\ttype,\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tfile_id: url.replace(fileUrlPrefix, ''),\n\t\t\t\t\t},\n\t\t\t\t} as Content;\n\t\t\t} else {\n\t\t\t\tconst response = (await this.helpers.httpRequest.call(this, {\n\t\t\t\t\turl,\n\t\t\t\t\tmethod: 'HEAD',\n\t\t\t\t\treturnFullResponse: true,\n\t\t\t\t})) as { headers: IDataObject };\n\t\t\t\tconst mimeType = getMimeType(response.headers['content-type'] as string);\n\t\t\t\tconst type = getFileTypeOrThrow.call(this, mimeType);\n\t\t\t\treturn {\n\t\t\t\t\ttype,\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: 'url',\n\t\t\t\t\t\turl,\n\t\t\t\t\t},\n\t\t\t\t} as Content;\n\t\t\t}\n\t\t});\n\n\t\tcontent = await Promise.all(promises);\n\t} else {\n\t\tconst binaryPropertyNames = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\tconst promises = splitByComma(binaryPropertyNames).map(async (binaryPropertyName) => {\n\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\tconst type = getFileTypeOrThrow.call(this, binaryData.mimeType);\n\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\t\t\tconst fileBase64 = buffer.toString('base64');\n\t\t\treturn {\n\t\t\t\ttype,\n\t\t\t\tsource: {\n\t\t\t\t\ttype: 'base64',\n\t\t\t\t\tmedia_type: binaryData.mimeType,\n\t\t\t\t\tdata: fileBase64,\n\t\t\t\t},\n\t\t\t} as Content;\n\t\t});\n\n\t\tcontent = await Promise.all(promises);\n\t}\n\n\tmessages.push({\n\t\trole: 'user',\n\t\tcontent,\n\t});\n}\n\nasync function handleToolUse(\n\tthis: IExecuteFunctions,\n\tresponse: MessagesResponse,\n\tmessages: Message[],\n\tconnectedTools: Tool[],\n) {\n\tconst toolCalls = response.content.filter((c) => c.type === 'tool_use');\n\tif (!toolCalls.length) {\n\t\treturn;\n\t}\n\n\tconst toolResults = {\n\t\trole: 'user' as const,\n\t\tcontent: [] as Content[],\n\t};\n\tfor (const toolCall of toolCalls) {\n\t\tlet toolResponse;\n\t\tfor (const connectedTool of connectedTools) {\n\t\t\tif (connectedTool.name === toolCall.name) {\n\t\t\t\ttoolResponse = (await connectedTool.invoke(toolCall.input)) as IDataObject;\n\t\t\t}\n\t\t}\n\n\t\ttoolResults.content.push({\n\t\t\ttype: 'tool_result',\n\t\t\ttool_use_id: toolCall.id,\n\t\t\tcontent:\n\t\t\t\ttypeof toolResponse === 'object' ? JSON.stringify(toolResponse) : (toolResponse ?? ''),\n\t\t});\n\t}\n\n\tmessages.push(toolResults);\n}\n"],"mappings":"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","names":["zodToJsonSchema"]}