{"version":3,"sources":["../../../../../nodes/vendors/Anthropic/helpers/baseAnalyze.ts"],"sourcesContent":["import type { IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\n\nimport type { Content, MessagesResponse } from './interfaces';\nimport { getBaseUrl, splitByComma } from './utils';\nimport { apiRequest } from '../transport';\n\nexport async function baseAnalyze(\n\tthis: IExecuteFunctions,\n\ti: number,\n\turlsPropertyName: string,\n\ttype: 'image' | 'document',\n): Promise<INodeExecutionData[]> {\n\tconst model = this.getNodeParameter('modelId', i, '', { extractValue: true }) as string;\n\tconst inputType = this.getNodeParameter('inputType', i, 'url') as string;\n\tconst text = this.getNodeParameter('text', i, '') as string;\n\tconst simplify = this.getNodeParameter('simplify', i, true) as boolean;\n\tconst options = this.getNodeParameter('options', i, {});\n\tconst baseUrl = await getBaseUrl.call(this);\n\tconst fileUrlPrefix = `${baseUrl}/v1/files/`;\n\n\tlet content: Content[];\n\tif (inputType === 'url') {\n\t\tconst urls = this.getNodeParameter(urlsPropertyName, i, '') as string;\n\t\tcontent = splitByComma(urls).map((url) => {\n\t\t\tif (url.startsWith(fileUrlPrefix)) {\n\t\t\t\treturn {\n\t\t\t\t\ttype,\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: 'file',\n\t\t\t\t\t\tfile_id: url.replace(fileUrlPrefix, ''),\n\t\t\t\t\t},\n\t\t\t\t} as Content;\n\t\t\t} else {\n\t\t\t\treturn {\n\t\t\t\t\ttype,\n\t\t\t\t\tsource: {\n\t\t\t\t\t\ttype: 'url',\n\t\t\t\t\t\turl,\n\t\t\t\t\t},\n\t\t\t\t} as Content;\n\t\t\t}\n\t\t});\n\t} else {\n\t\tconst binaryPropertyNames = this.getNodeParameter('binaryPropertyName', i, 'data');\n\t\tconst promises = splitByComma(binaryPropertyNames).map(async (binaryPropertyName) => {\n\t\t\tconst binaryData = this.helpers.assertBinaryData(i, binaryPropertyName);\n\t\t\tconst buffer = await this.helpers.getBinaryDataBuffer(i, binaryPropertyName);\n\t\t\tconst fileBase64 = buffer.toString('base64');\n\t\t\treturn {\n\t\t\t\ttype,\n\t\t\t\tsource: {\n\t\t\t\t\ttype: 'base64',\n\t\t\t\t\tmedia_type: binaryData.mimeType,\n\t\t\t\t\tdata: fileBase64,\n\t\t\t\t},\n\t\t\t} as Content;\n\t\t});\n\n\t\tcontent = await Promise.all(promises);\n\t}\n\n\tcontent.push({\n\t\ttype: 'text',\n\t\ttext,\n\t});\n\n\tconst body = {\n\t\tmodel,\n\t\tmax_tokens: options.maxTokens ?? 1024,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tcontent,\n\t\t\t},\n\t\t],\n\t};\n\n\tconst response = (await apiRequest.call(this, 'POST', '/v1/messages', {\n\t\tbody,\n\t})) as MessagesResponse;\n\n\tif (simplify) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tjson: { content: response.content },\n\t\t\t\tpairedItem: { item: i },\n\t\t\t},\n\t\t];\n\t}\n\n\treturn [\n\t\t{\n\t\t\tjson: { ...response },\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,mBAAyC;AACzC,uBAA2B;AAE3B,eAAsB,YAErB,GACA,kBACA,MACgC;AAChC,QAAM,QAAQ,KAAK,iBAAiB,WAAW,GAAG,IAAI,EAAE,cAAc,KAAK,CAAC;AAC5E,QAAM,YAAY,KAAK,iBAAiB,aAAa,GAAG,KAAK;AAC7D,QAAM,OAAO,KAAK,iBAAiB,QAAQ,GAAG,EAAE;AAChD,QAAM,WAAW,KAAK,iBAAiB,YAAY,GAAG,IAAI;AAC1D,QAAM,UAAU,KAAK,iBAAiB,WAAW,GAAG,CAAC,CAAC;AACtD,QAAM,UAAU,MAAM,wBAAW,KAAK,IAAI;AAC1C,QAAM,gBAAgB,GAAG,OAAO;AAEhC,MAAI;AACJ,MAAI,cAAc,OAAO;AACxB,UAAM,OAAO,KAAK,iBAAiB,kBAAkB,GAAG,EAAE;AAC1D,kBAAU,2BAAa,IAAI,EAAE,IAAI,CAAC,QAAQ;AACzC,UAAI,IAAI,WAAW,aAAa,GAAG;AAClC,eAAO;AAAA,UACN;AAAA,UACA,QAAQ;AAAA,YACP,MAAM;AAAA,YACN,SAAS,IAAI,QAAQ,eAAe,EAAE;AAAA,UACvC;AAAA,QACD;AAAA,MACD,OAAO;AACN,eAAO;AAAA,UACN;AAAA,UACA,QAAQ;AAAA,YACP,MAAM;AAAA,YACN;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAAA,EACF,OAAO;AACN,UAAM,sBAAsB,KAAK,iBAAiB,sBAAsB,GAAG,MAAM;AACjF,UAAM,eAAW,2BAAa,mBAAmB,EAAE,IAAI,OAAO,uBAAuB;AACpF,YAAM,aAAa,KAAK,QAAQ,iBAAiB,GAAG,kBAAkB;AACtE,YAAM,SAAS,MAAM,KAAK,QAAQ,oBAAoB,GAAG,kBAAkB;AAC3E,YAAM,aAAa,OAAO,SAAS,QAAQ;AAC3C,aAAO;AAAA,QACN;AAAA,QACA,QAAQ;AAAA,UACP,MAAM;AAAA,UACN,YAAY,WAAW;AAAA,UACvB,MAAM;AAAA,QACP;AAAA,MACD;AAAA,IACD,CAAC;AAED,cAAU,MAAM,QAAQ,IAAI,QAAQ;AAAA,EACrC;AAEA,UAAQ,KAAK;AAAA,IACZ,MAAM;AAAA,IACN;AAAA,EACD,CAAC;AAED,QAAM,OAAO;AAAA,IACZ;AAAA,IACA,YAAY,QAAQ,aAAa;AAAA,IACjC,UAAU;AAAA,MACT;AAAA,QACC,MAAM;AAAA,QACN;AAAA,MACD;AAAA,IACD;AAAA,EACD;AAEA,QAAM,WAAY,MAAM,4BAAW,KAAK,MAAM,QAAQ,gBAAgB;AAAA,IACrE;AAAA,EACD,CAAC;AAED,MAAI,UAAU;AACb,WAAO;AAAA,MACN;AAAA,QACC,MAAM,EAAE,SAAS,SAAS,QAAQ;AAAA,QAClC,YAAY,EAAE,MAAM,EAAE;AAAA,MACvB;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AAAA,IACN;AAAA,MACC,MAAM,EAAE,GAAG,SAAS;AAAA,MACpB,YAAY,EAAE,MAAM,EAAE;AAAA,IACvB;AAAA,EACD;AACD;","names":[]}