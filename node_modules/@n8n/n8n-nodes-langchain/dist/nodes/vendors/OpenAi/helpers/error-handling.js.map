{"version":3,"sources":["../../../../../nodes/vendors/OpenAi/helpers/error-handling.ts"],"sourcesContent":["import { OperationalError } from 'n8n-workflow';\nimport { RateLimitError } from 'openai';\nimport { OpenAIError } from 'openai/error';\n\nconst errorMap: Record<string, string> = {\n\tinsufficient_quota:\n\t\t'Insufficient quota detected. <a href=\"https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-langchain.openai/common-issues/#insufficient-quota\" target=\"_blank\">Learn more</a> about resolving this issue',\n\trate_limit_exceeded: 'OpenAI: Rate limit reached',\n};\n\nexport function getCustomErrorMessage(errorCode: string): string | undefined {\n\treturn errorMap[errorCode];\n}\n\nexport function isOpenAiError(error: any): error is OpenAIError {\n\treturn error instanceof OpenAIError;\n}\n\nexport const openAiFailedAttemptHandler = (error: any) => {\n\tif (error instanceof RateLimitError) {\n\t\t// If the error is a rate limit error, we want to handle it differently\n\t\t// because OpenAI has multiple different rate limit errors\n\t\tconst errorCode = error?.code;\n\t\tconst errorMessage =\n\t\t\tgetCustomErrorMessage(errorCode ?? 'rate_limit_exceeded') ?? errorMap.rate_limit_exceeded;\n\t\tthrow new OperationalError(errorMessage, { cause: error });\n\t}\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAiC;AACjC,oBAA+B;AAC/B,mBAA4B;AAE5B,MAAM,WAAmC;AAAA,EACxC,oBACC;AAAA,EACD,qBAAqB;AACtB;AAEO,SAAS,sBAAsB,WAAuC;AAC5E,SAAO,SAAS,SAAS;AAC1B;AAEO,SAAS,cAAc,OAAkC;AAC/D,SAAO,iBAAiB;AACzB;AAEO,MAAM,6BAA6B,CAAC,UAAe;AACzD,MAAI,iBAAiB,8BAAgB;AAGpC,UAAM,YAAY,OAAO;AACzB,UAAM,eACL,sBAAsB,aAAa,qBAAqB,KAAK,SAAS;AACvE,UAAM,IAAI,qCAAiB,cAAc,EAAE,OAAO,MAAM,CAAC;AAAA,EAC1D;AACD;","names":[]}