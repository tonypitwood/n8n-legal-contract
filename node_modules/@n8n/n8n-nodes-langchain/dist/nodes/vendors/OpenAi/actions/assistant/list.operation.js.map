{"version":3,"sources":["../../../../../../nodes/vendors/OpenAi/actions/assistant/list.operation.ts"],"sourcesContent":["import type { INodeProperties, IExecuteFunctions, INodeExecutionData } from 'n8n-workflow';\nimport { updateDisplayOptions } from 'n8n-workflow';\n\nimport { apiRequest } from '../../transport';\n\nconst properties: INodeProperties[] = [\n\t{\n\t\tdisplayName: 'Simplify Output',\n\t\tname: 'simplify',\n\t\ttype: 'boolean',\n\t\tdefault: true,\n\t\tdescription: 'Whether to return a simplified version of the response instead of the raw data',\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['list'],\n\t\tresource: ['assistant'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst returnData: INodeExecutionData[] = [];\n\n\tlet has_more = true;\n\tlet after: string | undefined;\n\n\tdo {\n\t\tconst response = await apiRequest.call(this, 'GET', '/assistants', {\n\t\t\theaders: {\n\t\t\t\t'OpenAI-Beta': 'assistants=v2',\n\t\t\t},\n\t\t\tqs: {\n\t\t\t\tlimit: 100,\n\t\t\t\tafter,\n\t\t\t},\n\t\t});\n\n\t\tfor (const assistant of response.data || []) {\n\t\t\ttry {\n\t\t\t\tassistant.created_at = new Date(assistant.created_at * 1000).toISOString();\n\t\t\t} catch (error) {}\n\n\t\t\treturnData.push({ json: assistant, pairedItem: { item: i } });\n\t\t}\n\n\t\thas_more = response.has_more;\n\n\t\tif (has_more) {\n\t\t\tafter = response.last_id as string;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t} while (has_more);\n\n\tconst simplify = this.getNodeParameter('simplify', i) as boolean;\n\n\tif (simplify) {\n\t\treturn returnData.map((item) => {\n\t\t\tconst { id, name, model } = item.json;\n\t\t\treturn {\n\t\t\t\tjson: {\n\t\t\t\t\tid,\n\t\t\t\t\tname,\n\t\t\t\t\tmodel,\n\t\t\t\t},\n\t\t\t\tpairedItem: { item: i },\n\t\t\t};\n\t\t});\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAAqC;AAErC,uBAA2B;AAE3B,MAAM,aAAgC;AAAA,EACrC;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,SAAS;AAAA,IACT,aAAa;AAAA,EACd;AACD;AAEA,MAAM,iBAAiB;AAAA,EACtB,MAAM;AAAA,IACL,WAAW,CAAC,MAAM;AAAA,IAClB,UAAU,CAAC,WAAW;AAAA,EACvB;AACD;AAEO,MAAM,kBAAc,0CAAqB,gBAAgB,UAAU;AAE1E,eAAsB,QAAiC,GAA0C;AAChG,QAAM,aAAmC,CAAC;AAE1C,MAAI,WAAW;AACf,MAAI;AAEJ,KAAG;AACF,UAAM,WAAW,MAAM,4BAAW,KAAK,MAAM,OAAO,eAAe;AAAA,MAClE,SAAS;AAAA,QACR,eAAe;AAAA,MAChB;AAAA,MACA,IAAI;AAAA,QACH,OAAO;AAAA,QACP;AAAA,MACD;AAAA,IACD,CAAC;AAED,eAAW,aAAa,SAAS,QAAQ,CAAC,GAAG;AAC5C,UAAI;AACH,kBAAU,aAAa,IAAI,KAAK,UAAU,aAAa,GAAI,EAAE,YAAY;AAAA,MAC1E,SAAS,OAAO;AAAA,MAAC;AAEjB,iBAAW,KAAK,EAAE,MAAM,WAAW,YAAY,EAAE,MAAM,EAAE,EAAE,CAAC;AAAA,IAC7D;AAEA,eAAW,SAAS;AAEpB,QAAI,UAAU;AACb,cAAQ,SAAS;AAAA,IAClB,OAAO;AACN;AAAA,IACD;AAAA,EACD,SAAS;AAET,QAAM,WAAW,KAAK,iBAAiB,YAAY,CAAC;AAEpD,MAAI,UAAU;AACb,WAAO,WAAW,IAAI,CAAC,SAAS;AAC/B,YAAM,EAAE,IAAI,MAAM,MAAM,IAAI,KAAK;AACjC,aAAO;AAAA,QACN,MAAM;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,YAAY,EAAE,MAAM,EAAE;AAAA,MACvB;AAAA,IACD,CAAC;AAAA,EACF;AAEA,SAAO;AACR;","names":[]}