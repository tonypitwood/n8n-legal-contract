{"version":3,"sources":["../../../../../../nodes/vendors/OpenAi/actions/assistant/create.operation.ts"],"sourcesContent":["import type {\n\tINodeProperties,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tIDataObject,\n} from 'n8n-workflow';\nimport { NodeOperationError, updateDisplayOptions } from 'n8n-workflow';\n\nimport { apiRequest } from '../../transport';\nimport { modelRLC } from '../descriptions';\n\nconst properties: INodeProperties[] = [\n\tmodelRLC('modelSearch'),\n\t{\n\t\tdisplayName: 'Name',\n\t\tname: 'name',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tdescription: 'The name of the assistant. The maximum length is 256 characters.',\n\t\tplaceholder: 'e.g. My Assistant',\n\t\trequired: true,\n\t},\n\t{\n\t\tdisplayName: 'Description',\n\t\tname: 'description',\n\t\ttype: 'string',\n\t\tdefault: '',\n\t\tdescription: 'The description of the assistant. The maximum length is 512 characters.',\n\t\tplaceholder: 'e.g. My personal assistant',\n\t},\n\t{\n\t\tdisplayName: 'Instructions',\n\t\tname: 'instructions',\n\t\ttype: 'string',\n\t\tdescription:\n\t\t\t'The system instructions that the assistant uses. The maximum length is 32768 characters.',\n\t\tdefault: '',\n\t\ttypeOptions: {\n\t\t\trows: 2,\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Code Interpreter',\n\t\tname: 'codeInterpreter',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether to enable the code interpreter that allows the assistants to write and run Python code in a sandboxed execution environment, find more <a href=\"https://platform.openai.com/docs/assistants/tools/code-interpreter\" target=\"_blank\">here</a>',\n\t},\n\t{\n\t\tdisplayName: 'Knowledge Retrieval',\n\t\tname: 'knowledgeRetrieval',\n\t\ttype: 'boolean',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'Whether to augments the assistant with knowledge from outside its model, such as proprietary product information or documents, find more <a href=\"https://platform.openai.com/docs/assistants/tools/knowledge-retrieval\" target=\"_blank\">here</a>',\n\t},\n\t//we want to display Files selector only when codeInterpreter true or knowledgeRetrieval true or both\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-multi-options\n\t\tdisplayName: 'Files',\n\t\tname: 'file_ids',\n\t\ttype: 'multiOptions',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-multi-options\n\t\tdescription:\n\t\t\t'The files to be used by the assistant, there can be a maximum of 20 files attached to the assistant. You can use expression to pass file IDs as an array or comma-separated string.',\n\t\ttypeOptions: {\n\t\t\tloadOptionsMethod: 'getFiles',\n\t\t},\n\t\tdefault: [],\n\t\thint: \"Add more files by using the 'Upload a File' operation\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tcodeInterpreter: [true],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\tknowledgeRetrieval: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-multi-options\n\t\tdisplayName: 'Files',\n\t\tname: 'file_ids',\n\t\ttype: 'multiOptions',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-multi-options\n\t\tdescription:\n\t\t\t'The files to be used by the assistant, there can be a maximum of 20 files attached to the assistant',\n\t\ttypeOptions: {\n\t\t\tloadOptionsMethod: 'getFiles',\n\t\t},\n\t\tdefault: [],\n\t\thint: \"Add more files by using the 'Upload a File' operation\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tknowledgeRetrieval: [true],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\tcodeInterpreter: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-multi-options\n\t\tdisplayName: 'Files',\n\t\tname: 'file_ids',\n\t\ttype: 'multiOptions',\n\t\t// eslint-disable-next-line n8n-nodes-base/node-param-description-wrong-for-dynamic-multi-options\n\t\tdescription:\n\t\t\t'The files to be used by the assistant, there can be a maximum of 20 files attached to the assistant',\n\t\ttypeOptions: {\n\t\t\tloadOptionsMethod: 'getFiles',\n\t\t},\n\t\tdefault: [],\n\t\thint: \"Add more files by using the 'Upload a File' operation\",\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tknowledgeRetrieval: [true],\n\t\t\t\tcodeInterpreter: [true],\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName:\n\t\t\t'Add custom n8n tools when you <i>message</i> your assistant (rather than when creating it)',\n\t\tname: 'noticeTools',\n\t\ttype: 'notice',\n\t\tdefault: '',\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\tplaceholder: 'Add Option',\n\t\ttype: 'collection',\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Randomness (Temperature)',\n\t\t\t\tname: 'temperature',\n\t\t\t\tdefault: 1,\n\t\t\t\ttypeOptions: { maxValue: 1, minValue: 0, numberPrecision: 1 },\n\t\t\t\tdescription:\n\t\t\t\t\t'Controls randomness: Lowering results in less random completions. As the temperature approaches zero, the model will become deterministic and repetitive. We generally recommend altering this or temperature but not both.',\n\t\t\t\ttype: 'number',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Output Randomness (Top P)',\n\t\t\t\tname: 'topP',\n\t\t\t\tdefault: 1,\n\t\t\t\ttypeOptions: { maxValue: 1, minValue: 0, numberPrecision: 1 },\n\t\t\t\tdescription:\n\t\t\t\t\t'An alternative to sampling with temperature, controls diversity via nucleus sampling: 0.5 means half of all likelihood-weighted options are considered. We generally recommend altering this or temperature but not both.',\n\t\t\t\ttype: 'number',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Fail if Assistant Already Exists',\n\t\t\t\tname: 'failIfExists',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to fail an operation if the assistant with the same name already exists',\n\t\t\t},\n\t\t],\n\t},\n];\n\nconst displayOptions = {\n\tshow: {\n\t\toperation: ['create'],\n\t\tresource: ['assistant'],\n\t},\n};\n\nexport const description = updateDisplayOptions(displayOptions, properties);\n\nexport async function execute(this: IExecuteFunctions, i: number): Promise<INodeExecutionData[]> {\n\tconst model = this.getNodeParameter('modelId', i, '', { extractValue: true }) as string;\n\tconst name = this.getNodeParameter('name', i) as string;\n\tconst assistantDescription = this.getNodeParameter('description', i) as string;\n\tconst instructions = this.getNodeParameter('instructions', i) as string;\n\tconst codeInterpreter = this.getNodeParameter('codeInterpreter', i) as boolean;\n\tconst knowledgeRetrieval = this.getNodeParameter('knowledgeRetrieval', i) as boolean;\n\tlet file_ids = this.getNodeParameter('file_ids', i, []) as string[] | string;\n\tif (typeof file_ids === 'string') {\n\t\tfile_ids = file_ids.split(',').map((file_id) => file_id.trim());\n\t}\n\tconst options = this.getNodeParameter('options', i, {});\n\n\tif (options.failIfExists) {\n\t\tconst assistants: string[] = [];\n\n\t\tlet has_more = true;\n\t\tlet after: string | undefined;\n\n\t\tdo {\n\t\t\tconst response = (await apiRequest.call(this, 'GET', '/assistants', {\n\t\t\t\theaders: {\n\t\t\t\t\t'OpenAI-Beta': 'assistants=v2',\n\t\t\t\t},\n\t\t\t\tqs: {\n\t\t\t\t\tlimit: 100,\n\t\t\t\t\tafter,\n\t\t\t\t},\n\t\t\t})) as { data: IDataObject[]; has_more: boolean; last_id: string };\n\n\t\t\tfor (const assistant of response.data || []) {\n\t\t\t\tassistants.push(assistant.name as string);\n\t\t\t}\n\n\t\t\thas_more = response.has_more;\n\n\t\t\tif (has_more) {\n\t\t\t\tafter = response.last_id;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (has_more);\n\n\t\tif (assistants.includes(name)) {\n\t\t\tthrow new NodeOperationError(\n\t\t\t\tthis.getNode(),\n\t\t\t\t`An assistant with the same name '${name}' already exists`,\n\t\t\t\t{ itemIndex: i },\n\t\t\t);\n\t\t}\n\t}\n\n\tif (file_ids.length > 20) {\n\t\tthrow new NodeOperationError(\n\t\t\tthis.getNode(),\n\t\t\t'The maximum number of files that can be attached to the assistant is 20',\n\t\t\t{ itemIndex: i },\n\t\t);\n\t}\n\n\tconst body: IDataObject = {\n\t\tmodel,\n\t\tname,\n\t\tdescription: assistantDescription,\n\t\tinstructions,\n\t};\n\n\tconst tools = [];\n\n\tif (codeInterpreter) {\n\t\ttools.push({\n\t\t\ttype: 'code_interpreter',\n\t\t});\n\t\tbody.tool_resources = {\n\t\t\t...((body.tool_resources as object) ?? {}),\n\t\t\tcode_interpreter: {\n\t\t\t\tfile_ids,\n\t\t\t},\n\t\t};\n\t}\n\n\tif (knowledgeRetrieval) {\n\t\ttools.push({\n\t\t\ttype: 'file_search',\n\t\t});\n\t\tbody.tool_resources = {\n\t\t\t...((body.tool_resources as object) ?? {}),\n\t\t\tfile_search: {\n\t\t\t\tvector_stores: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfile_ids,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t};\n\t}\n\n\tif (tools.length) {\n\t\tbody.tools = tools;\n\t}\n\n\tconst response = await apiRequest.call(this, 'POST', '/assistants', {\n\t\tbody,\n\t\theaders: {\n\t\t\t'OpenAI-Beta': 'assistants=v2',\n\t\t},\n\t});\n\n\treturn [\n\t\t{\n\t\t\tjson: response,\n\t\t\tpairedItem: { item: i },\n\t\t},\n\t];\n}\n"],"mappings":"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","names":["response"]}