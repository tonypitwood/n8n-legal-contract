{"version":3,"sources":["../../../../nodes/llms/LmChatGoogleVertex/LmChatGoogleVertex.node.ts"],"sourcesContent":["import { ProjectsClient } from '@google-cloud/resource-manager';\nimport type { GoogleAISafetySetting } from '@langchain/google-common';\nimport { ChatVertexAI, type ChatVertexAIInput } from '@langchain/google-vertexai';\nimport { formatPrivateKey } from 'n8n-nodes-base/dist/utils/utilities';\nimport {\n\tNodeConnectionTypes,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n\ttype ISupplyDataFunctions,\n\ttype SupplyData,\n\ttype ILoadOptionsFunctions,\n\ttype JsonObject,\n\tNodeOperationError,\n\tvalidateNodeParameters,\n} from 'n8n-workflow';\n\nimport { getConnectionHintNoticeField } from '@utils/sharedFields';\n\nimport { makeErrorFromStatus } from './error-handling';\nimport { getAdditionalOptions } from '../gemini-common/additional-options';\nimport { makeN8nLlmFailedAttemptHandler } from '../n8nLlmFailedAttemptHandler';\nimport { N8nLlmTracing } from '../N8nLlmTracing';\n\nexport class LmChatGoogleVertex implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Google Vertex Chat Model',\n\n\t\tname: 'lmChatGoogleVertex',\n\t\ticon: 'file:google.svg',\n\t\tgroup: ['transform'],\n\t\tversion: 1,\n\t\tdescription: 'Chat Model Google Vertex',\n\t\tdefaults: {\n\t\t\tname: 'Google Vertex Chat Model',\n\t\t},\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Language Models', 'Root Nodes'],\n\t\t\t\t'Language Models': ['Chat Models (Recommended)'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.lmchatgooglevertex/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [],\n\n\t\toutputs: [NodeConnectionTypes.AiLanguageModel],\n\t\toutputNames: ['Model'],\n\t\tcredentials: [\n\t\t\t{\n\t\t\t\tname: 'googleApi',\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\tgetConnectionHintNoticeField([NodeConnectionTypes.AiChain, NodeConnectionTypes.AiAgent]),\n\t\t\t{\n\t\t\t\tdisplayName: 'Project ID',\n\t\t\t\tname: 'projectId',\n\t\t\t\ttype: 'resourceLocator',\n\t\t\t\tdefault: { mode: 'list', value: '' },\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'Select or enter your Google Cloud project ID',\n\t\t\t\tmodes: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'From List',\n\t\t\t\t\t\tname: 'list',\n\t\t\t\t\t\ttype: 'list',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tsearchListMethod: 'gcpProjectsList',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'ID',\n\t\t\t\t\t\tname: 'id',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Model Name',\n\t\t\t\tname: 'modelName',\n\t\t\t\ttype: 'string',\n\t\t\t\tdescription:\n\t\t\t\t\t'The model which will generate the completion. <a href=\"https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models\">Learn more</a>.',\n\t\t\t\tdefault: 'gemini-2.5-flash',\n\t\t\t},\n\t\t\tgetAdditionalOptions({ supportsThinkingBudget: true }),\n\t\t],\n\t};\n\n\tmethods = {\n\t\tlistSearch: {\n\t\t\tasync gcpProjectsList(this: ILoadOptionsFunctions) {\n\t\t\t\tconst results: Array<{ name: string; value: string }> = [];\n\n\t\t\t\tconst credentials = await this.getCredentials('googleApi');\n\t\t\t\tconst privateKey = formatPrivateKey(credentials.privateKey as string);\n\t\t\t\tconst email = (credentials.email as string).trim();\n\n\t\t\t\tconst client = new ProjectsClient({\n\t\t\t\t\tcredentials: {\n\t\t\t\t\t\tclient_email: email,\n\t\t\t\t\t\tprivate_key: privateKey,\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tconst [projects] = await client.searchProjects();\n\n\t\t\t\tfor (const project of projects) {\n\t\t\t\t\tif (project.projectId) {\n\t\t\t\t\t\tresults.push({\n\t\t\t\t\t\t\tname: project.displayName ?? project.projectId,\n\t\t\t\t\t\t\tvalue: project.projectId,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { results };\n\t\t\t},\n\t\t},\n\t};\n\n\tasync supplyData(this: ISupplyDataFunctions, itemIndex: number): Promise<SupplyData> {\n\t\tconst credentials = await this.getCredentials('googleApi');\n\t\tconst privateKey = formatPrivateKey(credentials.privateKey as string);\n\t\tconst email = (credentials.email as string).trim();\n\t\tconst region = credentials.region as string;\n\n\t\tconst modelName = this.getNodeParameter('modelName', itemIndex) as string;\n\n\t\tconst projectId = this.getNodeParameter('projectId', itemIndex, '', {\n\t\t\textractValue: true,\n\t\t}) as string;\n\n\t\tconst options = this.getNodeParameter('options', itemIndex, {\n\t\t\tmaxOutputTokens: 2048,\n\t\t\ttemperature: 0.4,\n\t\t\ttopK: 40,\n\t\t\ttopP: 0.9,\n\t\t});\n\n\t\t// Validate options parameter\n\t\tvalidateNodeParameters(\n\t\t\toptions,\n\t\t\t{\n\t\t\t\tmaxOutputTokens: { type: 'number', required: false },\n\t\t\t\ttemperature: { type: 'number', required: false },\n\t\t\t\ttopK: { type: 'number', required: false },\n\t\t\t\ttopP: { type: 'number', required: false },\n\t\t\t\tthinkingBudget: { type: 'number', required: false },\n\t\t\t},\n\t\t\tthis.getNode(),\n\t\t);\n\n\t\tconst safetySettings = this.getNodeParameter(\n\t\t\t'options.safetySettings.values',\n\t\t\titemIndex,\n\t\t\tnull,\n\t\t) as GoogleAISafetySetting[];\n\n\t\ttry {\n\t\t\tconst modelConfig: ChatVertexAIInput = {\n\t\t\t\tauthOptions: {\n\t\t\t\t\tprojectId,\n\t\t\t\t\tcredentials: {\n\t\t\t\t\t\tclient_email: email,\n\t\t\t\t\t\tprivate_key: privateKey,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tlocation: region,\n\t\t\t\tmodel: modelName,\n\t\t\t\ttopK: options.topK,\n\t\t\t\ttopP: options.topP,\n\t\t\t\ttemperature: options.temperature,\n\t\t\t\tmaxOutputTokens: options.maxOutputTokens,\n\t\t\t\tsafetySettings,\n\t\t\t\tcallbacks: [new N8nLlmTracing(this)],\n\t\t\t\t// Handle ChatVertexAI invocation errors to provide better error messages\n\t\t\t\tonFailedAttempt: makeN8nLlmFailedAttemptHandler(this, (error: any) => {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\t\tconst customError = makeErrorFromStatus(Number(error?.response?.status), {\n\t\t\t\t\t\tmodelName,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (customError) {\n\t\t\t\t\t\tthrow new NodeOperationError(this.getNode(), error as JsonObject, customError);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}),\n\t\t\t};\n\n\t\t\t// Add thinkingBudget if specified\n\t\t\tif (options.thinkingBudget !== undefined) {\n\t\t\t\tmodelConfig.thinkingBudget = options.thinkingBudget;\n\t\t\t}\n\n\t\t\tconst model = new ChatVertexAI(modelConfig);\n\n\t\t\treturn {\n\t\t\t\tresponse: model,\n\t\t\t};\n\t\t} catch (e) {\n\t\t\t// Catch model name validation error from LangChain (https://github.com/langchain-ai/langchainjs/blob/ef201d0ee85ee4049078270a0cfd7a1767e624f8/libs/langchain-google-common/src/utils/common.ts#L124)\n\t\t\t// to show more helpful error message\n\t\t\tif (e?.message?.startsWith('Unable to verify model params')) {\n\t\t\t\tthrow new NodeOperationError(this.getNode(), e as JsonObject, {\n\t\t\t\t\tmessage: 'Unsupported model',\n\t\t\t\t\tdescription: \"Only models starting with 'gemini' are supported.\",\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Assume all other exceptions while creating a new ChatVertexAI instance are parameter validation errors\n\t\t\tthrow new NodeOperationError(this.getNode(), e as JsonObject, {\n\t\t\t\tmessage: 'Invalid options',\n\t\t\t\tdescription: e.message,\n\t\t\t});\n\t\t}\n\t}\n}\n"],"mappings":"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","names":[]}