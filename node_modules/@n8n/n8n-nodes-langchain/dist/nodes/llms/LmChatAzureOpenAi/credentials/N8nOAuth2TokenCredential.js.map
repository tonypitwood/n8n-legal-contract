{"version":3,"sources":["../../../../../nodes/llms/LmChatAzureOpenAi/credentials/N8nOAuth2TokenCredential.ts"],"sourcesContent":["import type { TokenCredential, AccessToken } from '@azure/identity';\nimport type { ClientOAuth2TokenData } from '@n8n/client-oauth2';\nimport { ClientOAuth2 } from '@n8n/client-oauth2';\nimport type { INode } from 'n8n-workflow';\nimport { NodeOperationError } from 'n8n-workflow';\n\nimport type { AzureEntraCognitiveServicesOAuth2ApiCredential } from '../types';\n/**\n * Adapts n8n's credential retrieval into the TokenCredential interface expected by @azure/identity\n */\nexport class N8nOAuth2TokenCredential implements TokenCredential {\n\tconstructor(\n\t\tprivate node: INode,\n\t\tprivate credential: AzureEntraCognitiveServicesOAuth2ApiCredential,\n\t) {}\n\n\t/**\n\t * Gets an access token from OAuth credential\n\t */\n\tasync getToken(): Promise<AccessToken | null> {\n\t\ttry {\n\t\t\tif (!this.credential?.oauthTokenData?.access_token) {\n\t\t\t\tthrow new NodeOperationError(this.node, 'Failed to retrieve access token');\n\t\t\t}\n\t\t\tconst oAuthClient = new ClientOAuth2({\n\t\t\t\tclientId: this.credential.clientId,\n\t\t\t\tclientSecret: this.credential.clientSecret,\n\t\t\t\taccessTokenUri: this.credential.accessTokenUrl,\n\t\t\t\tscopes: this.credential.scope?.split(' '),\n\t\t\t\tauthentication: this.credential.authentication,\n\t\t\t\tauthorizationUri: this.credential.authUrl,\n\t\t\t\tadditionalBodyProperties: {\n\t\t\t\t\tresource: 'https://cognitiveservices.azure.com/',\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tconst token = await oAuthClient.credentials.getToken();\n\t\t\tconst data = token.data as ClientOAuth2TokenData & {\n\t\t\t\texpires_on: number;\n\t\t\t};\n\t\t\treturn {\n\t\t\t\ttoken: data.access_token,\n\t\t\t\texpiresOnTimestamp: data.expires_on,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\t// Re-throw with better error message\n\t\t\tthrow new NodeOperationError(this.node, 'Failed to retrieve OAuth2 access token', error);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the deployment details from the credential\n\t */\n\tasync getDeploymentDetails() {\n\t\treturn {\n\t\t\tapiVersion: this.credential.apiVersion,\n\t\t\tendpoint: this.credential.endpoint,\n\t\t\tresourceName: this.credential.resourceName,\n\t\t};\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,2BAA6B;AAE7B,0BAAmC;AAM5B,MAAM,yBAAoD;AAAA,EAChE,YACS,MACA,YACP;AAFO;AACA;AAAA,EACN;AAAA;AAAA;AAAA;AAAA,EAKH,MAAM,WAAwC;AAC7C,QAAI;AACH,UAAI,CAAC,KAAK,YAAY,gBAAgB,cAAc;AACnD,cAAM,IAAI,uCAAmB,KAAK,MAAM,iCAAiC;AAAA,MAC1E;AACA,YAAM,cAAc,IAAI,kCAAa;AAAA,QACpC,UAAU,KAAK,WAAW;AAAA,QAC1B,cAAc,KAAK,WAAW;AAAA,QAC9B,gBAAgB,KAAK,WAAW;AAAA,QAChC,QAAQ,KAAK,WAAW,OAAO,MAAM,GAAG;AAAA,QACxC,gBAAgB,KAAK,WAAW;AAAA,QAChC,kBAAkB,KAAK,WAAW;AAAA,QAClC,0BAA0B;AAAA,UACzB,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAED,YAAM,QAAQ,MAAM,YAAY,YAAY,SAAS;AACrD,YAAM,OAAO,MAAM;AAGnB,aAAO;AAAA,QACN,OAAO,KAAK;AAAA,QACZ,oBAAoB,KAAK;AAAA,MAC1B;AAAA,IACD,SAAS,OAAO;AAEf,YAAM,IAAI,uCAAmB,KAAK,MAAM,0CAA0C,KAAK;AAAA,IACxF;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,uBAAuB;AAC5B,WAAO;AAAA,MACN,YAAY,KAAK,WAAW;AAAA,MAC5B,UAAU,KAAK,WAAW;AAAA,MAC1B,cAAc,KAAK,WAAW;AAAA,IAC/B;AAAA,EACD;AACD;","names":[]}