{"version":3,"sources":["../../../../../nodes/llms/LMChatAnthropic/methods/searchModels.ts"],"sourcesContent":["import type {\n\tILoadOptionsFunctions,\n\tINodeListSearchItems,\n\tINodeListSearchResult,\n} from 'n8n-workflow';\n\nexport interface AnthropicModel {\n\tid: string;\n\tdisplay_name: string;\n\ttype: string;\n\tcreated_at: string;\n}\n\nexport async function searchModels(\n\tthis: ILoadOptionsFunctions,\n\tfilter?: string,\n): Promise<INodeListSearchResult> {\n\tconst credentials = await this.getCredentials<{ url?: string }>('anthropicApi');\n\n\tconst baseURL = credentials.url ?? 'https://api.anthropic.com';\n\tconst response = (await this.helpers.httpRequestWithAuthentication.call(this, 'anthropicApi', {\n\t\turl: `${baseURL}/v1/models`,\n\t\theaders: {\n\t\t\t'anthropic-version': '2023-06-01',\n\t\t},\n\t})) as { data: AnthropicModel[] };\n\n\tconst models = response.data || [];\n\tlet results: INodeListSearchItems[] = [];\n\n\tif (filter) {\n\t\tfor (const model of models) {\n\t\t\tif (model.id.toLowerCase().includes(filter.toLowerCase())) {\n\t\t\t\tresults.push({\n\t\t\t\t\tname: model.display_name,\n\t\t\t\t\tvalue: model.id,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} else {\n\t\tresults = models.map((model) => ({\n\t\t\tname: model.display_name,\n\t\t\tvalue: model.id,\n\t\t}));\n\t}\n\n\t// Sort models with more recent ones first (claude-3 before claude-2)\n\tresults = results.sort((a, b) => {\n\t\tconst modelA = models.find((m) => m.id === a.value);\n\t\tconst modelB = models.find((m) => m.id === b.value);\n\n\t\tif (!modelA || !modelB) return 0;\n\n\t\t// Sort by created_at date, most recent first\n\t\tconst dateA = new Date(modelA.created_at);\n\t\tconst dateB = new Date(modelB.created_at);\n\t\treturn dateB.getTime() - dateA.getTime();\n\t});\n\n\treturn {\n\t\tresults,\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,eAAsB,aAErB,QACiC;AACjC,QAAM,cAAc,MAAM,KAAK,eAAiC,cAAc;AAE9E,QAAM,UAAU,YAAY,OAAO;AACnC,QAAM,WAAY,MAAM,KAAK,QAAQ,8BAA8B,KAAK,MAAM,gBAAgB;AAAA,IAC7F,KAAK,GAAG,OAAO;AAAA,IACf,SAAS;AAAA,MACR,qBAAqB;AAAA,IACtB;AAAA,EACD,CAAC;AAED,QAAM,SAAS,SAAS,QAAQ,CAAC;AACjC,MAAI,UAAkC,CAAC;AAEvC,MAAI,QAAQ;AACX,eAAW,SAAS,QAAQ;AAC3B,UAAI,MAAM,GAAG,YAAY,EAAE,SAAS,OAAO,YAAY,CAAC,GAAG;AAC1D,gBAAQ,KAAK;AAAA,UACZ,MAAM,MAAM;AAAA,UACZ,OAAO,MAAM;AAAA,QACd,CAAC;AAAA,MACF;AAAA,IACD;AAAA,EACD,OAAO;AACN,cAAU,OAAO,IAAI,CAAC,WAAW;AAAA,MAChC,MAAM,MAAM;AAAA,MACZ,OAAO,MAAM;AAAA,IACd,EAAE;AAAA,EACH;AAGA,YAAU,QAAQ,KAAK,CAAC,GAAG,MAAM;AAChC,UAAM,SAAS,OAAO,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK;AAClD,UAAM,SAAS,OAAO,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,KAAK;AAElD,QAAI,CAAC,UAAU,CAAC,OAAQ,QAAO;AAG/B,UAAM,QAAQ,IAAI,KAAK,OAAO,UAAU;AACxC,UAAM,QAAQ,IAAI,KAAK,OAAO,UAAU;AACxC,WAAO,MAAM,QAAQ,IAAI,MAAM,QAAQ;AAAA,EACxC,CAAC;AAED,SAAO;AAAA,IACN;AAAA,EACD;AACD;","names":[]}