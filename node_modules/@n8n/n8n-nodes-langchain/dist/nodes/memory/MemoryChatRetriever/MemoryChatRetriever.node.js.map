{"version":3,"sources":["../../../../nodes/memory/MemoryChatRetriever/MemoryChatRetriever.node.ts"],"sourcesContent":["import type { BaseChatMemory } from '@langchain/community/memory/chat_memory';\nimport type { BaseMessage } from '@langchain/core/messages';\nimport {\n\tNodeConnectionTypes,\n\ttype IDataObject,\n\ttype IExecuteFunctions,\n\ttype INodeExecutionData,\n\ttype INodeType,\n\ttype INodeTypeDescription,\n} from 'n8n-workflow';\n\nfunction simplifyMessages(messages: BaseMessage[]) {\n\tconst chunkedMessages = [];\n\tfor (let i = 0; i < messages.length; i += 2) {\n\t\tchunkedMessages.push([messages[i], messages[i + 1]]);\n\t}\n\n\tconst transformedMessages = chunkedMessages.map((exchange) => {\n\t\tconst simplified = {\n\t\t\t[exchange[0]._getType()]: exchange[0].content,\n\t\t};\n\n\t\tif (exchange[1]) {\n\t\t\tsimplified[exchange[1]._getType()] = exchange[1].content;\n\t\t}\n\n\t\treturn {\n\t\t\tjson: simplified,\n\t\t};\n\t});\n\treturn transformedMessages;\n}\n\n// This node is deprecated. Use MemoryManager instead.\nexport class MemoryChatRetriever implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Chat Messages Retriever',\n\t\tname: 'memoryChatRetriever',\n\t\ticon: 'fa:database',\n\t\ticonColor: 'black',\n\t\tgroup: ['transform'],\n\t\thidden: true,\n\t\tversion: 1,\n\t\tdescription: 'Retrieve chat messages from memory and use them in the workflow',\n\t\tdefaults: {\n\t\t\tname: 'Chat Messages Retriever',\n\t\t},\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Miscellaneous'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymanager/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [\n\t\t\tNodeConnectionTypes.Main,\n\t\t\t{\n\t\t\t\tdisplayName: 'Memory',\n\t\t\t\tmaxConnections: 1,\n\t\t\t\ttype: NodeConnectionTypes.AiMemory,\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t],\n\n\t\toutputs: [NodeConnectionTypes.Main],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: \"This node is deprecated. Use 'Chat Memory Manager' node instead.\",\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t\tname: 'deprecatedNotice',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify Output',\n\t\t\t\tname: 'simplifyOutput',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: 'Whether to simplify the output to only include the sender and the text',\n\t\t\t\tdefault: true,\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tthis.logger.debug('Executing Chat Memory Retriever');\n\n\t\tconst memory = (await this.getInputConnectionData(NodeConnectionTypes.AiMemory, 0)) as\n\t\t\t| BaseChatMemory\n\t\t\t| undefined;\n\t\tconst simplifyOutput = this.getNodeParameter('simplifyOutput', 0) as boolean;\n\n\t\tconst messages = await memory?.chatHistory.getMessages();\n\n\t\tif (simplifyOutput && messages) {\n\t\t\treturn [simplifyMessages(messages)];\n\t\t}\n\n\t\tconst serializedMessages =\n\t\t\tmessages?.map((message) => {\n\t\t\t\tconst serializedMessage = message.toJSON();\n\t\t\t\treturn { json: serializedMessage as unknown as IDataObject };\n\t\t\t}) ?? [];\n\n\t\treturn [serializedMessages];\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,0BAOO;AAEP,SAAS,iBAAiB,UAAyB;AAClD,QAAM,kBAAkB,CAAC;AACzB,WAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK,GAAG;AAC5C,oBAAgB,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA,EACpD;AAEA,QAAM,sBAAsB,gBAAgB,IAAI,CAAC,aAAa;AAC7D,UAAM,aAAa;AAAA,MAClB,CAAC,SAAS,CAAC,EAAE,SAAS,CAAC,GAAG,SAAS,CAAC,EAAE;AAAA,IACvC;AAEA,QAAI,SAAS,CAAC,GAAG;AAChB,iBAAW,SAAS,CAAC,EAAE,SAAS,CAAC,IAAI,SAAS,CAAC,EAAE;AAAA,IAClD;AAEA,WAAO;AAAA,MACN,MAAM;AAAA,IACP;AAAA,EACD,CAAC;AACD,SAAO;AACR;AAGO,MAAM,oBAAyC;AAAA,EAA/C;AACN,uBAAoC;AAAA,MACnC,aAAa;AAAA,MACb,MAAM;AAAA,MACN,MAAM;AAAA,MACN,WAAW;AAAA,MACX,OAAO,CAAC,WAAW;AAAA,MACnB,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,aAAa;AAAA,MACb,UAAU;AAAA,QACT,MAAM;AAAA,MACP;AAAA,MACA,OAAO;AAAA,QACN,YAAY,CAAC,IAAI;AAAA,QACjB,eAAe;AAAA,UACd,IAAI,CAAC,eAAe;AAAA,QACrB;AAAA,QACA,WAAW;AAAA,UACV,sBAAsB;AAAA,YACrB;AAAA,cACC,KAAK;AAAA,YACN;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MAEA,QAAQ;AAAA,QACP,wCAAoB;AAAA,QACpB;AAAA,UACC,aAAa;AAAA,UACb,gBAAgB;AAAA,UAChB,MAAM,wCAAoB;AAAA,UAC1B,UAAU;AAAA,QACX;AAAA,MACD;AAAA,MAEA,SAAS,CAAC,wCAAoB,IAAI;AAAA,MAClC,YAAY;AAAA,QACX;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,SAAS;AAAA,UACT,MAAM;AAAA,QACP;AAAA,QACA;AAAA,UACC,aAAa;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,UACN,aAAa;AAAA,UACb,SAAS;AAAA,QACV;AAAA,MACD;AAAA,IACD;AAAA;AAAA,EAEA,MAAM,UAAkE;AACvE,SAAK,OAAO,MAAM,iCAAiC;AAEnD,UAAM,SAAU,MAAM,KAAK,uBAAuB,wCAAoB,UAAU,CAAC;AAGjF,UAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,CAAC;AAEhE,UAAM,WAAW,MAAM,QAAQ,YAAY,YAAY;AAEvD,QAAI,kBAAkB,UAAU;AAC/B,aAAO,CAAC,iBAAiB,QAAQ,CAAC;AAAA,IACnC;AAEA,UAAM,qBACL,UAAU,IAAI,CAAC,YAAY;AAC1B,YAAM,oBAAoB,QAAQ,OAAO;AACzC,aAAO,EAAE,MAAM,kBAA4C;AAAA,IAC5D,CAAC,KAAK,CAAC;AAER,WAAO,CAAC,kBAAkB;AAAA,EAC3B;AACD;","names":[]}