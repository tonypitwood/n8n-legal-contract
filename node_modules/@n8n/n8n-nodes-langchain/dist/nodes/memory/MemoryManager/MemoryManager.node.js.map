{"version":3,"sources":["../../../../nodes/memory/MemoryManager/MemoryManager.node.ts"],"sourcesContent":["import type { BaseChatMemory } from '@langchain/community/memory/chat_memory';\nimport type { MessageContent, BaseMessage } from '@langchain/core/messages';\nimport { AIMessage, SystemMessage, HumanMessage } from '@langchain/core/messages';\nimport { NodeConnectionTypes } from 'n8n-workflow';\nimport type {\n\tIDataObject,\n\tIExecuteFunctions,\n\tINodeExecutionData,\n\tINodeType,\n\tINodeTypeDescription,\n} from 'n8n-workflow';\n\ntype MessageRole = 'ai' | 'system' | 'user';\ninterface MessageRecord {\n\ttype: MessageRole;\n\tmessage: string;\n\thideFromUI: boolean;\n}\n\nexport function simplifyMessages(messages: BaseMessage[]): Array<Record<string, MessageContent>> {\n\tif (messages.length === 0) return [];\n\n\tconst result: Array<Record<string, MessageContent>> = [];\n\tlet index = 0;\n\n\twhile (index < messages.length) {\n\t\tconst currentGroup: Record<string, MessageContent> = {};\n\n\t\tdo {\n\t\t\tconst message = messages[index];\n\t\t\tconst messageType = message.getType();\n\n\t\t\tif (messageType in currentGroup) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcurrentGroup[messageType] = message.content;\n\t\t\tindex++;\n\t\t} while (index < messages.length);\n\n\t\tresult.push(currentGroup);\n\t}\n\n\treturn result;\n}\n\nconst prepareOutputSetup = (ctx: IExecuteFunctions, version: number, memory: BaseChatMemory) => {\n\tif (version === 1) {\n\t\t//legacy behavior of insert and delete for version 1\n\t\treturn async (i: number) => {\n\t\t\tconst messages = await memory.chatHistory.getMessages();\n\n\t\t\tconst serializedMessages = messages?.map((message) => message.toJSON()) ?? [];\n\n\t\t\tconst executionData = ctx.helpers.constructExecutionMetaData(\n\t\t\t\tctx.helpers.returnJsonArray(serializedMessages as unknown as IDataObject[]),\n\t\t\t\t{ itemData: { item: i } },\n\t\t\t);\n\n\t\t\treturn executionData;\n\t\t};\n\t}\n\treturn async (i: number) => {\n\t\treturn [\n\t\t\t{\n\t\t\t\tjson: { success: true },\n\t\t\t\tpairedItem: { item: i },\n\t\t\t},\n\t\t];\n\t};\n};\n\nexport class MemoryManager implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Chat Memory Manager',\n\t\tname: 'memoryManager',\n\t\ticon: 'fa:database',\n\t\ticonColor: 'black',\n\t\tgroup: ['transform'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Manage chat messages memory and use it in the workflow',\n\t\tdefaults: {\n\t\t\tname: 'Chat Memory Manager',\n\t\t},\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Miscellaneous', 'Root Nodes'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.memorymanager/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tdisplayName: '',\n\t\t\t\ttype: NodeConnectionTypes.Main,\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Memory',\n\t\t\t\ttype: NodeConnectionTypes.AiMemory,\n\t\t\t\trequired: true,\n\t\t\t\tmaxConnections: 1,\n\t\t\t},\n\t\t],\n\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tdisplayName: '',\n\t\t\t\ttype: NodeConnectionTypes.Main,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Operation Mode',\n\t\t\t\tname: 'mode',\n\t\t\t\ttype: 'options',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'load',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Get Many Messages',\n\t\t\t\t\t\tdescription: 'Retrieve chat messages from connected memory',\n\t\t\t\t\t\tvalue: 'load',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert Messages',\n\t\t\t\t\t\tdescription: 'Insert chat messages into connected memory',\n\t\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Delete Messages',\n\t\t\t\t\t\tdescription: 'Delete chat messages from connected memory',\n\t\t\t\t\t\tvalue: 'delete',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Insert Mode',\n\t\t\t\tname: 'insertMode',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription: 'Choose how new messages are inserted into the memory',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'insert',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Insert Messages',\n\t\t\t\t\t\tvalue: 'insert',\n\t\t\t\t\t\tdescription: 'Add messages alongside existing ones',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Override All Messages',\n\t\t\t\t\t\tvalue: 'override',\n\t\t\t\t\t\tdescription: 'Replace the current memory with new messages',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Delete Mode',\n\t\t\t\tname: 'deleteMode',\n\t\t\t\ttype: 'options',\n\t\t\t\tdescription: 'How messages are deleted from memory',\n\t\t\t\tnoDataExpression: true,\n\t\t\t\tdefault: 'lastN',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Last N',\n\t\t\t\t\t\tvalue: 'lastN',\n\t\t\t\t\t\tdescription: 'Delete the last N messages',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'All Messages',\n\t\t\t\t\t\tvalue: 'all',\n\t\t\t\t\t\tdescription: 'Clear all messages from memory',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['delete'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Chat Messages',\n\t\t\t\tname: 'messages',\n\t\t\t\tdescription: 'Chat messages to insert into memory',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\tplaceholder: 'Add message',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'messageValues',\n\t\t\t\t\t\tdisplayName: 'Message',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Type Name or ID',\n\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'AI',\n\t\t\t\t\t\t\t\t\t\tvalue: 'ai',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'System',\n\t\t\t\t\t\t\t\t\t\tvalue: 'system',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'User',\n\t\t\t\t\t\t\t\t\t\tvalue: 'user',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdefault: 'system',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Message',\n\t\t\t\t\t\t\t\tname: 'message',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Hide Message in Chat',\n\t\t\t\t\t\t\t\tname: 'hideFromUI',\n\t\t\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t\t\t\tdescription: 'Whether to hide the message from the chat UI',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['insert'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Messages Count',\n\t\t\t\tname: 'lastMessagesCount',\n\t\t\t\ttype: 'number',\n\t\t\t\tdescription: 'The amount of last messages to delete',\n\t\t\t\tdefault: 2,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['delete'],\n\t\t\t\t\t\tdeleteMode: ['lastN'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Simplify Output',\n\t\t\t\tname: 'simplifyOutput',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdescription: 'Whether to simplify the output to only include the sender and the text',\n\t\t\t\tdefault: true,\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['load'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Options',\n\t\t\t\tname: 'options',\n\t\t\t\tplaceholder: 'Add Option',\n\t\t\t\ttype: 'collection',\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Group Messages',\n\t\t\t\t\t\tname: 'groupMessages',\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Whether to group messages into a single item or return each message as a separate item',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tmode: ['load'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t};\n\n\tasync execute(this: IExecuteFunctions): Promise<INodeExecutionData[][]> {\n\t\tconst nodeVersion = this.getNode().typeVersion;\n\t\tconst items = this.getInputData();\n\t\tconst mode = this.getNodeParameter('mode', 0, 'load') as 'load' | 'insert' | 'delete';\n\t\tconst memory = (await this.getInputConnectionData(\n\t\t\tNodeConnectionTypes.AiMemory,\n\t\t\t0,\n\t\t)) as BaseChatMemory;\n\n\t\tconst prepareOutput = prepareOutputSetup(this, nodeVersion, memory);\n\n\t\tconst returnData: INodeExecutionData[] = [];\n\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tconst messages = await memory.chatHistory.getMessages();\n\n\t\t\tif (mode === 'delete') {\n\t\t\t\tconst deleteMode = this.getNodeParameter('deleteMode', i) as 'lastN' | 'all';\n\n\t\t\t\tif (deleteMode === 'lastN') {\n\t\t\t\t\tconst lastMessagesCount = this.getNodeParameter('lastMessagesCount', i) as number;\n\t\t\t\t\tif (messages.length >= lastMessagesCount) {\n\t\t\t\t\t\tconst newMessages = messages.slice(0, messages.length - lastMessagesCount);\n\n\t\t\t\t\t\tawait memory.chatHistory.clear();\n\t\t\t\t\t\tfor (const message of newMessages) {\n\t\t\t\t\t\t\tawait memory.chatHistory.addMessage(message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tawait memory.chatHistory.clear();\n\t\t\t\t}\n\n\t\t\t\treturnData.push(...(await prepareOutput(i)));\n\t\t\t}\n\n\t\t\tif (mode === 'insert') {\n\t\t\t\tconst insertMode = this.getNodeParameter('insertMode', i) as 'insert' | 'override';\n\t\t\t\tconst messagesToInsert = this.getNodeParameter(\n\t\t\t\t\t'messages.messageValues',\n\t\t\t\t\ti,\n\t\t\t\t\t[],\n\t\t\t\t) as MessageRecord[];\n\n\t\t\t\tconst templateMapper = {\n\t\t\t\t\tai: AIMessage,\n\t\t\t\t\tsystem: SystemMessage,\n\t\t\t\t\tuser: HumanMessage,\n\t\t\t\t};\n\n\t\t\t\tif (insertMode === 'override') {\n\t\t\t\t\tawait memory.chatHistory.clear();\n\t\t\t\t}\n\n\t\t\t\tfor (const message of messagesToInsert) {\n\t\t\t\t\tconst MessageClass = new templateMapper[message.type](message.message);\n\n\t\t\t\t\tif (message.hideFromUI) {\n\t\t\t\t\t\tMessageClass.additional_kwargs.hideFromUI = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait memory.chatHistory.addMessage(MessageClass);\n\t\t\t\t}\n\n\t\t\t\treturnData.push(...(await prepareOutput(i)));\n\t\t\t}\n\n\t\t\tif (mode === 'load') {\n\t\t\t\tconst simplifyOutput = this.getNodeParameter('simplifyOutput', i, false) as boolean;\n\t\t\t\tconst options = this.getNodeParameter('options', i);\n\n\t\t\t\t//Load mode, legacy behavior for version 1, buggy - outputs only for single input item\n\t\t\t\tif (simplifyOutput && messages.length && nodeVersion === 1) {\n\t\t\t\t\tconst groupMessages = options.groupMessages as boolean;\n\t\t\t\t\tconst output = simplifyMessages(messages);\n\n\t\t\t\t\treturn [\n\t\t\t\t\t\tthis.helpers.constructExecutionMetaData(\n\t\t\t\t\t\t\tthis.helpers.returnJsonArray(\n\t\t\t\t\t\t\t\tgroupMessages ? [{ messages: output, messagesCount: output.length }] : output,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t\t\t),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tlet groupMessages = true;\n\t\t\t\t//disable grouping if explicitly set to false\n\t\t\t\tif (options.groupMessages === false) {\n\t\t\t\t\tgroupMessages = false;\n\t\t\t\t}\n\t\t\t\t//disable grouping if not set and node version is 1 (legacy behavior)\n\t\t\t\tif (options.groupMessages === undefined && nodeVersion === 1) {\n\t\t\t\t\tgroupMessages = false;\n\t\t\t\t}\n\n\t\t\t\tlet output: IDataObject[] =\n\t\t\t\t\t(simplifyOutput\n\t\t\t\t\t\t? simplifyMessages(messages)\n\t\t\t\t\t\t: (messages?.map((message) => message.toJSON()) as unknown as IDataObject[])) ?? [];\n\n\t\t\t\tif (groupMessages) {\n\t\t\t\t\toutput = [{ messages: output, messagesCount: output.length }];\n\t\t\t\t}\n\n\t\t\t\tconst executionData = this.helpers.constructExecutionMetaData(\n\t\t\t\t\tthis.helpers.returnJsonArray(output),\n\t\t\t\t\t{ itemData: { item: i } },\n\t\t\t\t);\n\n\t\t\t\treturnData.push(...executionData);\n\t\t\t}\n\t\t}\n\n\t\treturn [returnData];\n\t}\n}\n"],"mappings":"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","names":["groupMessages","output"]}