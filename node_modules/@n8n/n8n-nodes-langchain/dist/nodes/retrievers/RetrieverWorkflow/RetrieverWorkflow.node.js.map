{"version":3,"sources":["../../../../nodes/retrievers/RetrieverWorkflow/RetrieverWorkflow.node.ts"],"sourcesContent":["import type { CallbackManagerForRetrieverRun } from '@langchain/core/callbacks/manager';\nimport { Document } from '@langchain/core/documents';\nimport { BaseRetriever, type BaseRetrieverInput } from '@langchain/core/retrievers';\nimport type { SetField, SetNodeOptions } from 'n8n-nodes-base/dist/nodes/Set/v2/helpers/interfaces';\nimport * as manual from 'n8n-nodes-base/dist/nodes/Set/v2/manual.mode';\nimport { NodeConnectionTypes, NodeOperationError } from 'n8n-workflow';\nimport type {\n\tIDataObject,\n\tIExecuteWorkflowInfo,\n\tINodeExecutionData,\n\tIWorkflowBase,\n\tISupplyDataFunctions,\n\tINodeType,\n\tINodeTypeDescription,\n\tSupplyData,\n\tINodeParameterResourceLocator,\n\tExecuteWorkflowData,\n} from 'n8n-workflow';\n\nimport { logWrapper } from '@utils/logWrapper';\n\nfunction objectToString(obj: Record<string, string> | IDataObject, level = 0) {\n\tlet result = '';\n\tfor (const key in obj) {\n\t\tconst value = obj[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tresult += `${'  '.repeat(level)}- \"${key}\":\\n${objectToString(\n\t\t\t\tvalue as IDataObject,\n\t\t\t\tlevel + 1,\n\t\t\t)}`;\n\t\t} else {\n\t\t\tresult += `${'  '.repeat(level)}- \"${key}\": \"${value}\"\\n`;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport class RetrieverWorkflow implements INodeType {\n\tdescription: INodeTypeDescription = {\n\t\tdisplayName: 'Workflow Retriever',\n\t\tname: 'retrieverWorkflow',\n\t\ticon: 'fa:box-open',\n\t\ticonColor: 'black',\n\t\tgroup: ['transform'],\n\t\tversion: [1, 1.1],\n\t\tdescription: 'Use an n8n Workflow as Retriever',\n\t\tdefaults: {\n\t\t\tname: 'Workflow Retriever',\n\t\t},\n\t\tcodex: {\n\t\t\tcategories: ['AI'],\n\t\t\tsubcategories: {\n\t\t\t\tAI: ['Retrievers'],\n\t\t\t},\n\t\t\tresources: {\n\t\t\t\tprimaryDocumentation: [\n\t\t\t\t\t{\n\t\t\t\t\t\turl: 'https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.retrieverworkflow/',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t\tinputs: [],\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Retriever',\n\t\t\t\tmaxConnections: 1,\n\t\t\t\ttype: NodeConnectionTypes.AiRetriever,\n\t\t\t},\n\t\t],\n\t\tproperties: [\n\t\t\t{\n\t\t\t\tdisplayName:\n\t\t\t\t\t'The workflow will receive \"query\" as input and the output of the last node will be returned and converted to Documents',\n\t\t\t\tname: 'executeNotice',\n\t\t\t\ttype: 'notice',\n\t\t\t\tdefault: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Source',\n\t\t\t\tname: 'source',\n\t\t\t\ttype: 'options',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Database',\n\t\t\t\t\t\tvalue: 'database',\n\t\t\t\t\t\tdescription: 'Load the workflow from the database by ID',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Parameter',\n\t\t\t\t\t\tvalue: 'parameter',\n\t\t\t\t\t\tdescription: 'Load the workflow from a parameter',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdefault: 'database',\n\t\t\t\tdescription: 'Where to get the workflow to execute from',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         source:database\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Workflow ID',\n\t\t\t\tname: 'workflowId',\n\t\t\t\ttype: 'string',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsource: ['database'],\n\t\t\t\t\t\t'@version': [{ _cnd: { eq: 1 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The workflow to execute',\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'Workflow',\n\t\t\t\tname: 'workflowId',\n\t\t\t\ttype: 'workflowSelector',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsource: ['database'],\n\t\t\t\t\t\t'@version': [{ _cnd: { gte: 1.1 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '',\n\t\t\t\trequired: true,\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         source:parameter\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Workflow JSON',\n\t\t\t\tname: 'workflowJson',\n\t\t\t\ttype: 'json',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\trows: 10,\n\t\t\t\t},\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\tsource: ['parameter'],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdefault: '\\n\\n\\n',\n\t\t\t\trequired: true,\n\t\t\t\tdescription: 'The workflow JSON code to execute',\n\t\t\t},\n\n\t\t\t// ----------------------------------\n\t\t\t//         For all\n\t\t\t// ----------------------------------\n\t\t\t{\n\t\t\t\tdisplayName: 'Workflow Values',\n\t\t\t\tname: 'fields',\n\t\t\t\tplaceholder: 'Add Value',\n\t\t\t\ttype: 'fixedCollection',\n\t\t\t\tdescription: 'Set the values which should be made available in the workflow',\n\t\t\t\ttypeOptions: {\n\t\t\t\t\tmultipleValues: true,\n\t\t\t\t\tsortable: true,\n\t\t\t\t},\n\t\t\t\tdefault: {},\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'values',\n\t\t\t\t\t\tdisplayName: 'Values',\n\t\t\t\t\t\tvalues: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Name',\n\t\t\t\t\t\t\t\tname: 'name',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. fieldName',\n\t\t\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t\t\t'Name of the field to set the value of. Supports dot-notation. Example: data.person[0].name.',\n\t\t\t\t\t\t\t\trequiresDataPath: 'single',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Type',\n\t\t\t\t\t\t\t\tname: 'type',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\tdescription: 'The field value type',\n\t\t\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-options-type-unsorted-items\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'String',\n\t\t\t\t\t\t\t\t\t\tvalue: 'stringValue',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Number',\n\t\t\t\t\t\t\t\t\t\tvalue: 'numberValue',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Boolean',\n\t\t\t\t\t\t\t\t\t\tvalue: 'booleanValue',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Array',\n\t\t\t\t\t\t\t\t\t\tvalue: 'arrayValue',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'Object',\n\t\t\t\t\t\t\t\t\t\tvalue: 'objectValue',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdefault: 'stringValue',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'stringValue',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\ttype: ['stringValue'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidateType: 'string',\n\t\t\t\t\t\t\t\tignoreValidationDuringExecution: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'numberValue',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\ttype: ['numberValue'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidateType: 'number',\n\t\t\t\t\t\t\t\tignoreValidationDuringExecution: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'booleanValue',\n\t\t\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\t\t\tdefault: 'true',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'True',\n\t\t\t\t\t\t\t\t\t\tvalue: 'true',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname: 'False',\n\t\t\t\t\t\t\t\t\t\tvalue: 'false',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\ttype: ['booleanValue'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidateType: 'boolean',\n\t\t\t\t\t\t\t\tignoreValidationDuringExecution: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'arrayValue',\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tplaceholder: 'e.g. [ arrayItem1, arrayItem2, arrayItem3 ]',\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\ttype: ['arrayValue'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidateType: 'array',\n\t\t\t\t\t\t\t\tignoreValidationDuringExecution: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\t\t\tname: 'objectValue',\n\t\t\t\t\t\t\t\ttype: 'json',\n\t\t\t\t\t\t\t\tdefault: '={}',\n\t\t\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\t\t\trows: 2,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdisplayOptions: {\n\t\t\t\t\t\t\t\t\tshow: {\n\t\t\t\t\t\t\t\t\t\ttype: ['objectValue'],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tvalidateType: 'object',\n\t\t\t\t\t\t\t\tignoreValidationDuringExecution: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t};\n\n\tasync supplyData(this: ISupplyDataFunctions, itemIndex: number): Promise<SupplyData> {\n\t\tconst workflowProxy = this.getWorkflowDataProxy(0);\n\n\t\tclass WorkflowRetriever extends BaseRetriever {\n\t\t\tlc_namespace = ['n8n-nodes-langchain', 'retrievers', 'workflow'];\n\n\t\t\tconstructor(\n\t\t\t\tprivate executeFunctions: ISupplyDataFunctions,\n\t\t\t\tfields: BaseRetrieverInput,\n\t\t\t) {\n\t\t\t\tsuper(fields);\n\t\t\t}\n\n\t\t\tasync _getRelevantDocuments(\n\t\t\t\tquery: string,\n\t\t\t\tconfig?: CallbackManagerForRetrieverRun,\n\t\t\t): Promise<Document[]> {\n\t\t\t\tconst source = this.executeFunctions.getNodeParameter('source', itemIndex) as string;\n\n\t\t\t\tconst baseMetadata: IDataObject = {\n\t\t\t\t\tsource: 'workflow',\n\t\t\t\t\tworkflowSource: source,\n\t\t\t\t};\n\n\t\t\t\tconst workflowInfo: IExecuteWorkflowInfo = {};\n\t\t\t\tif (source === 'database') {\n\t\t\t\t\tconst nodeVersion = this.executeFunctions.getNode().typeVersion;\n\t\t\t\t\tif (nodeVersion === 1) {\n\t\t\t\t\t\tworkflowInfo.id = this.executeFunctions.getNodeParameter(\n\t\t\t\t\t\t\t'workflowId',\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t) as string;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst { value } = this.executeFunctions.getNodeParameter(\n\t\t\t\t\t\t\t'workflowId',\n\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t) as INodeParameterResourceLocator;\n\t\t\t\t\t\tworkflowInfo.id = value as string;\n\t\t\t\t\t}\n\n\t\t\t\t\tbaseMetadata.workflowId = workflowInfo.id;\n\t\t\t\t} else if (source === 'parameter') {\n\t\t\t\t\t// Read workflow from parameter\n\t\t\t\t\tconst workflowJson = this.executeFunctions.getNodeParameter(\n\t\t\t\t\t\t'workflowJson',\n\t\t\t\t\t\titemIndex,\n\t\t\t\t\t) as string;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tworkflowInfo.code = JSON.parse(workflowJson) as IWorkflowBase;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tthrow new NodeOperationError(\n\t\t\t\t\t\t\tthis.executeFunctions.getNode(),\n\t\t\t\t\t\t\t`The provided workflow is not valid JSON: \"${(error as Error).message}\"`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\titemIndex,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\t// same as current workflow\n\t\t\t\t\tbaseMetadata.workflowId = workflowProxy.$workflow.id;\n\t\t\t\t}\n\n\t\t\t\tconst rawData: IDataObject = { query };\n\n\t\t\t\tconst workflowFieldsJson = this.executeFunctions.getNodeParameter(\n\t\t\t\t\t'fields.values',\n\t\t\t\t\titemIndex,\n\t\t\t\t\t[],\n\t\t\t\t\t{\n\t\t\t\t\t\trawExpressions: true,\n\t\t\t\t\t},\n\t\t\t\t) as SetField[];\n\n\t\t\t\t// Copied from Set Node v2\n\t\t\t\tfor (const entry of workflowFieldsJson) {\n\t\t\t\t\tif (entry.type === 'objectValue' && (entry.objectValue as string).startsWith('=')) {\n\t\t\t\t\t\trawData[entry.name] = (entry.objectValue as string).replace(/^=+/, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst options: SetNodeOptions = {\n\t\t\t\t\tinclude: 'all',\n\t\t\t\t};\n\n\t\t\t\tconst newItem = await manual.execute.call(\n\t\t\t\t\tthis.executeFunctions,\n\t\t\t\t\t{ json: { query } },\n\t\t\t\t\titemIndex,\n\t\t\t\t\toptions,\n\t\t\t\t\trawData,\n\t\t\t\t\tthis.executeFunctions.getNode(),\n\t\t\t\t);\n\n\t\t\t\tconst items = [newItem] as INodeExecutionData[];\n\n\t\t\t\tlet receivedData: ExecuteWorkflowData;\n\t\t\t\ttry {\n\t\t\t\t\treceivedData = await this.executeFunctions.executeWorkflow(\n\t\t\t\t\t\tworkflowInfo,\n\t\t\t\t\t\titems,\n\t\t\t\t\t\tconfig?.getChild(),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tparentExecution: {\n\t\t\t\t\t\t\t\texecutionId: workflowProxy.$execution.id,\n\t\t\t\t\t\t\t\tworkflowId: workflowProxy.$workflow.id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Make sure a valid error gets returned that can by json-serialized else it will\n\t\t\t\t\t// not show up in the frontend\n\t\t\t\t\tthrow new NodeOperationError(this.executeFunctions.getNode(), error as Error);\n\t\t\t\t}\n\n\t\t\t\tconst receivedItems = receivedData.data?.[0] ?? [];\n\n\t\t\t\tconst returnData: Document[] = [];\n\t\t\t\tfor (const [index, itemData] of receivedItems.entries()) {\n\t\t\t\t\tconst pageContent = objectToString(itemData.json);\n\t\t\t\t\treturnData.push(\n\t\t\t\t\t\tnew Document({\n\t\t\t\t\t\t\tpageContent: `### ${index + 1}. Context data:\\n${pageContent}`,\n\t\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\t\t...baseMetadata,\n\t\t\t\t\t\t\t\titemIndex: index,\n\t\t\t\t\t\t\t\texecutionId: receivedData.executionId,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn returnData;\n\t\t\t}\n\t\t}\n\n\t\tconst retriever = new WorkflowRetriever(this, {});\n\n\t\treturn {\n\t\t\tresponse: logWrapper(retriever, this),\n\t\t};\n\t}\n}\n"],"mappings":"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","names":[]}