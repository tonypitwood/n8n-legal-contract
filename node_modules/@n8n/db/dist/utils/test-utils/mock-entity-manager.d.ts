import { DataSource, EntityManager } from '@n8n/typeorm';
import type { Class } from 'n8n-core';
export declare const mockEntityManager: (entityClass: Class) => {
    readonly "@instanceof": symbol;
    readonly connection: DataSource;
    readonly queryRunner?: import("@n8n/typeorm").QueryRunner | undefined;
    transaction: import("jest-mock-extended").CalledWithMock<Promise<unknown>, [isolationLevel: import("@n8n/typeorm/driver/types/IsolationLevel").IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<unknown>]>;
    query: import("jest-mock-extended").CalledWithMock<Promise<unknown>, [query: string, parameters?: any[] | undefined]>;
    createQueryBuilder: import("jest-mock-extended").CalledWithMock<import("@n8n/typeorm").SelectQueryBuilder<any>, [queryRunner?: import("@n8n/typeorm").QueryRunner | undefined]>;
    hasId: import("jest-mock-extended").CalledWithMock<boolean, [target: string | Function, entity: any]>;
    getId: import("jest-mock-extended").CalledWithMock<any, [target: import("@n8n/typeorm").EntityTarget<any>, entity: any]>;
    create: import("jest-mock-extended").CalledWithMock<unknown[], [entityClass: import("@n8n/typeorm").EntityTarget<unknown>, plainObjects?: unknown[] | undefined]>;
    merge: import("jest-mock-extended").CalledWithMock<import("@n8n/typeorm").ObjectLiteral, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, mergeIntoEntity: import("@n8n/typeorm").ObjectLiteral, ...entityLikes: import("@n8n/typeorm").DeepPartial<import("@n8n/typeorm").ObjectLiteral>[]]>;
    preload: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral | undefined>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, entityLike: import("@n8n/typeorm").DeepPartial<import("@n8n/typeorm").ObjectLiteral>]>;
    save: import("jest-mock-extended").CalledWithMock<Promise<unknown>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<unknown>, entity: unknown, options?: import("@n8n/typeorm").SaveOptions | undefined]>;
    remove: import("jest-mock-extended").CalledWithMock<Promise<unknown[]>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<unknown>, entity: unknown[], options?: import("@n8n/typeorm").RemoveOptions | undefined]>;
    softRemove: import("jest-mock-extended").CalledWithMock<Promise<unknown>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<unknown>, entity: unknown, options?: import("@n8n/typeorm").SaveOptions | undefined]>;
    recover: import("jest-mock-extended").CalledWithMock<Promise<unknown>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<unknown>, entity: unknown, options?: import("@n8n/typeorm").SaveOptions | undefined]>;
    insert: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").InsertResult>, [target: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, entity: {} | {}[]]>;
    upsert: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").InsertResult>, [target: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, entityOrEntities: {} | {}[], conflictPathsOrOptions: string[] | import("@n8n/typeorm/repository/UpsertOptions").UpsertOptions<import("@n8n/typeorm").ObjectLiteral>]>;
    update: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").UpdateResult>, [target: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, criteria: any, partialEntity: {}]>;
    delete: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").DeleteResult>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, criteria: any]>;
    softDelete: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").UpdateResult>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, criteria: any]>;
    restore: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").UpdateResult>, [targetOrEntity: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, criteria: any]>;
    exists: import("jest-mock-extended").CalledWithMock<Promise<boolean>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, options?: import("@n8n/typeorm").FindManyOptions<import("@n8n/typeorm").ObjectLiteral> | undefined]>;
    existsBy: import("jest-mock-extended").CalledWithMock<Promise<boolean>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, where: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[]]>;
    count: import("jest-mock-extended").CalledWithMock<Promise<number>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, options?: import("@n8n/typeorm").FindManyOptions<import("@n8n/typeorm").ObjectLiteral> | undefined]>;
    countBy: import("jest-mock-extended").CalledWithMock<Promise<number>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, where: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[]]>;
    sum: import("jest-mock-extended").CalledWithMock<Promise<number | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, columnName: string, where?: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[] | undefined]>;
    average: import("jest-mock-extended").CalledWithMock<Promise<number | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, columnName: string, where?: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[] | undefined]>;
    minimum: import("jest-mock-extended").CalledWithMock<Promise<number | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, columnName: string, where?: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[] | undefined]>;
    maximum: import("jest-mock-extended").CalledWithMock<Promise<number | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, columnName: string, where?: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[] | undefined]>;
    find: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral[]>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, options?: import("@n8n/typeorm").FindManyOptions<import("@n8n/typeorm").ObjectLiteral> | undefined]>;
    findBy: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral[]>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, where: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[]]>;
    findAndCount: import("jest-mock-extended").CalledWithMock<Promise<[import("@n8n/typeorm").ObjectLiteral[], number]>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, options?: import("@n8n/typeorm").FindManyOptions<import("@n8n/typeorm").ObjectLiteral> | undefined]>;
    findAndCountBy: import("jest-mock-extended").CalledWithMock<Promise<[import("@n8n/typeorm").ObjectLiteral[], number]>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, where: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[]]>;
    findByIds: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral[]>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, ids: any[]]>;
    findOne: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, options: import("@n8n/typeorm").FindOneOptions<import("@n8n/typeorm").ObjectLiteral>]>;
    findOneBy: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, where: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[]]>;
    findOneById: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral | null>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, id: string | number | Date | import("@n8n/typeorm").ObjectId]>;
    findOneOrFail: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, options: import("@n8n/typeorm").FindOneOptions<import("@n8n/typeorm").ObjectLiteral>]>;
    findOneByOrFail: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").ObjectLiteral>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, where: import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral> | import("@n8n/typeorm").FindOptionsWhere<import("@n8n/typeorm").ObjectLiteral>[]]>;
    clear: import("jest-mock-extended").CalledWithMock<Promise<void>, [entityClass: import("@n8n/typeorm").EntityTarget<unknown>]>;
    increment: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").UpdateResult>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, conditions: any, propertyPath: string, value: string | number]>;
    decrement: import("jest-mock-extended").CalledWithMock<Promise<import("@n8n/typeorm").UpdateResult>, [entityClass: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>, conditions: any, propertyPath: string, value: string | number]>;
    getRepository: import("jest-mock-extended").CalledWithMock<import("@n8n/typeorm").Repository<import("@n8n/typeorm").ObjectLiteral>, [target: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>]>;
    getTreeRepository: import("jest-mock-extended").CalledWithMock<import("@n8n/typeorm").TreeRepository<import("@n8n/typeorm").ObjectLiteral>, [target: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>]>;
    getMongoRepository: import("jest-mock-extended").CalledWithMock<import("@n8n/typeorm").MongoRepository<import("@n8n/typeorm").ObjectLiteral>, [target: import("@n8n/typeorm").EntityTarget<import("@n8n/typeorm").ObjectLiteral>]>;
    withRepository: import("jest-mock-extended").CalledWithMock<import("@n8n/typeorm").Repository<any>, [repository: import("@n8n/typeorm").Repository<any> & import("@n8n/typeorm").Repository<import("@n8n/typeorm").ObjectLiteral>]>;
    getCustomRepository: import("jest-mock-extended").CalledWithMock<unknown, [customRepository: import("@n8n/typeorm").ObjectType<unknown>]>;
    release: import("jest-mock-extended").CalledWithMock<Promise<void>, []>;
} & EntityManager;
