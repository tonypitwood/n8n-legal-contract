{"version":3,"sources":["../../src/driver/sqlite-pooled/LeasedDbConnection.ts"],"names":[],"mappings":";;;AACA,yHAAqH;AAGrH;;;;GAIG;AACH,MAAa,kBAAkB;IAI3B,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,UAAU,CAAA;IAC1B,CAAC;IAED,IAAW,UAAU;QACjB,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,MAAM,IAAI,yFAA2C,EAAE,CAAA;QAC3D,CAAC;QAED,OAAO,IAAI,CAAC,WAAW,CAAA;IAC3B,CAAC;IAED,YACqB,WAA4B,EAC5B,UAAwB,EACxB,WAA0B;QAF1B,gBAAW,GAAX,WAAW,CAAiB;QAC5B,eAAU,GAAV,UAAU,CAAc;QACxB,gBAAW,GAAX,WAAW,CAAe;QAlBvC,eAAU,GAAG,KAAK,CAAA;QAClB,eAAU,GAAG,KAAK,CAAA;IAkBvB,CAAC;IAEG,aAAa;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;IAC1B,CAAC;IAED,KAAK,CAAC,OAAO;QACT,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,OAAM;QACV,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACvC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;IAC1B,CAAC;IAEM,KAAK,CAAC,cAAc;QACvB,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,OAAM;QACV,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAA;IACrC,CAAC;CACJ;AA1CD,gDA0CC","file":"LeasedDbConnection.js","sourcesContent":["import type { Database as Sqlite3Database } from \"sqlite3\"\nimport { DatabaseConnectionLeaseAlreadyReleasedError } from \"../../error/DatabaseConnectionLeaseAlreadyReleasedError\"\nimport { DbLease, DbLeaseHolder, DbLeaseOwner } from \"./SqlitePooledTypes\"\n\n/**\n * Represents a leased database connection. The connection is\n * leased from the owner to the lease holder, and must be\n * released back to the owner when no longer needed.\n */\nexport class LeasedDbConnection implements DbLease {\n    private isReleased = false\n    private _isInvalid = false\n\n    public get isInvalid() {\n        return this._isInvalid\n    }\n\n    public get connection(): Sqlite3Database {\n        if (this.isReleased) {\n            throw new DatabaseConnectionLeaseAlreadyReleasedError()\n        }\n\n        return this._connection\n    }\n\n    constructor(\n        private readonly _connection: Sqlite3Database,\n        private readonly leaseOwner: DbLeaseOwner,\n        private readonly leaseHolder: DbLeaseHolder,\n    ) {}\n\n    public markAsInvalid() {\n        this._isInvalid = true\n    }\n\n    async release() {\n        if (this.isReleased) {\n            return\n        }\n\n        this.leaseOwner.releaseConnection(this)\n        this.isReleased = true\n    }\n\n    public async requestRelease() {\n        if (this.isReleased) {\n            return\n        }\n\n        this.leaseHolder.requestRelease()\n    }\n}\n"],"sourceRoot":"../.."}