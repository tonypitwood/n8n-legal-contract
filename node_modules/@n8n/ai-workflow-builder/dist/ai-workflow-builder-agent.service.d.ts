import { Logger } from '@n8n/backend-common';
import { AiAssistantClient, AiAssistantSDK } from '@n8n_io/ai-assistant-sdk';
import { INodeTypes } from 'n8n-workflow';
import type { IUser } from 'n8n-workflow';
import { type ChatPayload } from './workflow-builder-agent';
type OnCreditsUpdated = (userId: string, creditsQuota: number, creditsClaimed: number) => void;
export declare class AiWorkflowBuilderService {
    private readonly nodeTypes;
    private readonly client?;
    private readonly logger?;
    private readonly instanceUrl?;
    private readonly onCreditsUpdated?;
    private parsedNodeTypes;
    private sessionManager;
    constructor(nodeTypes: INodeTypes, client?: AiAssistantClient | undefined, logger?: Logger | undefined, instanceUrl?: string | undefined, onCreditsUpdated?: OnCreditsUpdated | undefined);
    private static getAnthropicClaudeModel;
    private getApiProxyAuthHeaders;
    private setupModels;
    private getNodeTypes;
    private getAgent;
    private onGenerationSuccess;
    chat(payload: ChatPayload, user: IUser, abortSignal?: AbortSignal): AsyncGenerator<import("./types").StreamOutput, void, unknown>;
    getSessions(workflowId: string | undefined, user?: IUser): Promise<{
        sessions: import("./types/sessions").Session[];
    }>;
    getBuilderInstanceCredits(user: IUser): Promise<AiAssistantSDK.BuilderInstanceCreditsResponse>;
}
export {};
