export declare const SET_NODE_GUIDE = "\n### Set Node Updates - Comprehensive Type Handling Guide\n\nThe Set node uses assignments to create or modify data fields. Each assignment has a specific type that determines how the value is formatted and processed.\n\n#### Assignment Structure\n```json\n{\n  \"id\": \"unique-id\",\n  \"name\": \"field_name\",\n  \"value\": \"field_value\",  // Format depends on type\n  \"type\": \"string|number|boolean|array|object\"\n}\n```\n\n**CRITICAL**: ALWAYS use \"value\" field for ALL types. NEVER use type-specific fields like \"stringValue\", \"numberValue\", \"booleanValue\", etc. The field is ALWAYS named \"value\" regardless of the type.\n\n#### Type-Specific Value Formatting\n\n##### String Type\n- **Format**: Direct string value or expression\n- **Examples**:\n  - Literal: `\"Hello World\"`\n  - Expression: `\"={{ $('Previous Node').item.json.message }}\"`\n  - With embedded expressions: `\"=Order #{{ $('Set').item.json.orderId }} processed\"`\n- **Use when**: Text data, IDs, names, messages, dates as strings\n\n##### Number Type\n- **Format**: Direct numeric value (NOT as a string)\n- **Examples**:\n  - Integer: `123`\n  - Decimal: `45.67`\n  - Negative: `-100`\n  - Expression: `\"={{ $('HTTP Request').item.json.count }}\"`\n- **CRITICAL**: Use actual numbers, not strings: `123` not `\"123\"`\n- **Use when**: Quantities, prices, scores, numeric calculations\n\n##### Boolean Type\n- **Format**: Direct boolean value (NOT as a string)\n- **Examples**:\n  - True: `true`\n  - False: `false`\n  - Expression: `\"={{ $('IF').item.json.isActive }}\"`\n- **CRITICAL**: Use actual booleans, not strings: `true` not `\"true\"`\n- **CRITICAL**: The field name is \"value\", NOT \"booleanValue\"\n- **Use when**: Flags, toggles, yes/no values, active/inactive states\n\n##### Array Type\n- **Format**: JSON stringified array\n- **Examples**:\n  - Simple array: `\"[1, 2, 3]\"`\n  - String array: `\"[\\\"apple\\\", \\\"banana\\\", \\\"orange\\\"]\"`\n  - Mixed array: `\"[\\\"item1\\\", 123, true]\"`\n  - Expression: `\"={{ JSON.stringify($('Previous Node').item.json.items) }}\"`\n- **CRITICAL**: Arrays must be JSON stringified\n- **Use when**: Lists, collections, multiple values\n\n##### Object Type\n- **Format**: JSON stringified object\n- **Examples**:\n  - Simple object: `\"{ \\\"name\\\": \\\"John\\\", \\\"age\\\": 30 }\"`\n  - Nested object: `\"{ \\\"user\\\": { \\\"id\\\": 123, \\\"role\\\": \\\"admin\\\" } }\"`\n  - Expression: `\"={{ JSON.stringify($('Set').item.json.userData) }}\"`\n- **CRITICAL**: Objects must be JSON stringified with escaped quotes\n- **Use when**: Complex data structures, grouped properties\n\n#### Important Type Selection Rules\n\n1. **Analyze the requested data type**:\n   - \"Set count to 5\" \u2192 number type with value: `5`\n   - \"Set message to hello\" \u2192 string type with value: `\"hello\"`\n   - \"Set active to true\" \u2192 boolean type with value: `true`\n   - \"Set tags to apple, banana\" \u2192 array type with value: `\"[\\\"apple\\\", \\\"banana\\\"]\"`\n\n2. **Expression handling**:\n   - All types can use expressions with `\"={{ ... }}\"`\n   - For arrays/objects from expressions, use `JSON.stringify()`\n\n3. **Common mistakes to avoid**:\n   - WRONG: Setting number as string: `{ \"value\": \"123\", \"type\": \"number\" }`\n   - CORRECT: `{ \"value\": 123, \"type\": \"number\" }`\n   - WRONG: Setting boolean as string: `{ \"value\": \"false\", \"type\": \"boolean\" }`\n   - CORRECT: `{ \"value\": false, \"type\": \"boolean\" }`\n   - WRONG: Using type-specific field names: `{ \"booleanValue\": true, \"type\": \"boolean\" }`\n   - CORRECT: `{ \"value\": true, \"type\": \"boolean\" }`\n   - WRONG: Setting array without stringification: `{ \"value\": [1,2,3], \"type\": \"array\" }`\n   - CORRECT: `{ \"value\": \"[1,2,3]\", \"type\": \"array\" }`";
