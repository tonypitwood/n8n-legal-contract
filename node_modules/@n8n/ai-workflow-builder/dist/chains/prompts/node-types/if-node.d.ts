export declare const IF_NODE_GUIDE = "\n### IF Node Updates - Comprehensive Guide\n\nThe IF node uses a complex filter structure for conditional logic. Understanding the correct operator format is crucial.\n\n#### IF Node Structure\n```json\n{\n  \"conditions\": {\n    \"options\": {\n      \"caseSensitive\": false,      // For string comparisons\n      \"leftValue\": \"\",              // Optional default left value\n      \"typeValidation\": \"loose\"     // \"strict\" or \"loose\"\n    },\n    \"conditions\": [\n      {\n        \"id\": \"unique-id\",          // Optional, auto-generated\n        \"leftValue\": \"={{ $('Node').item.json.field }}\",\n        \"rightValue\": \"value\",      // Can be expression or literal\n        \"operator\": {\n          \"type\": \"string|number|boolean|dateTime|array|object\",\n          \"operation\": \"specific-operation\"\n        }\n      }\n    ],\n    \"combinator\": \"and\"  // \"and\" or \"or\"\n  }\n}\n```\n\n#### Complete Operator Reference\n\n##### String Operators\n- **exists**: Check if value exists (singleValue: true, no rightValue needed)\n  `{ \"type\": \"string\", \"operation\": \"exists\" }`\n- **notExists**: Check if value doesn't exist (singleValue: true)\n  `{ \"type\": \"string\", \"operation\": \"notExists\" }`\n- **empty**: Check if string is empty (singleValue: true)\n  `{ \"type\": \"string\", \"operation\": \"empty\" }`\n- **notEmpty**: Check if string is not empty (singleValue: true)\n  `{ \"type\": \"string\", \"operation\": \"notEmpty\" }`\n- **equals**: Exact match\n  `{ \"type\": \"string\", \"operation\": \"equals\" }`\n- **notEquals**: Not equal\n  `{ \"type\": \"string\", \"operation\": \"notEquals\" }`\n- **contains**: Contains substring\n  `{ \"type\": \"string\", \"operation\": \"contains\" }`\n- **notContains**: Doesn't contain substring\n  `{ \"type\": \"string\", \"operation\": \"notContains\" }`\n- **startsWith**: Starts with string\n  `{ \"type\": \"string\", \"operation\": \"startsWith\" }`\n- **notStartsWith**: Doesn't start with\n  `{ \"type\": \"string\", \"operation\": \"notStartsWith\" }`\n- **endsWith**: Ends with string\n  `{ \"type\": \"string\", \"operation\": \"endsWith\" }`\n- **notEndsWith**: Doesn't end with\n  `{ \"type\": \"string\", \"operation\": \"notEndsWith\" }`\n- **regex**: Matches regex pattern\n  `{ \"type\": \"string\", \"operation\": \"regex\" }`\n- **notRegex**: Doesn't match regex\n  `{ \"type\": \"string\", \"operation\": \"notRegex\" }`\n\n##### Number Operators\n- **exists**: Check if number exists (singleValue: true)\n  `{ \"type\": \"number\", \"operation\": \"exists\" }`\n- **notExists**: Check if number doesn't exist (singleValue: true)\n  `{ \"type\": \"number\", \"operation\": \"notExists\" }`\n- **equals**: Equal to\n  `{ \"type\": \"number\", \"operation\": \"equals\" }`\n- **notEquals**: Not equal to\n  `{ \"type\": \"number\", \"operation\": \"notEquals\" }`\n- **gt**: Greater than\n  `{ \"type\": \"number\", \"operation\": \"gt\" }`\n- **lt**: Less than\n  `{ \"type\": \"number\", \"operation\": \"lt\" }`\n- **gte**: Greater than or equal\n  `{ \"type\": \"number\", \"operation\": \"gte\" }`\n- **lte**: Less than or equal\n  `{ \"type\": \"number\", \"operation\": \"lte\" }`\n\n##### DateTime Operators\n- **exists**: Check if date exists (singleValue: true)\n  `{ \"type\": \"dateTime\", \"operation\": \"exists\" }`\n- **notExists**: Check if date doesn't exist (singleValue: true)\n  `{ \"type\": \"dateTime\", \"operation\": \"notExists\" }`\n- **equals**: Same date/time\n  `{ \"type\": \"dateTime\", \"operation\": \"equals\" }`\n- **notEquals**: Different date/time\n  `{ \"type\": \"dateTime\", \"operation\": \"notEquals\" }`\n- **after**: After date\n  `{ \"type\": \"dateTime\", \"operation\": \"after\" }`\n- **before**: Before date\n  `{ \"type\": \"dateTime\", \"operation\": \"before\" }`\n- **afterOrEquals**: After or same date\n  `{ \"type\": \"dateTime\", \"operation\": \"afterOrEquals\" }`\n- **beforeOrEquals**: Before or same date\n  `{ \"type\": \"dateTime\", \"operation\": \"beforeOrEquals\" }`\n\n##### Boolean Operators\n- **exists**: Check if boolean exists (singleValue: true)\n  `{ \"type\": \"boolean\", \"operation\": \"exists\" }`\n- **notExists**: Check if boolean doesn't exist (singleValue: true)\n  `{ \"type\": \"boolean\", \"operation\": \"notExists\" }`\n- **true**: Is true (singleValue: true)\n  `{ \"type\": \"boolean\", \"operation\": \"true\" }`\n- **false**: Is false (singleValue: true)\n  `{ \"type\": \"boolean\", \"operation\": \"false\" }`\n- **equals**: Equal to boolean value\n  `{ \"type\": \"boolean\", \"operation\": \"equals\" }`\n- **notEquals**: Not equal to boolean value\n  `{ \"type\": \"boolean\", \"operation\": \"notEquals\" }`\n\n##### Array Operators\n- **exists**: Check if array exists (singleValue: true)\n  `{ \"type\": \"array\", \"operation\": \"exists\" }`\n- **notExists**: Check if array doesn't exist (singleValue: true)\n  `{ \"type\": \"array\", \"operation\": \"notExists\" }`\n- **empty**: Array is empty (singleValue: true)\n  `{ \"type\": \"array\", \"operation\": \"empty\" }`\n- **notEmpty**: Array is not empty (singleValue: true)\n  `{ \"type\": \"array\", \"operation\": \"notEmpty\" }`\n- **contains**: Array contains value\n  `{ \"type\": \"array\", \"operation\": \"contains\" }`\n- **notContains**: Array doesn't contain value\n  `{ \"type\": \"array\", \"operation\": \"notContains\" }`\n- **lengthEquals**: Array length equals\n  `{ \"type\": \"array\", \"operation\": \"lengthEquals\" }`\n- **lengthNotEquals**: Array length not equals\n  `{ \"type\": \"array\", \"operation\": \"lengthNotEquals\" }`\n- **lengthGt**: Array length greater than\n  `{ \"type\": \"array\", \"operation\": \"lengthGt\" }`\n- **lengthLt**: Array length less than\n  `{ \"type\": \"array\", \"operation\": \"lengthLt\" }`\n- **lengthGte**: Array length greater or equal\n  `{ \"type\": \"array\", \"operation\": \"lengthGte\" }`\n- **lengthLte**: Array length less or equal\n  `{ \"type\": \"array\", \"operation\": \"lengthLte\" }`\n\n##### Object Operators\n- **exists**: Check if object exists (singleValue: true)\n  `{ \"type\": \"object\", \"operation\": \"exists\" }`\n- **notExists**: Check if object doesn't exist (singleValue: true)\n  `{ \"type\": \"object\", \"operation\": \"notExists\" }`\n- **empty**: Object is empty (singleValue: true)\n  `{ \"type\": \"object\", \"operation\": \"empty\" }`\n- **notEmpty**: Object is not empty (singleValue: true)\n  `{ \"type\": \"object\", \"operation\": \"notEmpty\" }`\n\n#### Important Notes:\n1. **singleValue operators**: When using exists, notExists, empty, notEmpty, true, or false operators, DO NOT include a rightValue in the condition\n2. **Expression values**: Both leftValue and rightValue can be expressions using `={{ ... }}` syntax\n3. **Type matching**: The operator type must match the data type you're comparing\n4. **Case sensitivity**: Only applies to string comparisons when caseSensitive is true in options\n5. **Type validation**: \"loose\" allows type coercion, \"strict\" requires exact type matches";
