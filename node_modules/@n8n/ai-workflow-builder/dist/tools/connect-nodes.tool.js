"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONNECT_NODES_TOOL = exports.nodeConnectionSchema = void 0;
exports.createConnectNodesTool = createConnectNodesTool;
const tools_1 = require("@langchain/core/tools");
const zod_1 = require("zod");
const errors_1 = require("../errors");
const progress_1 = require("./helpers/progress");
const response_1 = require("./helpers/response");
const state_1 = require("./helpers/state");
const validation_1 = require("./helpers/validation");
const connection_utils_1 = require("./utils/connection.utils");
exports.nodeConnectionSchema = zod_1.z.object({
    sourceNodeId: zod_1.z
        .string()
        .describe('The UUID of the source node. For ai_* connections (ai_languageModel, ai_tool, etc.), this MUST be the sub-node (e.g., OpenAI Chat Model). For main connections, this is the node producing the output'),
    targetNodeId: zod_1.z
        .string()
        .describe('The UUID of the target node. For ai_* connections, this MUST be the main node that accepts the sub-node (e.g., AI Agent, Basic LLM Chain). For main connections, this is the node receiving the input'),
    sourceOutputIndex: zod_1.z
        .number()
        .optional()
        .describe('The index of the output to connect from (default: 0)'),
    targetInputIndex: zod_1.z
        .number()
        .optional()
        .describe('The index of the input to connect to (default: 0)'),
});
exports.CONNECT_NODES_TOOL = {
    toolName: 'connect_nodes',
    displayTitle: 'Connecting nodes',
};
function createConnectNodesTool(nodeTypes, logger) {
    const dynamicTool = (0, tools_1.tool)((input, config) => {
        const reporter = (0, progress_1.createProgressReporter)(config, exports.CONNECT_NODES_TOOL.toolName, exports.CONNECT_NODES_TOOL.displayTitle);
        try {
            const validatedInput = exports.nodeConnectionSchema.parse(input);
            reporter.start(validatedInput);
            const state = (0, state_1.getWorkflowState)();
            const workflow = (0, state_1.getCurrentWorkflow)(state);
            (0, progress_1.reportProgress)(reporter, 'Finding nodes to connect...');
            let matchedSourceNode = (0, validation_1.validateNodeExists)(validatedInput.sourceNodeId, workflow.nodes);
            let matchedTargetNode = (0, validation_1.validateNodeExists)(validatedInput.targetNodeId, workflow.nodes);
            if (!matchedSourceNode || !matchedTargetNode) {
                const missingNodeId = !matchedSourceNode
                    ? validatedInput.sourceNodeId
                    : validatedInput.targetNodeId;
                const nodeError = new errors_1.NodeNotFoundError(missingNodeId);
                const error = {
                    message: nodeError.message,
                    code: 'NODES_NOT_FOUND',
                    details: {
                        sourceNodeId: validatedInput.sourceNodeId,
                        targetNodeId: validatedInput.targetNodeId,
                        foundSource: !!matchedSourceNode,
                        foundTarget: !!matchedTargetNode,
                    },
                };
                reporter.error(error);
                return (0, response_1.createErrorResponse)(config, error);
            }
            const sourceNodeType = nodeTypes.find((nt) => nt.name === matchedSourceNode.type);
            const targetNodeType = nodeTypes.find((nt) => nt.name === matchedTargetNode.type);
            if (!sourceNodeType || !targetNodeType) {
                const missingType = !sourceNodeType ? matchedSourceNode.type : matchedTargetNode.type;
                const typeError = new errors_1.NodeTypeNotFoundError(missingType);
                const error = {
                    message: typeError.message,
                    code: 'NODE_TYPE_NOT_FOUND',
                    details: {
                        sourceType: matchedSourceNode.type,
                        targetType: matchedTargetNode.type,
                    },
                };
                reporter.error(error);
                return (0, response_1.createErrorResponse)(config, error);
            }
            (0, progress_1.reportProgress)(reporter, 'Inferring connection type...');
            logger?.debug('\n=== Connect Nodes Tool ===');
            logger?.debug(`Attempting to connect: ${matchedSourceNode.name} -> ${matchedTargetNode.name}`);
            const inferResult = (0, connection_utils_1.inferConnectionType)(matchedSourceNode, matchedTargetNode, sourceNodeType, targetNodeType);
            if (inferResult.error) {
                const connectionError = new errors_1.ConnectionError(inferResult.error, {
                    fromNodeId: matchedSourceNode.id,
                    toNodeId: matchedTargetNode.id,
                });
                const error = {
                    message: connectionError.message,
                    code: 'CONNECTION_TYPE_INFERENCE_ERROR',
                    details: {
                        sourceNode: matchedSourceNode.name,
                        targetNode: matchedTargetNode.name,
                        possibleTypes: inferResult.possibleTypes,
                    },
                };
                reporter.error(error);
                return (0, response_1.createErrorResponse)(config, error);
            }
            if (!inferResult.connectionType) {
                const error = {
                    message: 'Could not infer connection type',
                    code: 'CONNECTION_TYPE_INFERENCE_FAILED',
                    details: {
                        sourceNode: matchedSourceNode.name,
                        targetNode: matchedTargetNode.name,
                    },
                };
                reporter.error(error);
                return (0, response_1.createErrorResponse)(config, error);
            }
            const connectionType = inferResult.connectionType;
            const inferredSwap = inferResult.requiresSwap ?? false;
            if (inferredSwap) {
                logger?.debug('Swapping nodes based on inference result');
                const temp = matchedSourceNode;
                matchedSourceNode = matchedTargetNode;
                matchedTargetNode = temp;
            }
            (0, progress_1.reportProgress)(reporter, `Inferred connection type: ${connectionType}${inferredSwap ? ' (swapped nodes)' : ''}`);
            logger?.debug(`Final connection: ${matchedSourceNode.name} -> ${matchedTargetNode.name} (${connectionType})\n`);
            (0, progress_1.reportProgress)(reporter, `Connecting ${matchedSourceNode.name} to ${matchedTargetNode.name}...`);
            const validation = (0, connection_utils_1.validateConnection)(matchedSourceNode, matchedTargetNode, connectionType, nodeTypes);
            if (!validation.valid) {
                const connectionError = new errors_1.ConnectionError(validation.error ?? 'Invalid connection', {
                    fromNodeId: matchedSourceNode.id,
                    toNodeId: matchedTargetNode.id,
                });
                const error = {
                    message: connectionError.message,
                    code: 'INVALID_CONNECTION',
                    details: {
                        sourceNode: matchedSourceNode.name,
                        targetNode: matchedTargetNode.name,
                        connectionType,
                    },
                };
                reporter.error(error);
                return (0, response_1.createErrorResponse)(config, error);
            }
            const actualSourceNode = validation.swappedSource ?? matchedSourceNode;
            const actualTargetNode = validation.swappedTarget ?? matchedTargetNode;
            const swapped = inferredSwap || !!validation.shouldSwap;
            const sourceIndex = validatedInput.sourceOutputIndex ?? 0;
            const targetIndex = validatedInput.targetInputIndex ?? 0;
            const newConnection = {
                [actualSourceNode.name]: {
                    [connectionType]: Array(sourceIndex + 1)
                        .fill(null)
                        .map((_, i) => i === sourceIndex
                        ? [
                            {
                                node: actualTargetNode.name,
                                type: connectionType,
                                index: targetIndex,
                            },
                        ]
                        : []),
                },
            };
            const message = (0, connection_utils_1.formatConnectionMessage)(actualSourceNode.name, actualTargetNode.name, connectionType, swapped);
            const output = {
                sourceNode: actualSourceNode.name,
                targetNode: actualTargetNode.name,
                connectionType,
                swapped,
                message,
                found: {
                    sourceNode: true,
                    targetNode: true,
                },
            };
            reporter.complete(output);
            const stateUpdates = (0, state_1.updateWorkflowConnections)(newConnection);
            return (0, response_1.createSuccessResponse)(config, message, stateUpdates);
        }
        catch (error) {
            let toolError;
            if (error instanceof zod_1.z.ZodError) {
                const validationError = new errors_1.ValidationError('Invalid connection parameters', {
                    field: error.errors[0]?.path.join('.'),
                    value: error.errors[0]?.message,
                });
                toolError = {
                    message: validationError.message,
                    code: 'VALIDATION_ERROR',
                    details: error.errors,
                };
            }
            else {
                toolError = {
                    message: error instanceof Error ? error.message : 'Unknown error occurred',
                    code: 'EXECUTION_ERROR',
                };
            }
            reporter.error(toolError);
            return (0, response_1.createErrorResponse)(config, toolError);
        }
    }, {
        name: exports.CONNECT_NODES_TOOL.toolName,
        description: `Connect two nodes in the workflow. The tool automatically determines the connection type based on node capabilities and ensures correct connection direction.

UNDERSTANDING CONNECTIONS:
- SOURCE NODE: The node that PRODUCES output/provides capability
- TARGET NODE: The node that RECEIVES input/uses capability
- Flow direction: Source → Target

AUTOMATIC CONNECTION TYPE DETECTION:
- The tool analyzes the nodes' inputs and outputs to determine the appropriate connection type
- If multiple connection types are possible, the tool will provide an error with the available options
- The connection type is determined by matching compatible input/output types between nodes

For ai_* connections (ai_languageModel, ai_tool, ai_memory, ai_embedding, etc.):
- Sub-nodes are ALWAYS the source (they provide capabilities)
- Main nodes are ALWAYS the target (they use capabilities)
- The tool will AUTO-CORRECT if you specify them backwards

CONNECTION EXAMPLES:
- OpenAI Chat Model → AI Agent (detects ai_languageModel)
- Calculator Tool → AI Agent (detects ai_tool)
- Simple Memory → Basic LLM Chain (detects ai_memory)
- Embeddings OpenAI → Vector Store (detects ai_embedding)
- Document Loader → Embeddings OpenAI (detects ai_document)
- HTTP Request → Set (detects main)`,
        schema: exports.nodeConnectionSchema,
    });
    return {
        tool: dynamicTool,
        ...exports.CONNECT_NODES_TOOL,
    };
}
//# sourceMappingURL=connect-nodes.tool.js.map