import { type INodeTypeDescription } from 'n8n-workflow';
import { z } from 'zod';
import type { BuilderToolBase } from '../utils/stream-processor';
export declare const NODE_SEARCH_TOOL: BuilderToolBase;
export declare function createNodeSearchTool(nodeTypes: INodeTypeDescription[]): {
    toolName: string;
    displayTitle: string;
    getCustomDisplayTitle?: (values: Record<string, unknown>) => string;
    tool: import("@langchain/core/tools").DynamicStructuredTool<z.ZodObject<{
        queries: z.ZodArray<z.ZodObject<{
            queryType: z.ZodEnum<["name", "subNodeSearch"]>;
            query: z.ZodOptional<z.ZodString>;
            connectionType: z.ZodOptional<z.ZodNativeEnum<{
                readonly AiAgent: "ai_agent";
                readonly AiChain: "ai_chain";
                readonly AiDocument: "ai_document";
                readonly AiEmbedding: "ai_embedding";
                readonly AiLanguageModel: "ai_languageModel";
                readonly AiMemory: "ai_memory";
                readonly AiOutputParser: "ai_outputParser";
                readonly AiRetriever: "ai_retriever";
                readonly AiReranker: "ai_reranker";
                readonly AiTextSplitter: "ai_textSplitter";
                readonly AiTool: "ai_tool";
                readonly AiVectorStore: "ai_vectorStore";
                readonly Main: "main";
            }>>;
        }, "strip", z.ZodTypeAny, {
            queryType: "name" | "subNodeSearch";
            connectionType?: "ai_agent" | "ai_chain" | "ai_document" | "ai_embedding" | "ai_languageModel" | "ai_memory" | "ai_outputParser" | "ai_retriever" | "ai_reranker" | "ai_textSplitter" | "ai_tool" | "ai_vectorStore" | "main" | undefined;
            query?: string | undefined;
        }, {
            queryType: "name" | "subNodeSearch";
            connectionType?: "ai_agent" | "ai_chain" | "ai_document" | "ai_embedding" | "ai_languageModel" | "ai_memory" | "ai_outputParser" | "ai_retriever" | "ai_reranker" | "ai_textSplitter" | "ai_tool" | "ai_vectorStore" | "main" | undefined;
            query?: string | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        queries: {
            queryType: "name" | "subNodeSearch";
            connectionType?: "ai_agent" | "ai_chain" | "ai_document" | "ai_embedding" | "ai_languageModel" | "ai_memory" | "ai_outputParser" | "ai_retriever" | "ai_reranker" | "ai_textSplitter" | "ai_tool" | "ai_vectorStore" | "main" | undefined;
            query?: string | undefined;
        }[];
    }, {
        queries: {
            queryType: "name" | "subNodeSearch";
            connectionType?: "ai_agent" | "ai_chain" | "ai_document" | "ai_embedding" | "ai_languageModel" | "ai_memory" | "ai_outputParser" | "ai_retriever" | "ai_reranker" | "ai_textSplitter" | "ai_tool" | "ai_vectorStore" | "main" | undefined;
            query?: string | undefined;
        }[];
    }>, {
        queries: {
            queryType: "name" | "subNodeSearch";
            connectionType?: "ai_agent" | "ai_chain" | "ai_document" | "ai_embedding" | "ai_languageModel" | "ai_memory" | "ai_outputParser" | "ai_retriever" | "ai_reranker" | "ai_textSplitter" | "ai_tool" | "ai_vectorStore" | "main" | undefined;
            query?: string | undefined;
        }[];
    }, {
        queries: {
            queryType: "name" | "subNodeSearch";
            connectionType?: "ai_agent" | "ai_chain" | "ai_document" | "ai_embedding" | "ai_languageModel" | "ai_memory" | "ai_outputParser" | "ai_retriever" | "ai_reranker" | "ai_textSplitter" | "ai_tool" | "ai_vectorStore" | "main" | undefined;
            query?: string | undefined;
        }[];
    }, import("@langchain/langgraph").Command<unknown>>;
};
